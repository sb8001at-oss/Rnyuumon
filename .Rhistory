y <- numeric(10)
for(i in 1:10){
y[i] <- rbinom(10, 1, prob = probs[i]) |> sum()
}
z <- 10 - y
dbn <- data.frame(x, y, z)
# yはベルヌーイ試行の成功数、zは失敗数
head(dbn)
# 成功・失敗をmatrixで指定する
glm(cbind(y, z) ~ x, family = "binomial")
# 回帰をグラフで表示
dbn |>
ggplot(aes(x = x, y = y / 10))+
geom_point()+
geom_function(fun=\(x){1 / (1 + exp(-(-5.025 + 1.119 * x)))})
head(binom_d)
# 二項分布（logitをリンク関数とする）
glm(y ~ x + sex, data = binom_d, family = "binomial")
# 回帰の結果をプロットする
binom_d |>
ggplot(aes(x = x, y = y, color = sex))+
geom_point()+
geom_function(fun = \(x){1 / (1 + exp(-(-4.20991 + 0.09672 * x)))}, color = "blue") +
geom_function(fun = \(x){1 / (1 + exp(-(-4.20991  - 0.52864 + 0.09672 * x)))}, color = "red")
head(pois_d)
glm(y ~ x, data = pois_d, family = "poisson")
plot(pois_d$x, pois_d$y, xlim = c(0, 10), ylim = c(0, 50))
par(new = T)
plot(\(x){exp(0.1510 + 0.3331 * x)}, xlim = c(0, 10), ylim = c(0, 50), xlab = "", ylab = "")
glm(y ~ x + fertilizer, data = pois_d, family = "poisson")
pois_d |>
ggplot(aes(x = x, y = y, color = fertilizer))+
geom_point()+
geom_function(fun = \(x){exp(0.03425 + 0.33310 * x)}, color = "red")+
geom_function(fun = \(x){exp(0.03425 + 0.22131 + 0.33310 * x)}, color = "blue")
# 線形混合モデルのデータ
pacman::p_load(lmerTest)
data("sleepstudy", package = "lme4")
head(sleepstudy)
# DaysとReactionの関係を調べる
ggplot(sleepstudy, aes(x = Days, y = Reaction, color = Subject, alpha = 0.5)) +
geom_point(size = 2) +
theme(legend.position = "none") +
geom_line()
lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy) %>% summary()
lmer(Reaction ~ Days + (Days | Subject), sleepstudy) %>% summary()
result_lmer <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
result_lmer@sigma # 残差の標準偏差
anova(result_lmer, type = "I") # type Iの分散分析結果
coef(result_lmer) # 個々の被験者の傾きと切片
# cbpp（contagious bovine pleuropneumonia、牛肺疫）に関するデータ
data(cbpp, package = "lme4")
# herdは牛の群、incidenceは牛肺疫への罹患数、sizeは群内の牛の数、periodは観察時期
head(cbpp)
cbpp |>
ggplot(aes(x = period |> as.character() |> as.numeric(), y = incidence / size, color = herd)) +
geom_point() +
geom_line()
cbind(cbpp$incidence, cbpp$size - cbpp$incidence) |> head() # 左が牛肺疫に罹患した牛、右は罹患していない牛
# 一般化線形混合モデル（ランダム切片）
glmer(cbind(incidence, size - incidence) ~ period + (1 | herd), family = "binomial", data = cbpp)
pacman::p_load(gplots)
A <- rep(c("a", "b", "c"), c(10, 5, 5))
B <- rep(c("a", "b", "d"), c(10, 5, 5))
venn(list(A, B), small = 0, simplify = TRUE)
pacman::p_load(kernlab)
x <- seq(-20, 20, 0.1)
d1 <- data.frame(x = x, y = sin(x) / x + rnorm(401, sd = 0.03))
fit <- gausspr(x = d1$x, y = d1$y, variance.model = T)
d <-data.frame(x, pred = predict(fit, x))
d$sd <- predict(fit, x, type = "sdeviation") # SD
ggplot()+
geom_point(data = d1, aes(x = x, y = y, color = 1), size = 1) +
geom_ribbon(data = d, aes(x = x, ymax = pred + sd, ymin = pred - sd, color = 2, fill = 2), alpha = 0.5)+
geom_line(data = d, aes(x = x, y = pred, color = 2, alpha = 0.5), linewidth = 1)
c(
glm(Sepal.Length ~ Sepal.Width, data = iris, family = "gaussian") |> _$aic,
glm(Sepal.Length ~ Petal.Length, data = iris, family = "gaussian") |> _$aic,
glm(Sepal.Length ~ Petal.Width, data = iris, family = "gaussian") |> _$aic,
glm(Sepal.Length ~ Sepal.Width + Petal.Length, data = iris, family = "gaussian") |> _$aic,
glm(Sepal.Length ~ Petal.Length + Petal.Width, data = iris, family = "gaussian") |> _$aic,
glm(Sepal.Length ~ Sepal.Width + Petal.Width, data = iris, family = "gaussian") |> _$aic,
glm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris, family = "gaussian") |> _$aic
)
# 回帰の返り値をlm_irisに代入
lm_iris <-
lm(iris$Sepal.Length ~
iris$Sepal.Width +
iris$Petal.Length +
iris$Petal.Width +
iris$Species)
# 下の例ではフルモデル（説明変数をすべて含むモデル）が選択されている
# trace = 1とすると，AIC選択の過程が表示される
step(lm_iris, trace = 0)
## スパース回帰のライブラリ（mlbenchはデータを取得するために読み込み）
pacman::p_load(glmnet, mlbench)
data("BostonHousing")
head(BostonHousing) # データにmlbenchパッケージのBostonHousingを用いる
# 前処理
tempBoston <- BostonHousing
tempBoston$chas <- as.numeric(tempBoston$chas)
# 説明変数になるデータをscale関数で正規化
tempBoston[1:13] <- tempBoston[1:13] |>  scale()
# 平均がほぼ0，標準偏差が1になる
tempBoston[1:13] |> apply(2, mean) |> round(digits = 3)
tempBoston[1:13] |> apply(2, sd)
colnames(tempBoston) # medvを除くと13列のデータになっている
# とりあえずlmとStepでやってみる
# 説明変数を.で指定すると，目的変数以外のすべてのデータを説明変数に設定する
lm_model <- lm(medv ~ ., data = tempBoston)
step(lm_model, trace = 0)
# ラッソ回帰：正規化項の係数を求める
# 乱数計算を含むため，seedを設定しないと計算値は変化する
cvlasso_m <-
cv.glmnet(
x = tempBoston[,1:13] |> as.matrix(),
y = tempBoston$medv,
family = "gaussian",
alpha = 1)
# 左側の点線のラムダを採用する
plot(cvlasso_m)
# 大きい方のlog(λ)の点線の値
cvlasso_m$lambda.1se |> log()
# 小さい方のlog(λ)の点線の値（こちらを採用する）
cvlasso_m$lambda.min |> log()
# ラッソ回帰：正規化項の係数を入力せずに計算
lasso_m <-
glmnet(x = tempBoston[,1:13],
y = tempBoston$medv,
family = "gaussian",
alpha = 1)
# 正則化項（L1）の大きさと傾き
plot(lasso_m)
# ラムダの大きさと傾き
plot(lasso_m, xvar = "lambda")
# ラッソ回帰：正規化項の係数を入力して計算
lasso_m2 <-
glmnet(x = tempBoston[,1:13],
y = tempBoston$medv,
family = "gaussian",
lambda = cvlasso_m$lambda.min,
alpha = 1)
# モデルと自由度，ラムダ等が帰ってくる
lasso_m2
# 傾きの項（.は傾き0になっている）
lasso_m2$beta
cvridge_m <-
cv.glmnet(
x = tempBoston[,1:13] |> as.matrix(),
y = tempBoston$medv,
family = "gaussian",
alpha = 0)
plot(cvridge_m)
cvridge_m$lambda.min %>% log
ridge_m <-
glmnet(
x=tempBoston[,1:13],
y=tempBoston$medv,
family="gaussian",
lambda=cvridge_m$lambda.min,
alpha=0)
ridge_m$beta
# 実際にはアルファを最適化して利用する
cven_m <-
cv.glmnet(
x = tempBoston[,1:13] |> as.matrix(),
y = tempBoston$medv,
family = "gaussian",
alpha = 0.5)
plot(cven_m)
cven_m$lambda.min %>% log
en_m <-
glmnet(
x = tempBoston[,1:13],
y = tempBoston$medv, family="gaussian",
lambda = cven_m$lambda.min,
alpha = 0.5)
en_m$beta
# 主成分への変換
pc <- iris[,2:4] |> prcomp(scale = T)
pc$x |> head() # 変換後の主成分（PC1～PC3）
pc$rotation # 主成分への変換の係数
# 目的変数をデータフレームに付け加える
pc1 <- pc$x |>  as.data.frame()
pc1$Sepal.Length <- iris$Sepal.Length
# 主成分で回帰（主成分4つをすべて用いる）
pcr_lm <- lm(Sepal.Length ~., data = pc1)
# 予測の例
example_iris <- data.frame(Sepal.Width = 5, Petal.Length = 6, Petal.Width = 3)
# 予測に用いる説明変数を主成分に変換
pc_example <- predict(pc, example_iris)
pc_example
# 主成分を用いて予測値を計算
predict(pcr_lm, pc_example |> as.data.frame())
pacman::p_load(pls)
data(yarn)
# PCRの計算（ncompは回帰に用いる主成分の数）
yarn.pcr <- pcr(density ~ NIR, ncomp = 6, data = yarn, validation = "CV")
yarn.pcr |> summary() # 回帰結果の表示
# yarnはplsパッケージのデータセット
pacman::p_load(pls)
data(yarn) # ポリエステル繊維のNIR（近赤外吸収）データ
colnames(yarn) # NIRにはNIR.1～NIR.268の列が登録
dim(yarn)
summary(yarn$train) # 21データが訓練，7データがテストデータ
yarn.pls <-
plsr(
density ~ NIR,
ncomp = 6,
data = yarn,
validation = "CV")
yarn.pls |> summary()
# モデルにデータを与えてpredictすることで用いる
result_prediction <- predict(
yarn.pls,
comps = 1:6,
newdata = yarn[!yarn$train,])
# 左がテストデータ，右が予測値
data.frame(testresult = yarn[!yarn$train,]$density, result_prediction) |>
knitr::kable()
pacman::p_load(neuralnet)
formula_iris <-
as.formula(
"Sepal.Length ~
Sepal.Width +
Petal.Length +
Petal.Width +
Species"
)
# 2層（nodeが3，3）
set.seed(0)
# 説明変数はスケーリングする
iris_scale <- scale(iris[, 2:4]) |> as.data.frame()
# 種は―1～1にスケーリング
iris_scale$Species <- iris$Species |> as.numeric() - 2
# 目的変数は0～1にスケーリング
iris_scale$Sepal.Length <-
(iris$Sepal.Length - min(iris$Sepal.Length)) / (max(iris$Sepal.Length) - min(iris$Sepal.Length))
nn_iris <- neuralnet(
formula = formula_iris,
data = iris_scale,
hidden = c(3, 3),
act.fct = "logistic", # ソフトマックス（この他に"tanh"を選べる）
linear.output = T # 出力層に活性化関数を適用するかどうか
)
plot(nn_iris, rep = "best")
# 3層（nodeが2，3，2）
set.seed(0)
nn_iris2 <- neuralnet(
formula = formula_iris,
data = iris_scale,
hidden = c(2,3,2),
act.fct = "logistic",
linear.output = T
)
plot(nn_iris2, rep = "best")
nn_iris3 <- neuralnet(
formula = formula_iris,
data = iris_scale,
hidden = c(4, 4),
act.fct = "logistic",
linear.output = T
)
# 上のニューラルネットワークで予測する
predict(nn_iris3, iris_scale[1:5,])
# 予測値と実際の値の比較
pred_real <- data.frame(
# 予測値を変換
prediction = predict(nn_iris3, iris_scale[1:50,]) * (max(iris$Sepal.Length) - min(iris$Sepal.Length)) + min(iris$Sepal.Length),
real_value = iris$Sepal.Length[1:50] # 実際の値
)
plot(pred_real)
# カーネル回帰
head(faithful)
x <- faithful$waiting
hist(x, xlim=c(40, 100))
par(new=T)
density(x) |> plot(xlim=c(40, 100), main="", xlab="", ylab="", axes = FALSE)
# KernSmooth::bkde関数を用いる方法
pacman::p_load(KernSmooth)
est <- bkde(faithful$waiting, bandwidth=3) %>% as.data.frame
ggplot()+
geom_line(data=est, aes(x=x, y=y*950))+
geom_histogram(data=faithful, aes(x=waiting, fill=1), alpha=0.5)+
theme(legend.position="none")
DNase1 <- subset(DNase, Run == 1)
plot(density ~ conc, data = DNase1)
# SSlogis関数は初期値を自動設定してくれる（self start）nlsのロジスティック回帰用の関数
fm1DNase1 <- nls(density ~ SSlogis(log(conc), Asym, xmid, scal), DNase1)
# Asymは漸近線を示すパラメータ，xmidは変曲点のx軸の値を示すパラメータ，
# scalはスケールパラメータ
summary(fm1DNase1)
# predict関数で予測することができる
predict(fm1DNase1, data.frame(conc = seq(0, 12, by=0.1))) |> head()
# 回帰結果のグラフ
d <- data.frame(conc = seq(0, 12, by=0.1), pred = predict(fm1DNase1, data.frame(conc = seq(0, 12, by = 0.1))))
ggplot()+
geom_point(data = DNase1, aes(x = conc, y = density, color = "#F8766D"))+
geom_line(data = d, aes(x = conc, y = pred), color = "#00BFC4")+
theme(legend.position = "none")
loess_cars <- loess(dist ~ speed, data = cars) # spanのデフォルト値は0.75
summary(loess_cars)
loess_cars2 <- loess(dist ~ speed, cars, span = 0.3) # spanを短く設定
# 赤がspan=0.75，青がspan=0.3
plot(cars, xlim = c(0, 30), ylim = c(0, 120))
par(new = T)
plot(
seq(5, 30, by = 0.1),
predict(loess_cars, data.frame(speed = seq(5, 30, by = 0.1))),
type = "l",
xlim = c(0, 30),
ylim = c(0, 120),
xlab = "",
ylab = "",
col = 2)
par(new = T)
plot(
seq(5, 30, by = 0.1),
predict(loess_cars2, data.frame(speed = seq(5, 30, by = 0.1))),
type = "l",
xlim = c(0, 30),
ylim = c(0, 120),
xlab = "",
ylab = "",
col = 5)
lowess(cars) # 返り値は同じ長さのxとyのリストになる
plot(cars, main = "lowess(cars)")
lines(lowess(cars), col = 2)
lines(lowess(cars, f = 0.1), col = 5) # 部分最適化の幅を狭くする
x <- seq(-10, 10, by=0.05)
y <- 3 * x^2
d <- data.frame(x, y)
x2 <- seq(0, 20, by=0.05)
y2 <- -1.5 * (x2 - 15)^2 + 225
d2 <- data.frame(x2, y2)
set.seed(2)
d3 <- data.frame(
x = seq(-10, 20, by=2),
y = c(3 * seq(-10, 5, by=2) ^ 2 + rnorm(8, 0, 25),
-1.5 * (seq(5, 20, by=2) - 15)^2 + 225 + rnorm(8, 0, 25)
))
plot(d3,
xlim=c(-10, 20),
ylim=c(-112.5, 300),
main="spline平滑化のイメージ",
cex = 2,
pch = 19)
par(new=T)
plot(
d |> filter(x <= 5) |> _$x,
d |> filter(x <= 5) |> _$y,
xlim=c(-10, 20),
ylim=c(-112.5, 300),
type="l",
col=2,
lwd=4, xlab="", ylab="")
par(new=T)
plot(
d |> filter(x > 5) |> _$x,
d |> filter(x > 5) |> _$y,
xlim=c(-10, 20),
ylim=c(-112.5, 300),
type="l",
col=2,
lwd=0.5, xlab="", ylab="")
par(new=T)
plot(
d2 |> filter(x2 > 5) |> _$x2,
d2 |> filter(x2 > 5) |> _$y2,
xlim=c(-10, 20),
ylim=c(-112.5, 300),
type="l",
col=4,
lwd=4, xlab="", ylab="")
par(new=T)
plot(
d2 |> filter(x2 <= 5) |> _$x2,
d2 |> filter(x2 <= 5) |> _$y2,
xlim=c(-10, 20),
ylim=c(-112.5, 300),
type="l",
col=4,
lwd=0.5, xlab="", ylab="")
BJsales_d <- as.data.frame(BJsales) |> mutate(time = 1:150)
smooth.spline(BJsales_d$time, BJsales_d$x, penalty = 1.4)
plot(BJsales, col = 1, xlim = c(0, 150), ylim = c(200, 260))
par(new = T)
smooth.spline(BJsales_d$time, BJsales_d$x, penalty = 1.4) |>
plot(type = "l", col = 2, xlim = c(0, 150), ylim = c(200, 260), xlab = "", ylab = "")
pacman::p_load(mgcv)
aq <- airquality |> mutate(days = 1:nrow(airquality))
result_gam <- gam(Ozone ~ s(Solar.R) + s(Wind) + s(Temp) + s(days), data = aq)
par(mfrow = c(2,2))
plot(result_gam, select = 1);plot(result_gam, select = 2)
plot(result_gam, select = 3);plot(result_gam, select = 4)
gam(Ozone ~ s(Solar.R) + s(Wind) + s(Temp) + days, data = aq)
result_gam2 <-
gam(
Ozone ~
s(Solar.R, bs = "ts") +
s(Wind, bs = "ts") +
s(Temp, bs = "ts") +
s(days, bs = "ts"),
data = aq)
summary(result_gam2) # daysは残っているが、0付近に集まる
# tsのモデルの方がわずかにAICが小さい
AIC(result_gam)
AIC(result_gam2)
plot(result_gam2)
?plot.gam
plot(result_gam2, select = 4) # daysは残っているが、0付近に集まる
plot(result_gam2, select = 4)
result_gam
result_gam2
# gammaを1.4に指定する
result_gam5 <-
gam(
Ozone ~
s(Solar.R) + s(Wind) + s(Temp),
data = aq,
gamma = 1.4)
# gammaを0.1に指定する
result_gam6 <-
gam(
Ozone ~
s(Solar.R) + s(Wind) + s(Temp),
data = aq,
gamma = 0.1)
# 上は滑らか，下は曲がりくねった結果になる
par(mfrow(1, 2))
# gammaを1.4に指定する
result_gam5 <-
gam(
Ozone ~
s(Solar.R) + s(Wind) + s(Temp),
data = aq,
gamma = 1.4)
# gammaを0.1に指定する
result_gam6 <-
gam(
Ozone ~
s(Solar.R) + s(Wind) + s(Temp),
data = aq,
gamma = 0.1)
# 上は滑らか，下は曲がりくねった結果になる
par(mfrow=c(1, 2))
plot(result_gam5, select = 1)
plot(result_gam6, select = 1)
result_gam7 <-
gam(
Ozone ~
s(Solar.R, by = days),
data = aq)
#
plot(result_gam7, select = 1)
message("これはメッセージです．実行に問題はありません")
warning("これはwarning（警告）です．実行に問題があるかもしれません")
stop("これはerrorです．実行を止めます．")
stopifnot(FALSE) # 条件がFALSEだとエラーが出る
stopifnot("エラーメッセージはこのように設定する" = FALSE) # =の後に条件式を書く
# messageが出る場合
readr::read_tsv("iris.txt")
# warning（警告）が出る場合
tibble::as.tibble(iris[1,])
# error（エラー）が出る場合
100 + dog
problems()
# messageが出る場合
readr::read_tsv("iris.txt")
# messageが出る場合
problems()
?readr::read_tsv
write.table(iris, "iris.txt", sep="\t", row.names = F)
# messageが出る場合
readr::read_tsv("iris.txt")
# warning（警告）が出る場合
tibble::as.tibble(iris[1,])
# error（エラー）が出る場合
100 + dog
?attr
d <- data.frame(
func = c("data.frame(x, y)", "dim(x)", "ncol(x)", "nrow(x)", "colnames(x)", "rownames(x)", "colnames(x) <- y", "rownames(x) <- y", "subset(x, 条件)", "x[order(x$name), ]", "x[rev(order(x$name)), ]", "cbind(x, y)", "rbind(x, y)", "summary(x)", "colSums(x)", "rowSums(x)", "colMeans(x)", "rowMeans(x)", "head(x)", "tail(x)"),
meaning = c("データフレームを作成する", "次元（dimension）を返す","列数を返す", "行数を返す", "列の名前を返す", "行の名前を返す", "yを列の名前に設定する", "yを行の名前に設定する", "条件に適合した行を抽出する", "name列で昇順に並べ替え", "name列で降順に並べ替え", "列を追加する", "行を追加する", "データフレームの要約を表示", "列（縦）方向の和を返す", "行（横）方向の和を返す", "列（縦）方向の平均値を返す", "行（横）方向の平均値を返す", "データフレームの上から6行を表示", "データフレームの下から6行を表示")
)
d
1 |>  attributes()
"a" |> attributes()
T |> attributes()
c(1, 1, 1) |> attributes()
list(1, 1, 1) |> attributes()
matrix(1:4, nrow = 2) |> attributes()
factor(1) |> attributes()
iris |> attributes()
Nile |> attributes()
iris |> attributes() |> lapply(head)
Nile |> attributes()
factor(1) |> attributes()
methods("plot")
matrix(1:15, nrow=3)
sweep(matrix(1:15, nrow=3), 1, 1:3) # 行方向に1, 2, 3を引く
sweep(matrix(1:15, nrow=3), 2, 1:5) # 列方向に1, 2, 3, 4, 5を引く
# 復元抽出
sample(1:3, 5, replace = TRUE)
# 非復元抽出
sample(1:3, 3, replace = FALSE)
# 非復元抽出で取り出す値の数がベクターより長いと、エラーとなる
sample(1:3, 5, replace = FALSE)
install.packages("netrankr")
bibtex(citation("netrankr"))
tobibtex(citation("netrankr"))
toBibtex(citation("netrankr"))
getwd()
