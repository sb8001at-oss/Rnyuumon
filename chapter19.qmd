# コーディング規約

```{r, setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, eval = FALSE
)
```

Rに限らず、どのようなプログラミング言語を用いる場合においても、読みやすいコードと読みにくいコードがあります。また、変数や関数の名前はわかりやすくつけておかないと、後々どのような意味の変数・関数であったかを理解しにくくなってしまいます。

このような、コードの問題、変数や関数の名前の問題をできるだけ抑えるために、企業などでプログラミングを行う場合には、その組織の**コーディング規約（coding style）**、つまりコードの書き方のルールを設けるのが一般的です。

Rは大学の研究室などで、教官や学生などが小規模なデータの分析に用いる場合も多いため、コーディング規約は必ずしも重要ではありませんが、コードの可読性を高め、解析の再現性（reproducibility）を担保するためにコーディング規約に基づいたプログラミングを心がけた方が良いでしょう。

Rのコーディング規約では、tidyverseに従ったもの（[tidyverse style guide](https://style.tidyverse.org/index.html)）が主流だと思います。

Rには、[`styler`](https://styler.r-lib.org/) [@styler_bib]や[`formatR`](https://yihui.org/formatr/) [@formatR_bib]という、coding styleを修正してくれるライブラリや、Rstudioのコーディング規約修正（reformat code）のショートカット（Ctrl+Shift+A）などが備わっており、ある程度自動的にフォーマットの修正を行うことができますので、このような機能を用いるのもよいでしょう。

![図1：Rstudioでのフォーマットの修正](./image/chapter19_reformatting.png)

詳細なRでのコーディング規約の説明は他の文献に譲ります。

例えば、英語であれば[tidyverse style guide](https://style.tidyverse.org/index.html)や[Google’s R Style Guide](https://google.github.io/styleguide/Rguide.html)、日本語であれば「[私たちのR
ベストプラクティスの探求」（宋財泫先生、矢内勇生先生）](https://www.jaysong.net/RBook/)の11章や[このZennのページ](https://zenn.dev/5991/articles/b6c4ca9c6f2941)、[こちらのCoding styleのページ](https://k-metrics.github.io/cabinet/basics_coding_style.html)などがコーディング規約の参考になります。

コーディングスタイル全体については、[リーダブルコード](https://www.amazon.co.jp/%E3%83%AA%E3%83%BC%E3%83%80%E3%83%96%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89-%E2%80%95%E3%82%88%E3%82%8A%E8%89%AF%E3%81%84%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F%E3%81%9F%E3%82%81%E3%81%AE%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%A7%E5%AE%9F%E8%B7%B5%E7%9A%84%E3%81%AA%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-Theory-practice-Boswell/dp/4873115655) [@Dustin_Boswell2012-06-23]を読んでみるのが良いでしょう。関数や変数の名前に悩んだ場合には、良い名前を提案してくれるサイト（[codic](https://codic.jp/)）も役に立ちます。
