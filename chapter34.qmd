# R markdown・Quarto

```{r, setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE
)

pacman::p_load(tidyverse)
```

Rでスクリプトを書いている時には、コードを書き、コードを説明するコメントを挿入し、コードを逐次実行するのが一般的です。小さな規模のスクリプトを書いている場合にはこのような方法でも大きな問題はありません。

しかし、1つのRファイルにあれもこれも分析を加えていくと、どこで何を計算しているのか、把握することが難しくなっていきます。また、たくさんの分析を一度に行うと、少しスクリプトを修正しただけでプログラムが走らなくなる、結果が大きく変わってしまう、ということも珍しくありません。

このような、スクリプトを書いているときに発生する問題のことを、**再現性の問題**と呼ぶことがあります。Rでは主に統計の計算を行うため、誰が、いつ、どのような場所で計算を行っても、同じ結果が得られる、つまり再現性があることが重要となります。単にスクリプトを書いているだけでは、再現性を維持するのが難しい場合もあります。

また、Rでの計算結果を他の人に説明する場合には、グラフや表を別途保存し、PowerpointやWordなどに張り付ける必要があります。わざわざファイルを保存し、別のファイルに張り付ける作業は無意味ですし、時間を取ります。

このような再現性の確保、計算結果の共有のためのライブラリが[**R markdown**](https://rmarkdown.rstudio.com/)です。R markdownでは、マークアップ言語である**Markdown**を用いて、Rのコードとその説明文を同時に文書として作成することができます。

## マークアップ言語とMarkdown

マークアップ言語とは、主に[組版](https://ja.wikipedia.org/wiki/%E7%B5%84%E7%89%88)と呼ばれる、文書や画像を出版・印刷できる形式で出力するために用いられる言語です。組版自体はマークアップ言語が無くても行うことができます（代表的な組版ソフトウェアは[Adobe InDesign](https://ja.wikipedia.org/wiki/Adobe_InDesign)や[QuarkXPress](https://ja.wikipedia.org/wiki/QuarkXPress)）。これらの有料の組版ソフトはGUIを用いて組版を行うソフトウェアです。同様の機能をCUI、つまりテキストファイルで対応できるようにしたものがマークアップ言語です。マークアップ言語は通常無料で使用することができ、機能的には有料の組版ソフトと大きな差はありません。ただし、学習コストが比較的高めです。

代表的なマークアップ言語には、[Tex](https://ja.wikipedia.org/wiki/TeX)や[Markdown](https://ja.wikipedia.org/wiki/Markdown)があります。Texは昔から論文を書く際に用いられてきた言語で、専用のソフトウェアを用いることでTexファイルをPDF等に変換することができます。

一方でMarkdown は主にhtmlへの変換を目的として作られたマークアップ言語です。Markdownとhtmlの表記は対応しており、変換ツールを用いることでMarkdown のファイルからhtmlを簡単に作成することができます。Markdownの記法について以下の表1に示します。[Rmarkdownのcheatsheet](https://rstudio.github.io/cheatsheets/html/rmarkdown.html?_gl=1*yrxqrc*_ga*MzM5MDIyMTc2LjE3MjkzMjE1MTU.*_ga_2C0WZ1JHG0*MTcyOTMyMTUxNS4xLjAuMTcyOTMyMTUxNS4wLjAuMA..)や[Qiitaのチートシート](https://qiita.com/Qiita/items/c686397e4a0f4f11683d)も参考になります。

```{r, echo = FALSE}
pacman::p_load(tidyverse, readxl)
d <- read_excel("./data/chapter34_Rmarkdown.xlsx")
DT::datatable(d, caption="表1：Markdownの記法", rownames = NULL)
```


## R markdownの発展

Rは統計に用いる言語ですので、Texを用いた論文にRの統計結果を加えることは昔から重要とされていました。Rが用いられ始めてすぐに、RのスクリプトとTexを合わせることができるRの機能として、[Sweave](https://stat.ethz.ch/R-manual/R-devel/library/utils/doc/Sweave.pdf)がR Core Teamにより開発されました（[2002年頃](https://cran.r-project.org/doc/Rnews/Rnews_2002-3.pdf#page=28&zoom=100,73,74)のようです）。

また、このようなRでの流れとは独立に、HTMLを簡単な表記で作成するためのテキスト形式である[Markdown](https://daringfireball.net/projects/markdown/)（2004年）、MarkdownをHTMLやPDFに変換できるファイルコンバータとして[Pandoc](https://pandoc.org/)（2006年）が開発されました。

Rでの開発とは別に、PythonではRと同じような対話的実行システムである[IPython](https://ipython.readthedocs.io/en/stable/)（2001年）が開発され、更にPython、Rなどを対話的に実行・結果を表示しつつ、Markdownでの文書と同時に記載できるWebアプリケーションである[Jupyter notebook](https://jupyter.org/)（2014年頃）が開発されました。

上記のような流れの中で、RでLaTex、HTML、Markdownなどの文書とコードを作成し、それをRコードを実行した形でLatexやHTMLとして出力するためのライブラリである[knitr](https://yihui.org/knitr/)が開発されました（2012年頃）。このknitrをさらにPandocと統合し、Rコードから直接PDFやHTML、Microsoft Wordなどのフォーマットの文書を作成できるようにしたものが[R markdown](https://rmarkdown.rstudio.com/)（2016年頃）です。R markdownはすぐにRstudio（[2011年頃](https://posit.co/blog/rstudio-new-open-source-ide-for-r/)に開発）と統合され、RstudioからR markdown方式の文書を作成し、それをPDFやHTMLに変換できるようになりました。R markdownのExtensionsも整備され、例えば[Bookdown](https://bookdown.org/)（R Markdownで本を書くためのツール）が開発されたことでRでHTML形式の本を比較的簡単に作成することができるようになりました。また、[Revealjs](https://revealjs.com/)を
出力することでHTMLベースのプレゼンテーションを作成することもできるようになっています。R studioにはR markdownのVisual mode（Jupyter notebookと見た目が似た形式）も整備され、R markdownを利用することでJupyter notebook風にRを利用することもできます。

上記のようにRstudioとR markdownは共に発展してきましたが、2010年代には機械学習のライブラリがほとんどPythonで開発されるようになり、RよりもPythonの方がはるかに流行の言語となりました。このPythonユーザーを取り込むためだと思いますが、Rstudio（今は[Posit.io](https://posit.co/)という企業）はR markdownをPythonやJuliaなどの統計学・機械学習で用いられる言語でも使える形とし、Rstudioだけでなく、JupyterやテキストエディタであるVisual Studio Codeでも使えるものとした、[Quarto](https://quarto.org/)を開発し始めました（おそらく2022年頃）。QuartoがRユーザー以外に注目されているかはかなり疑問ですが、RユーザーとしてはR markdownの機能が単にアップグレードされただけですので、用いない理由はほとんどありません。

このテキストもR markdown、BookdownおよびQuartoを利用して作成しています。

以下ではR markdownについて説明していきますが、RstudioではQuartoもR markdownとほぼ同様に用いることができます。

## ファイルの作成

R markdownで作成するファイルの拡張子は`.rmd`、Quartoで作成するファイルの拡張子は`.qmd`です。Rstudioで.rmd、.qmdファイルを作成する場合、Rstudioの左上のアイコンから、「R markdown...」や「Quarto Document...」を選択します。

![R markdownのファイルを作成する](./image/Rmarkdown_newfile.png)

R markdownを選択すると、まず「New R Markdown」というウインドウが表示されます。ここでタイトル、著者、作成日、出力する形式（HTML、PDF、Word）を選択できます。このウインドウで設定していなくても後ほど設定することもできるため、すべてを入力しないといけない、ということはありません。

![R markdownの初期設定](./image/new_Rmarkdown.png)

R markdownファイルを作成すると、以下のようなR markdownの例が表示されます。この表記法はSourceと呼ばれる、すべてテキストで記載された形です。

![R markdownファイル：Sourceモード](./image/initial_Rmarkdown_source.png)

また、上の「Visual」を選択すると、Jupyter notebook風のVisualモードを利用することもできます。やや表示に時間がかかり、レスポンスが悪いため、通常はSourceモードを用いる方が使いやすいでしょう。

![R Markdownファイル：Visualモード](./image/initial_Rmarkdown_visual.png)

最終的には上のアイコンに含まれている「Knit」（毛糸を編む、ニット）の下矢印をクリックし、選択肢から出力したいファイル形式（HTML、PDF、Word）を選ぶことでRを実行した結果を表示した出力ファイルを得ることができます。

![R markdownをknitする](./image/knit_Rmarkdown.png)

## yamlとchunk

### yaml

上記の「New R Markdown」ウインドウで設定した内容は、文書の一番始め、`---`に挟まれた領域に記載されています。

```yaml
---
title: "Untitled"
author: "xjorv"
date: "2024-06-29"
output: html_document
---
```

この`---`に挟まれた領域には、[YAML](https://ja.wikipedia.org/wiki/YAML)と呼ばれるものが記載されています。YAML自体は名前とデータをコロン（`:`）でつないだだけのデータ形式です。R markdownではこのYAMLを読み込むことで、最終的な出力データに表記する情報・データの出力形式などを設定します。YAMLで設定できる主な要素は以下の表2の通りです。

```{r, echo = FALSE}
d <- read_excel("./data/chapter34_Rmarkdown.xlsx", sheet = 2)
knitr::kable(d, caption="表2：YAMLの指定")
```

YAMLの指定では、論理型として`true`/`false`という形で、小文字を用います。

### chunk

R markdown中では、Rのスクリプトは以下のように\`3つで囲まれた領域に書くことになります。このコードのかたまりのことを**chunk**と呼びます。

````markdown
`r ''````{r}
plot(cars)
```
````

```{r, echo=FALSE}
plot(cars)
```

.rmd（.qmd）ファイル中にchunkを書くと、knitするときにchunk内のスクリプトは実行され、上のように評価結果が出力ファイル上に表示されます。chunkに書かれている`{r}`はRのコードであるということを示しています。この`{r}`の部分には、chunkオプションというものを追加し、評価や表示の方法を指定することができます。chunkオプションのリストを以下の表に示します。

```{r, echo = FALSE}
d <- read_excel("./data/chapter34_Rmarkdown.xlsx", sheet = 3)
knitr::kable(d, caption="表3：chunk optionの一覧")
```

チャンクオプションは以下のように記載して用います。

````markdown
`r ''````{r, echo = FALSE, eval = FALSE}
plot(cars) # チャンクオプションはコンマで区切って記述する
```
````

## Quarto

Quartoは上記の通り、Rを使う上ではR markdownと大差ないものですが、ファイル名や使い方などが少しずつ異なります。Quartoを使用する場合、まずは[CLIをインストール](https://quarto.org/docs/get-started/)するとよいでしょう。

![Quarto CLIのインストール](./image/quarto_CLI_install.png)

Quartoの使い方はほぼR markdownと同じですが、CLIをインストールしているとTerminalからQmdファイルをknitできるようになります。また、chunk optionの表記法、YAMLの要素などが少しずつ異なります。詳しくは[公式のガイド](https://quarto.org/docs/guide/)や[日本語の教科書](https://www.jaysong.net/RBook/)[@宋財泫20200622]をご参照下さい。
