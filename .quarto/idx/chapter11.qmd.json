{"title":"ベクター","markdown":{"headingText":"ベクター","containsRefs":false,"markdown":"\n```{r, setup, include=FALSE, echo=FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE\n)\n```\n\n**ベクター（vector）**はRのクラスのうち、最も基本的なものです。R以外の言語では、要素が1つのクラスと、複数の要素を持つクラスは明確に区別されることが多いですが、Rでは、**要素が1つでも複数でも全てベクター**として取り扱います。ベクターでは繰り返し処理を用いることなく、すべての要素に対して演算を行うことができます。\n\nベクターには、\n\n-   **データ型が1つ**だけ\n-   データ型が異なる要素が入ると、**ベクター全体の型が変化**する\n-   演算には**反復（recycling）**が用いられる\n\nという特徴があります。\n\n## ベクターの作成と結合：cとappend\n\n要素が一つのベクターは関数などを特に用いることなく作成することができます。要素が複数のベクターは`c`関数（`c`はconbineの略）で作成することができます。`c`関数はベクター同士をつなぐのにも使えます。\n\n`append`関数もベクター同士を結合するのに使います。`append`関数では、ベクターを追加する位置を`after`引数で指定することができます。\n\n```{r, filename=\"c関数とappend関数でベクターを作成する\"}\n1 # 一つの数値はベクター\n\n\"moji\" # 一つの文字列もベクター\n\nx <- c(1, 2, 3) # c関数で複数の要素のベクターを作る\nc(x, 4) # c関数はベクター同士をつなぐのにも使える\n\nappend(x, 4) # append関数もベクターをつなぐのに使える\n\n# append関数では、ベクターの挿入場所を指定できる\nappend(c(1, 2, 3), \"added\", after=1) \n```\n\n## 連続する数値ベクターを作成する：コロン（:）、sep、seq\n\n連続する整数や、一定間隔の数列、繰り返しのあるベクターを作成する場合には、`:`（コロン）、`seq`関数、`rep`関数を用います。\n\n`:`（コロン）は連続する数値のベクターを作成する演算子で、コロンの前に置いた数値から、後に置いた数値まで公差1の、連続する数値のベクターを作成します。コロンの前後には、マイナスの数値を設定することもできます（例えば、`-1:-3`とすると、-1, -2, -3のベクターとなります）。この**コロンの演算は、他の演算子より前に実行**されます。\n\n`seq`関数は、第一引数（`from`）から第二引数（`to`）まで、`by`引数で指定した間隔で連続する数値のベクターを作成する関数です。また、`by`引数の代わりに、`length.out`引数を設定すると、`from`から`to`まで、`length.out`で指定した長さのベクターを作成することができます。\n\n`rep`関数は、第一引数にベクターを取り、第二引数に繰り返しの回数を取る関数です。`rep`関数の出力は、第一引数のベクターを第二引数の回数だけ繰り返したものになります。第二引数にはベクターを取ることもでき、ベクターで指定した回数だけ、要素を繰り返したベクターを作成することができます。\n\n```{r, filename=\"連続した数値ベクターを作成する\"}\n1:3 # 1から3までの整数のベクター\n\n-5:5 # -5から5までの整数のベクター\n\n-1:-10 # -1から-10までの整数のベクター\n\n-1:-10 * 5 # コロンの演算は掛け算より先に行われる\n\nseq(1, 5, by=0.5) # 1から5まで、0.5間隔のベクター\n\nseq(1, 5, length.out=11) # 1から5まで、等間隔の長さ11のベクター\n\nx # xは1、2、3のベクター\n\nrep(x, 5) # xを5回繰り返す\n\nrep(x, c(1, 2, 3)) # xの要素を1、2、3回繰り返す\n```\n\n## ベクターの型\n\nベクターの型は、ベクターに含まれる要素によって変化します。数値のベクターはnumeric、文字列が含まれるベクターはcharacter、因子であればfactor（factorはクラスで、型はnumeric）、論理型であればlogicalとなります。ベクターは1つの型からなる要素の集合ですので、別の型の要素が付け加えられると、元のベクター、もしくは付け加えられた要素の型が変化します。型の優先順位は**character \\> numeric \\> logical = factor**という順で、型が混じったベクターはより優先される型に自動的に変換されます。\n\nベクターは**atomic vector**と呼ばれることもあります。ベクターであることの確認には、`is.atomic`関数を用います。この関数は、引数がベクターであれば`TRUE`、ベクター以外であれば`FALSE`を返します。\n\n```{r, filename=\"ベクターの型・クラス\"}\nclass(c(x, 4)) # 数値ベクター（numeric）\n\nclass(c(x, \"added\")) # 文字列ベクター（character）\n\nclass(factor(x)) # 因子ベクター（factor）\n\nclass(c(T, F, T)) # 論理型ベクター（logical）\n\nclass(c(T, 1)) # logicalとnumericのベクターはnumeric\n\nclass(c(factor(\"dog\"), 1)) # factorとnumericのベクターはnumeric\n\nclass(c(T, factor(\"dog\"))) # logicalとfactorのベクターはnumeric（integer）\n\nclass(c(1, \"dog\")) # numericとcharacterのベクターはcharacter\n\n\nmode(c(x, 4)) \n\nmode(c(x, \"added\"))\n\nmode(factor(x)) # 因子はクラスで、型は数値型\n\nmode(c(T, F, T))\n\nis.atomic(1) # 長さ1のベクター\n\nis.atomic(c(1, 2)) # 長さ2以上のベクター\n\nis.atomic(list(1)) # リストはベクターではない\n```\n\n## 演算と反復（recycling）\n\nRのベクターでは、`for`文などの繰り返し文を用いることなく、すべての要素に対して演算を行うことができます。\n\n```{r, filename=\"ベクターの演算\"}\nx <- c(1, 2, 3)\nx + 1\nx - 1\nx * 3\nx / 2\nx %% 3\n```\n\nベクターの演算時には、**反復（recycling）**のルールが適用されます。長いベクターと短いベクターの演算で、反復のルールを確認してみましょう。\n\n```{r, filename=\"反復（recycling）\"}\ny <- c(2, 3, 4) # 長さ3のベクター\nx # 長さ3のベクター\ny\nx + y \nx - y\nx * y\nx / y\nz <- c(2, 2, 2, 2, 2, 2) # 長さ6のベクター\nx\nz\nx + z\nx - z\nx * z\nx / z\n```\n\n長さが同じベクターでは、ベクターのインデックスが一致するもの同士が演算されていることがわかります。例えば、`x`（`c(1, 2, 3)`）と`y`（`c(2, 3, 4)`）の足し算は、1+2、2+3、3+4の結果となります。\n\n一方で、長さが違うベクターを演算した場合には、短いベクターが**反復（recycling）**されます。`x`（`c(1, 2, 3)`）と`z`（`c(2, 2, 2, 2, 2, 2)`）の足し算では、前の3つのインデックスだけでなく、後ろの3つにも`x`の要素が足し算された結果が返ってきます（1+2, 2+2, 3+2, 1+2, 2+2, 3+2の結果が出力）。このように、短いベクターを繰り返して、長いベクターと同じ長さとし、結果を返すのが**反復（recycling）**のルールです。ベクターに数値を足し算するような場合にも、この反復と同じルールが適用されています。数値は長さ1のベクターですので、この長さ1のベクターを反復し、長さをあわせて計算した結果が返ってきていることになります。\n\n```{r, filename=\"反復の書き下し\"}\nc(1, 2, 3) + 1 # このような書き方は\nc(1, 2, 3) + c(1, 1, 1) # 自動的にこのような計算とされる\n```\n\nこのルールでは、**短いベクターの長さがもう一方のベクターの長さの約数でない場合、中途半端に反復される**ことになります。下の場合では、`c(1, 2)`が反復されて、`c(1, 2, 1)`として取り扱われています。このような場合には、Rは警告（warning）を出します。\n\n```{r, filename=\"長さが中途半端なベクターの演算\"}\nc(1, 2) + c(1, 2, 3)\n```\n\n## インデックス\n\nベクターの要素は**インデックス**を用いて取り出すことができます。インデックスはベクターの1つ目の要素が1、2つ目の要素が2、という形で設定されており、`[ ]`（角カッコ）の中にインデックスを指定することで要素を取り出すことができます。\n\nインデックスは整数のベクターの形でも指定できます。連続したインデックスを指定する際には、コロン（`:`）を用いて指定します。\n\n**インデックスをマイナスで指定すると、そのインデックスが指定する要素を削除**することができます。インデックスをマイナスのベクターで指定すると、そのマイナスで指定した位置の要素が削除されます。\n\nインデックスは数値だけでなく、**論理型（`TRUE`と`FALSE`）で指定**することもできます。`[ ]`の中に、`TRUE`（`T`）と`FALSE`（`F`）のベクターを与えると、`TRUE`のインデックスにある要素だけを取り出すことができます。この指定では、反復（recycling）が適用されるので、ベクターの長さより論理型ベクターの長さが短ければ、論理型ベクターが反復されて使用されます。論理型ベクターの方が長い場合には反復は行われず、論理型ベクターが余分に長い分だけ`NA`が返ってきます。\n\nインデックスを論理型ベクターで指定できるため、比較演算子を用いてベクターの要素を取り出すこともできます。例えば、`x[x > 5]`という形で比較演算子を用いてインデックスを指定すると、`x`のベクターのうち、5より大きい要素のみを取り出すことができます。\n\nベクターの一部を確認したいときには、`head`関数と`tail`関数を用います。`head`関数はベクターの始めから6つ目までを、`tail`関数はベクターの後ろから6つ目までを表示する関数です。どちらも第二引数に数値を入れると、その長さのベクターを取り出すことができます。\n\n```{r, filename=\"ベクターのインデックス\"}\nx <- 2:11\nx\n\nx[3] # 3つ目の要素を取り出す\n\nx[12] # 要素が無いとNAが返ってくる\n\nx[c(10, 5, 2)] # 10番目、5番目、2番目の要素を取り出す\n\nx[4:6] # 4番目から6番目までの要素を取り出す\n\nx[-4] # 4番目の要素を削除する\n\nx[-(5:8)] # 5番目から8番目までの要素を削除する\n\nx[-5:-8] # 上と同じ\n\nx[c(T, T, T, T, F, T, T, T, T, F)] # インデックスは論理型でもよい\n\nx[c(T, F)] # 反復（recycling）が適用され、2つ置きに要素を取り出すことになる\n\nx[c(T, T, T, T, F, T, T, T, T, F, T)] # 論理型の方が長いと、NAが返ってくる\n\nx == 5 # 論理型を比較演算子で作る\n\nx[x == 5] # 比較演算子を含む演算もインデックスに取れる\n\nx[x > 5]\n\nx[x > 3 & x < 6] # 3より大きく、かつ6より小さいものを選ぶ\n\nx %in% c(2, 7) # %in%は後ろの要素と一致する場合にTRUEを返す\n\nx[x %in% c(2, 7)] # 2と7である要素を取り出す\n\nhead(x) # 始めの6つを表示\n\ntail(x) # 最後の6つを表示\n```\n\n## インデックスの位置を特定する\n\nインデックスの位置を特定する場合には、`which`関数を用います。`which`関数は引数に論理型（もしくは比較・論理演算子）を取り、`TRUE`になる位置のインデックスを返す関数です。\n\n```{r, filename=\"which関数\"}\nx <- c(\"cat\", \"fat\", \"dog\", \"rat\", \"mat\")\nwhich(x == \"cat\") # catはインデックス1\n\nwhich(x == \"rat\") # ratはインデックス4\n```\n\n\n## ベクターの要素に名前を付ける\n\nベクターには**名前（`names`）**というアトリビュートがあります。`names`はベクターの要素に名前をつけるものです。`names`の要素が重複していても問題はないのですが、後に述べる呼び出しの際に間違いの原因となるため、あまりオススメはできません。\n\nベクターの要素は上記の通り、**インデックス**を用いて呼び出すことができます。しかし、**ベクターの要素はその名前からでも呼び出す**ことができます。呼び出すときには、角カッコ（`[ ]`）の中に、文字列で名前を示します。インデックスの代わりに名前の文字列を用いることで、名前に対応した要素を取り出すことができます。\n\nベクターの名前は、`c`関数を用いてベクターを作成するときに設定することができます。ベクターがすでに変数として準備されている場合には、`names`関数を用いて名前を設定することができます。この`names`関数の引数にベクターを取り、**`names`関数に名前を記載したベクターを代入する**形で名前を設定することができます。\n\nベクターの名前も`names`関数で確認することができます。ベクターでは、ドルマーク（`$`）を用いて名前から要素を取り出すことはできません。\n\nベクターの複数の要素に同じ名前を付けた場合には、インデックスが最も前の要素だけを名前で呼び出すことができます。同じ名前を付けた2つ目、3つ目の要素を名前を用いて呼び出すことはできません。\n\n```{r, error=TRUE, filename=\"ベクターの要素の名前\"}\nc(dog = 1, cat = 2, pig = 3) # 名前付きべクターをc関数で作る\n\nx <- c(1, 2, 3)\nnames(x) <- c(\"dog\", \"cat\", \"pig\") # ベクターに名前を設定する\nnames(x) # 名前が返ってくる\n\nx[\"cat\"] # 名前の文字列をインデックスにすることができる\n\nx$cat # 呼び出せない\n```\n\n:::{.callout-tip collapse=\"true\"}\n\n## 連想配列とベクター\n\nプログラミング言語には、**連想配列**（ハッシュやディクショナリなどとも呼ばれる）というデータ型を持つものがあります。連想配列では、文字列（記号）と値を結びつけておき、文字列をインデックスとして値を呼び出すことができるものです（例えば、banana=1、apple=2としておいて、bananaで呼び出すと1が返ってくる）。Rでは、ベクターにnamesが設定でき、名前を用いて要素を呼び出すことができるため、ベクターが連想配列の役割をこなすことができます。\n\n:::\n\n## ベクターの長さを調べる\n\nベクターは、名前以外に、**長さ（length）**を特性として持っています。ベクターの長さは、そのベクターの要素の数のことです。ベクターの長さは`length`関数で調べることができます。ベクターは1次元の構造を持つデータですので、dimension（次元）を持ちません。\n\n```{r, filename=\"ベクターの長さ\"}\nlength(x) # 要素が3つなので長さは3\n\ndim(x) # ベクターは次元（dimension）を持たない\n```\n\n## ベクターの並べ替え\n\nベクターの要素を順番に並べ替える場合には、`sort`関数を用います。`sort`関数はベクターを昇順に並べ替える関数ですが、`decreasing=TRUE`を指定すると降順に並べ替えることができます。ベクターを逆順に並べ替える場合には、`rev`関数を用います。\n\n```{r, filename=\"ベクターの並べ替え\"}\nx <- c(5, 3, 4, 2, 1)\n\n# 昇順に並べ替え\nsort(x)\n\n# 降順に並べ替え\nsort(x, decreasing=TRUE)\n\nrev(x) # 逆順\n```\n\n## 重複する要素を取り除く\n\nベクター内の重複する要素を取り除く場合には、`unique`関数を用います。\n\n```{r, filename=\"unique関数で重複を取り除く\"}\nx <- c(\"cat\", \"dog\", \"cat\", \"cat\")\nunique(x)\n```\n\n\n#### アトリビュート（attribute）を付ける\n\nRでは、ベクターに名前以外のアトリビュートをつけることもできます。アトリビュートをつけるとき、アトリビュートを呼び出すときには`attr`関数を用います。ただし、`names`以外のアトリビュートをベクターの要素の呼び出しに用いることはできません。\n\nベクターのアトリビュートを調べるときには、`str`関数を用いることもできます。`str`は「structure」の略で、様々なオブジェクトの構造を調べることができる便利な関数です。\n\n```{r, error=TRUE, filename=\"attributeの確認\"}\nattr(x, \"hoge\") <- c(\"rat\", \"hat\", \"mat\")\nx$hoge # 呼び出せない\n\nattr(x, \"hoge\") # 呼び出せる\n\nstr(x) # アトリビュートにhogeがあることを確認\n```\n\n:::{.callout-tip collapse=\"true\"}\n\n## アトリビュートの使い道\n\nベクターに`names`以外の`attribute`を設定しても特に利点はないため、アトリビュートの設定を行うことはほぼありません。`attribute`には、`names`の他にクラス名などが登録されます。\n\n:::\n\n## ランダムサンプリング\n\nRは統計の言語です。統計と確率は密接に関係しているため、統計の取り扱いにおいては、時に確率論的な現象を再現したい、という場合があります。確率論的な現象はランダムなものを取り扱うため、Rではベクターからランダムに要素を取り出す関数、`sample`関数が備わっています。\n\nこの`sample`関数では、第一引数にベクター、第二引数にベクターから要素を取り出す回数を指定します。このランダムな取り出しには、**復元抽出**（1つの要素を何度も取り出すことができる）と**非復元抽出**（1つの要素を一度取り出すと、再度取り出されることがない）があります。復元抽出と非復元抽出の指定には、`sample`関数の`replace`引数を用います。`replace`引数のデフォルトは`FALSE`で、`replace`を指定しない場合には非復元抽出が行われます。復元抽出を行う場合には、`replace`に`TRUE`を指定します。\n\n```{r, error=TRUE, filename=\"sample関数と復元・非復元抽出\"}\nsample(1:10, 5) # 1~10の整数から5つをランダムに取り出す\n\nsample(1:10, 5) # ランダムに取り出すので、上とは異なる結果となる\n\nsample(1:10, 5, replace=FALSE) # 非復元抽出\n\nsample(1:10, 15, replace=FALSE) # エラー（1度しか取り出せない）\n\nsample(1:10, 15, replace=TRUE) # 復元抽出ではエラーとならない\n```\n\n## ベクターを切り分ける：split\n\nベクターを同じ長さの因子で切り分けるのが、`split`関数です。`split`関数は2つの引数を取り、第一引数にはベクター、第二引数にはベクターと同じ長さの因子を取ります。因子の`levels`に従い、第一引数で指定したベクターを2つ以上のグループに切り分けます。`split`関数では、グループで切り分けたベクターがリストで返ってきます。\n\n```{r, filename=\"split関数\"}\nx <- rep(1:5, 5) # xは1~5を5回繰り返すベクター\ny <- factor(c(rep(1, 10), rep(2, 15))) # xを切り分けるための因子\n\nx\ny\n\nsplit(x, y) # リストが返ってくる\n```\n\n```{r, echo=FALSE}\nd <- data.frame(\n  func = c(\"head(x)\", \"tail(x)\", \"names(x)\", \"names(x) <- y\", \"length(x)\", \"attr(x, which)\", \"attr(x, which) <- y\", \"str(x)\", \"sample(x, size, replace)\", \"split(x, f)\", \"sort(x)\", \"sort(x, decreasing=TRUE)\", \"rev(x)\", \"unique(x)\"),\n  meaning = c(\"始めの6つの要素を返す\", \"最後の6つの要素を返す\", \"名前を表示する\", \"yを名前に設定する\", \"要素の数を返す\", \"attribute(which)を返す\", \"attribute(which)をyに設定する\", \"詳細な情報（構造、structure）を表示する\",  \"xからsizeの個数の要素をランダムに取り出す\", \"因子fに従ってベクターを分割する\", \"昇順に並べ替える\", \"降順に並べ替える\", \"逆順に並べ替える\", \"重複を取り除く\")\n)\n\ncolnames(d) <- c(\"関数名\", \"ベクターに適用される演算\")\nknitr::kable(d, caption=\"表1：ベクターに関する関数\")\n```\n\n## 集合としてのベクター\n\n統計では、集合を取り扱う場合があります。集合としてベクターを取り扱い、積集合や和集合を取り扱う関数がRには備わっています。\n\nベクターの要素のうち、重複したものを取り除く関数が`unique`関数です。`unique`関数はベクターを引数に取り、引数に含まれる重複した要素を1つだけ残して取り除きます。\n\n和集合と積集合を求める関数が`union`関数と`intersect`関数です。`union`関数も`intersect`関数も共に2つのベクターを引数に取り、`union`関数は和集合（ベクターが`x`と`y`の時、$x \\cup y$）、`intersect`関数は積集合（ベクターが`x`と`y`の時、$x \\cap y$）を返します。\n\n集合の差を示す関数が`setdiff`関数です。`setdiff`関数も2つのベクターを引数に取り、第一引数にあって第二引数に無い要素を返します。\n\n集合が同一とみなせるかどうか判断する関数が`setequal`関数です。2つのベクターを引数に取り、2つのベクターの要素が同一であれば`TRUE`、異なっていれば`FALSE`を返します。\n\n最後に、集合に関与する演算子である、`%in%`について説明します。`%in%`は前と後ろにベクターを取る演算子で、前のベクターにも後ろのベクターにもある要素（積集合の要素）には`TRUE`、前のベクターにはあり、後ろのベクターには無い要素には`FALSE`を返す関数です。\n\n```{r, echo=FALSE}\nd <- data.frame(\n  func = c(\"union(x, y)\", \"intersect(x, y)\", \"setdiff(x, y)\", \"setequal(x, y)\", \"x %in% y\"),\n  meaning = c(\"xとyの和集合\", \"xとyの積集合\", \"xにあってyに無い集合\", \"xとyが同一かどうかを評価\", \"xのうち、yにある要素はTRUEを返す\")\n)\n\ncolnames(d) <- c(\"関数名\", \"集合に適用する演算\")\nknitr::kable(d, caption=\"表2：集合に関する関数\")\n```\n\n```{r, filename=\"ベクターと集合の演算\"}\nx <- rep(1:5, 5)\n\nx\n\nunique(x)\n\nx <- 1:10\ny <- 7:16\n\nunion(x, y) # xとyの和集合\n\nintersect(x, y) # xとyの積集合\n\nsetdiff(x, y) # xにあってyに無いもの\n\nsetdiff(y, x) # yにあってxに無いもの\n\nsetequal(x, y) # xとyが同一かどうかを評価\n\nsetequal(x, 10:1) # 要素が同一なのでTRUE\n\nx %in% y # xのうち、yにあるものはTRUE\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"output-file":"chapter11.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","lightbox":"auto","bibliography":["references.bib"],"editor":"source","theme":{"light":"united","dark":"cyborg"},"toc-expand":2,"code-block-bg":true,"code-block-border-left":"#31BAE9"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}