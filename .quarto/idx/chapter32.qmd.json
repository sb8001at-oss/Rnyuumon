{"title":"地理空間情報","markdown":{"headingText":"地理空間情報","containsRefs":false,"markdown":"\n```{r, setup, include=FALSE, echo=FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE\n)\n\npacman::p_load(tidyverse)\n\nset.seed(0)\n```\n\n**地理空間情報**は、マップ、つまり地図情報とそれに紐づけられた特性や値（人口や面積など）からなるデータです。Rには、この地理空間情報を取り扱うためのライブラリが一通り備わっており、地理空間情報を地図上に表示したり、緯度・経度の位置情報から地理空間情報に変換し取り扱うことができます。\n\n## ベクタとラスタ\n\n地理空間情報は**ベクタ**と**ラスタ**の2つに大きく分けることができます。\n\n**ベクタ**とは、座標上で始点と終点が定まっており、その間を直線などで結ぶ形で構成される地理情報です。始点と終点の座標だけが定められているため、拡大・縮小しても線が滑らかなままであるという特徴があります。\n\n**ラスタ**とは、格子状に空間を分け、その格子ごとに値が設定されているようなデータを指します。空間を格子状に分けているため、拡大するとその格子のサイズによっては荒く見えることになります。デジタル写真などが典型的なラスタデータです。\n\n時と場合によりますが、地理空間上で区域がはっきり決まっているもの、例えば国や県、市町村などはベクタで、区域が決まっていないもの、例えば降雨量や人口密度などはラスタで取り扱うとよいかと思います。\n\nベクタは画像ソフトでの「ドロー系」（Adobe Illustratorなど）、ラスタは「ペイント系」（Adobe PhotoshopやWindows標準のペイントなど）に相当します。\n\nRで地理空間情報を取り扱う場合、ベクタもラスタも利用可能ですが、用いるライブラリは異なります。ベクタを取り扱う最も代表的なパッケージは[`sf`](https://r-spatial.github.io/sf/)パッケージ[@sf_bib1; @sf_bib2]です。ラスタを取り扱うパッケージはいくつかありますが、2023年現在では[`stars`](https://r-spatial.github.io/stars/)パッケージ[@stars_bib]か、[`terra`](https://rspatial.github.io/terra/)パッケージ[@terra_bib]を用いるのが一般的になっています。\n\n## sfパッケージ\n\n`sf`は「simple feature」の略で、地理空間をベクタで表記するISOの規格（[ISO 19125](http://www.iso.org/iso/catalogue_detail.htm?csnumber=40114)）を指します。このISO規格に従い地理空間情報を表現し、データフレームと同じような形で地理空間情報を取り扱えるようにしたライブラリが`sf`です。\n\n```{r, filename=\"sfの読み込み\"}\npacman::p_load(sf)\n```\n\n`sf`でのデータの例を以下に示します。`world`は[`spData`](https://cran.r-project.org/web/packages/spData/index.html)パッケージ[@spData_bib]によって提供されている`sf`クラスのデータで、各国家の面積、人口、平均寿命、一人当たりGDPと地理空間情報を結び付けたデータとなっています。\n\n`world`の中身を見ると、ほぼデータフレームと同じような表が表示されますが、追加で様々な情報が表示されています。データは177行11列のデータで、各行が各国の情報、列がその国のデータを表します。また、11列目は`geom`（geometryの略）という列になっており、MULTIPOLYGONという型である、という形で表示されています。この地理情報の列についての説明は後ほど行います。\n\n```{r, filename=\"sfの例：world\"}\npacman::p_load(spData)\n\nworld\n```\n\n`world`のクラスは`sf`及びデータフレーム（正確には`tibble`）で、各列には国名や短縮した国の記号などが記載されています。`sf`クラスはデータフレームでもあるため、おおむね通常のデータフレームと同じように取り扱うことができます。最後の列にある`geom`が地理空間情報で、`summary`関数の結果を見ると`epsg:4326`と記載されています。`epsg:4326`というのは**世界測地系（WGS84）**と呼ばれるものです。測地系については後ほど説明します。\n\n```{r, filename=\"sfデータのクラス\"}\nclass(world)\n\nsummary(world)\n```\n\n`sf`クラスのデータは`plot`関数（`plot.sf`）や`ggplot2`の`geom_sf`関数を用いることで地図として表示することができます。以下の例では、世界地図に一人当たりGDPの対数を色で示した地図（**コロプレス図、choropleth map**）を表示しています。\n\n```{r, filename=\"ggplot2でsfをプロットする\"}\nworld |> \n  ggplot() +\n  geom_sf(aes(fill = log(gdpPercap)))\n```\n\n### GeoJSONを取り扱う\n\n地理データの一部はインターネットで公開されており、ダウンロードして用いることができます。例えば[smartnews-smri/japan-topography](https://github.com/smartnews-smri/japan-topography)や、[国土数値情報ダウンロードサイト](https://nlftp.mlit.go.jp/)では、日本の地理情報を**[GeoJSON](https://ja.wikipedia.org/wiki/GeoJSON)**と呼ばれる形式で公開しています。GeoJSONとは、他言語ではよく用いられているデータの形式である**javascript object notation（json）**を使って地理空間情報を表現したものです。`sf`では、このGeoJSONを読み込み、`sf`オブジェクトに変換することができます。読み込みには`st_read`関数を用います。\n\n```{r, warning=FALSE, filename=\"geojsonをsfに変換する\"}\n# 上記のsmartnewsのgithubからGeoJSONをダウンロードする\nurl <- \"https://raw.githubusercontent.com/smartnews-smri/japan-topography/main/data/municipality/geojson/s0010/N03-21_210101.json\"\n\n# GeoJSONを読み込み、sfオブジェクトとする\nsfobj <- st_read(url)\n\nsummary(sfobj)\n```\n\n### 日本のGeoJSONデータの取得\n\n日本のGeoJSONデータを取り扱う場合には、[国土数値情報ダウンロードサイト（国土交通省）](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v3_1.html)からGeoJSONをダウンロードするのが最も正確でよいでしょう。このGeoJSONデータは日本測地系2011（JGD2011）と呼ばれる、日本の測地系での値が指定されています（JGD2011は世界測地系WGS84とほぼ同一です）。国土数値情報ダウンロードサイトからダウンロードした地理情報を用いた解析結果を公表する場合には、以下のような形で[出典を記載](https://nlftp.mlit.go.jp/ksj/other/agreement_01.html)する必要があります。\n\n出典：[「国土数値情報（行政区域データ）」（国土交通省）](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v3_1.html)を加工して作成\n\n```{r, filename=\"国土数値情報ダウンロードサイトからのデータを利用する\"}\n# あらかじめダウンロードしたGeoJSONファイルをst_read関数で読み込む\nNara_sfobj <- st_read(\"./data/N03-23_29_230101.geojson\")\nNara_sfobj\n\nplot(Nara_sfobj)\n```\n\n### sfオブジェクトの保存と読み込み\n\n上記のように、GeoJSONファイルは`st_read`関数で読み込み、`sf`オブジェクトに変換することができます。逆に、この`sf`オブジェクトをファイルとして保存する際には`st_write`関数を用います。`st_write`関数はファイル名の拡張子によりファイル形式を判別して保存してくれる、`ggplot2`における`ggsave`関数のような働きを持ちます。`sf`オブジェクトは通常`.shp`ファイルとして保存します。また、`st_write`関数はGeoJSONへの書き出しにも対応しています。Rや`sf`だけでなく、他の原語やライブラリを利用する際には、GeoJSONの方が取り扱いやすいでしょう。\n\n```{r, filename=\"sfオブジェクトのI/O\", eval=FALSE, error=TRUE, warning=FALSE, message=FALSE}\n# .shp（シェープファイル）で保存\nst_write(sfobj, \"./data/smartnews-smri_japan-topography.shp\",  layer_options = \"ENCODING=UTF-8\", append = FALSE)　\n\n# geojsonで保存\nst_write(sfobj, \"./data/smartnews-smri_japan-topography.geojson\",  layer_options = \"ENCODING=UTF-8\", append = FALSE)　\n\n# shpファイルの読み込み\njpsf <- st_read(\"./data/smartnews-smri_japan-topography.shp\")\njpsf\n\n# geojsonも読み込める\njpsf <- st_read(\"./data/smartnews-smri_japan-topography.geojson\")\n\n# urlからjsonを読み込むこともできる\nsfobj <- st_read(url)\n```\n\n### 他の地理情報データとの統合\n\n`sf`オブジェクトはデータフレームでもあるため、地理情報と関連付けられたデータがあれば、`sf`オブジェクトの列として登録し、データとして利用することができます。地理情報と関連されたデータを自分で集めるのは難しいですが、政府統計であれば[e-stat](https://www.e-stat.go.jp/)から簡単にダウンロードできます。\n\n以下の例では、2020年の国勢調査のデータをダウンロードし、上記の国土数値情報から作成した`sf`オブジェクトに国勢調査データの2020年人口を登録しています。e-statのデータを用いた解析結果を公表する場合には下のような[出典の記載](https://www.e-stat.go.jp/help/surveyitems/search-3-5)が必要です。\n\n出典：「政府統計の総合窓口(e-Stat)」、調査項目を調べる－国勢調査（総務省）「令和２年国勢調査 / 人口等基本集計」\n\ne-statのデータはそのデータの種類ごとにファイル形式や列名の記載方法が異なるため、Rではやや読み込みにくいです。\n\ne-statのデータを整理して読み込みます。読み込んだデータフレームと`sf`オブジェクトを結合させるためには、両方のオブジェクトに共通する列が必要となります。下の例では、`sf`オブジェクトに含まれる`N03_004`（市町村名）の列をデータフレーム側にも準備することで、市町村名を用いてデータを結合できるようにしています。\n\nデータフレームと`sf`オブジェクトの結合には、[16章](./chapter16.html)で説明した`dplyr`の`join`関数を用いるのが良いでしょう。この際に、`join`で結合する先を`sf`オブジェクトとすること、共通する列を`by=join_by(列名)`で指定することが重要となります。`sf`オブジェクト側ではなく、データフレーム側を結合先にしてしまうと`geometry`の列がなくなります。\n\n下の例では、`sf`オブジェクト（`Nara_sfobj`）を第一引数、データフレームを第二引数とし、`left_join`関数で結合することで、データフレームのデータを左側の`sf`オブジェクトに結合しています。\n\n```{r, messager=FALSE, warning=FALSE, filename=\"sfオブジェクトへのデータの登録\"}\nd <- read.csv(\"./data/FEH_00200521_240321113104.csv\", header = T, skip = 12) # 人口データを読み込み\n\n# 文字列となっている列を数値に変換\nd$`総数` <- d$`総数` |> str_remove_all(\",\") |> as.numeric()\nd$`男` <- d$`男` |> str_remove_all(\",\") |> as.numeric()\nd$`女` <- d$`女` |> str_remove_all(\",\") |> as.numeric()\nd <- d[, c(4, 6:8)]\n\n# 共通の列として、市町村名を設定（N03_004）\ncolnames(d) <- c(\"N03_004\", \"total_pop\", \"male_pop\", \"female_pop\") \n\n# left_join関数でデータをsfに結合\nNara_sfobj <- left_join(Nara_sfobj, d, by = join_by(N03_004)) # sfが前、結合するデータフレームが後\nNara_sfobj <- Nara_sfobj |> select(N03_001, N03_004, total_pop, male_pop, female_pop)\n\n# データ登録されたsfオブジェクト\nNara_sfobj\n```\n\n### geometryの種類と変換の方法\n\n`sf`における最も基本的なgeometryは以下の3種類です。\n\n* **POINT**：地図上の点\n* **LINESTRING**：地図上の線\n* **POLYGON**：地図上の平面\n\nそれぞれのgeometryにおいて、地図上の位置はX（経度（longitude））、Y（緯度（latitude））の2次元（XY）、Z（高度）を加えた3次元（XYZ）、M（データの精度や時間）を加えた3次元（XYM）、ZとMを加えた4次元のデータ（XYZM）のいずれかで指定されます。\n\nまた、複数のPOINT、LINESTRING、POLYGONをまとめたgeometryとして以下の3種類があります。\n\n* **MULTIPOINT**：地図上の複数の点\n* **MULTILINESTRING**：地図上の複数の線\n* **MULTIPOLYGON**：地図上の複数の平面\n\nまた、1つのgeometryではなく、別々のgeometry（POINTとPOLYGONなど）をまとめたものがGEOMETRYCOLLECTIONです。\n\nこの他にもCITCULARSTRINGやCOMPOUNDCURVE、CURVEPOLYGONなどの曲線を示すgeometryもありますが、とりあえず上の7つを理解しておけば`sf`の取り扱いには困らないでしょう。\n\n最も単純な3つのgeometryは`st_point`、`st_linestring`、`st_polygon`関数で作成することができます。`st_point`はX（経度）とY（緯度）のベクター、`st_linestring`、`st_polygon`は1列目にX（経度）、2列目にY（緯度）を設定した行列を引数とすることで作成することができます。\n\n```{r, filename=\"geometryの作成\"}\n# st_pointの引数はベクター\nst_point(c(135, 35), dim = \"XY\") \n\n# st_linestringの引数は行列\nst_linestring(rbind(c(135, 35), c(130, 30))) \n\n# st_polygonの引数は行列のリスト（平面が閉じていないとエラーになる）\nst_polygon(list(rbind(c(135, 35), c(135, 30), c(130, 30), c(130, 35), c(135, 35))))\n\n## 左からPOINT、LINESTRING、POLYGONをplotする\npar(mfrow = c(1, 3))\nst_point(c(135, 35), dim = \"XY\") |> plot()\nst_linestring(rbind(c(135, 35), c(130, 30))) |> plot()\nst_polygon(list(rbind(c(135, 35), c(135, 30), c(130, 30), c(130, 35), c(135, 35)))) |> plot()\n```\n\nMULTIPOINT、MULTILINESTRING、MULTIPOLYGONはそれぞれ`st_multipoint`、`st_multilinestring`、`st_multipolygon`関数で作成することができます。\n\n```{r, filename=\"geometryの作成:MULTI\"}\n# st_multipointの引数は行列\nst_multipoint(rbind(c(135, 35), c(130, 30))) \n\n# c関数でPOINTを結合してもMULTIPOINTを作成できる\nc(st_point(c(135, 35), dim = \"XY\"), st_point(c(130, 30), dim = \"XY\"))\n\n# st_multilinestringの引数は行列のリスト\nst_multilinestring(list(rbind(c(135, 35), c(130, 30)), rbind(c(130, 30), c(125, 20)))) \n\n# st_multipolygonの引数は行列のリストのリスト（平面が閉じていないとエラーとなる）\nst_multipolygon(\n  list(\n    list(rbind(c(135, 35), c(135, 30), c(130, 30), c(130, 35), c(135, 35))),\n    list(rbind(c(100, 50), c(100, 40), c(120, 40), c(120, 50), c(100, 50)))\n    )\n  )\n\n# MULTIPOINT、MULTISTRING、MULTIPOLYGONをプロットする\npar(mfrow = c(1, 3))\nst_multipoint(rbind(c(135, 35), c(130, 30))) |> plot()\nst_multilinestring(list(rbind(c(135, 35), c(130, 30)), rbind(c(130, 30), c(125, 20)))) |> plot()\nst_multipolygon(\n  list(\n    list(rbind(c(135, 35), c(135, 30), c(130, 30), c(130, 35), c(135, 35))),\n    list(rbind(c(100, 50), c(100, 40), c(120, 40), c(120, 50), c(100, 50)))\n    )\n  ) |> plot()\n```\n\n### geometryの編集\n\n`st_point`の返り値に足し算を行うことで、その点の位置を変更することができます。単に数値を足した場合にはXとYの両方に、要素が2つのベクターで足した場合にはインデックス`[1]`の要素がXに、インデックス`[2]`の要素がYに足されて位置を更新することになります。\n\n```{r, filename=\"POINTの移動\"}\nst_point(c(1, 1)) + 1 # 数値を足すことができる\n\nst_point(c(1, 1)) + c(1, 4) # ベクターで足すと要素ごとの足し算になる\n```\n\nまた、`sf`クラスのうち、`geometry`の列に関しては、掛け算することで拡大・縮小を行うこともできます。\n\n```{r, filename=\"geometryの拡大・縮小\"}\n# わかりにくいが、地域の中心を基準に0.85倍に縮小している\n((Nara_sfobj |> st_geometry() - st_centroid(Nara_sfobj |> st_geometry())) * 0.85 + st_centroid(Nara_sfobj |> st_geometry())) |> plot()\n```\n\n### geometryのクラス：sfg\n\n`st_point`や`st_polygon`で作成したgeometryは`sfg`クラスのオブジェクトとなります。`sfg`は`sf`パッケージで定義されているクラスで、`plot`関数の引数とすることで描画することができます。\n\n```{r, filename=\"sfgクラスとplot関数による描画\"}\nst_point(c(1, 1)) |> class() # sfgクラスのオブジェクト\n\nst_point(c(1, 1)) |> plot() # sfgクラスはplot関数で描画できる\n```\n\n### geometryのクラス：sfc\n\n`sfg`をいくつか合わせてひとまとまりのgeometryとしたものが`sfc`クラスのオブジェクトです。`sfc`は`st_sfc`関数に1個～複数の`sfg`クラスのオブジェクトを引数とすることで作成することができます。`sf`クラスのgeometryの列がこの`sfc`クラスです。\n\n```{r, filename=\"sfcクラス\"}\nst_point(c(1, 1)) |> st_sfc() |> class() # sfcクラスに変換\n\nst_point(c(1, 1)) |> st_sfc() |> st_sf() |> class() # sfクラスに変換\n```\n\n### sfオブジェクトの構造\n\n`sfc`クラスは`sfg`クラスのリストとして実装されており、`sfg`もリストですので、`sfc`は「リストのリスト」になっています。この`sfc`をさらに`st_sf`関数の引数とすると、`sf`クラスのオブジェクトとなります。`sf`クラスはデータフレーム、つまりリストですので、`sf`クラスは「リストのリストのリスト」になっています。`sf`、`sfc`、`sfg`オブジェクトは基本的にはすべてリストですので、二重カッコ（`[[]]`）で下位の要素（`sf`から`sfc`、`sfc`から`sfg`）を取り出すことができます。\n\nまた、`sf`オブジェクトから`geometry`だけを取り出す場合には、`st_geometry`関数を用います。`st_geometry`関数の返り値は`sfc`クラスのオブジェクトとなります。\n\n```{r, filename=\"sfオブジェクトの構造\"}\n# geometryを選択\nsfobj[[6]]\n\n# 2重リストは個別のgeometry\nsfobj[[6]][[1]] |> head()\n\n# 4重リストに緯度・経度の行列が保存されている\nsfobj[[6]][[1]][[1]][[1]] |> head() \n\nsfobj |> st_geometry() # geometryだけ取り出す（クラスはsfc）\n```\n\n\n```{r, filename=\"sfオブジェクトのクラス\"}\nsfobj[[6]] |> class() # sfcクラスのオブジェクト\n\nsfobj[[6]][[1]] |> class() # sfgクラスのオブジェクト\n```\n\n### sfオブジェクトを作成する\n\n緯度・経度のデータから`sf`オブジェクトを作成する場合には、上記の`st_point`、`st_linestring`、`st_polygon`を使うことになります。下の例では、都道府県の県庁所在地のデータを`sfc`オブジェクトに変換しています。\n\nデータフレームをMULTIPOINTの`sfg`に変換する場合には、まずデータフレームの列を経度・緯度の順に並べ替え、次に`as.matrix`関数で行列に変換します。この行列を`st_multipoint`関数の引数とすれば、MULTIPOINTの`sfg`を作成することができます。\n\nまた、この`sfg`を`st_sfc`関数の引数に取ることでMULTIPOINTの`sfc`オブジェクトを作成することができます。\n\nMULTIPOINTからPOINTの`sfg`を作成する場合には、`st_cast`関数を用います。`st_cast`関数はgeometryの変換を行うための関数です。`st_cast`の第二引数に`\"POINT\"`を指定することで、MULTIPOINTからPOINTへの変換を行うことができます。ただし、`st_cast`で変換すると、MULTIPOINTの一番初めの点のみがPOINTに変換され、残りのPOINTは削除されてしまいます。\n\n```{r, error=TRUE, filename=\"データからsfcを作成する\"}\n# 県庁所在地の緯度・経度\nd <- read.csv(\"./data/pref_lat_lon.csv\", header=T, fileEncoding = \"CP932\")\nhead(d) # latが緯度、lonが経度\n\n# sfgクラス（経度、緯度の順に並べ替えている）\nd[,c(3, 2)] |> \n  as.matrix() |> \n  st_multipoint() \n\n# sfcクラス（1つのMULTIPOINTとなる）\nd[,c(3, 2)] |> \n  as.matrix() |> \n  st_multipoint() |> \n  st_sfc() \n\n# sfcクラス（始めの1点だけになる\nd[,c(3, 2)] |> \n  as.matrix() |> \n  st_multipoint() |> \n  st_cast(\"POINT\") |> \n  st_sfc()\n```\n\nそもそも上の例では、各都道府県の県庁所在地の位置ですので、MULTIPOINTではなく、POINTの集合となっている`sfc`オブジェクトを作成したいところです。\n\nこのような変換には、`lapply`関数や`purrr::pmap`関数を用います。`lapply`の場合にはデータフレーム（リスト）を引数にして`st_point`関数を適用する形で、`purrr::pmap`関数では`st_point`の引数の位置を`.x`、`.y`で指定する形で設定します。\n\n```{r, error=TRUE, filename=\"lapply/purrr::pmapでsfcを作成\"}\n# applyではうまく計算できない（返り値がベクターだから）\napply(d[,c(3, 2)], 1, st_point) |> st_sfc() \n\n# lapplyを使うと複数のPOINTをsfcに変換できる\nd[,c(3, 2)] |> t() |> data.frame() |> lapply(st_point) |> st_sfc() \n\n# pmapを使うと複数のPOINTをsfcに変換できる\npurrr::pmap(d[,c(3, 2)], ~st_point(c(.x, .y))) |> st_sfc()\n```\n\n`sfc`を`lapply`関数や`purrr::pmap`関数を用いて作成した後、この作成した`sfc`を`st_sf`関数の引数とすることで、`sf`オブジェクトを作成することができます。`sf`オブジェクトはデータフレームと同じように取り扱うことができるので、この`sf`オブジェクトに情報を追加していく形でデータを整理することができます。\n\n```{r, error=TRUE, filename=\"sfcからsfに変換する\"}\n# sfcをsfに変換\nd1 <- pmap(d[,c(3, 2)], ~st_point(c(.x, .y))) |> st_sfc() |> st_sf()\n\n# sfにはデータフレームと同様に情報を追加することができる\nd1$pref <- d$pref_name\nd1$flag <- rep(c(0, 1), c(25, 22))\n\nd1 |>  ggplot() + geom_sf(aes(color = factor(flag)))\n```\n\n### WKT、WKB\n\n[well-known-text](https://ja.wikipedia.org/wiki/Well-known_text)（WKT）とwell-known-binary (WKB)は、`sf`で示されているgeometryをテキストやバイナリ（16進法の数値）で表す方法です。`sf`パッケージにはgeometryをWKT・WKBの形に変換する方法と、逆にWKTやWKBを`sf`オブジェクトとする方法を備えています。\n\n`sfg`をWKTに変換するための関数が`st_as_text`関数、`sfg`をWKBに変換するための関数が`st_as_binary`関数です。WKT、WKBのいずれも`st_as_sfc`関数の引数とすることで、`sfc`オブジェクトに変換することができます。\n\n```{r, filename=\"WKT、WKBの変換\"}\n# sfgをテキストに変換\nst_point(c(135, 35), dim=\"XY\") |> st_as_text() \n\n# テキストからsfcを作成\nst_point(c(135, 35), dim=\"XY\") |> st_as_text() |> st_as_sfc()\n\n# sfgをバイナリに変換\nst_point(c(135, 35), dim=\"XY\") |> st_as_binary() \n\n# バイナリからsfcを作成\nst_point(c(135, 35), dim=\"XY\") |> st_as_binary() |> st_as_sfc()\n```\n\n### sfcオブジェクトの演算\n\n`sfc`オブジェクトを用いると、その地形データから面積、重心、周辺の長さ、各点の距離などを計算することができます。\n\nPOLYGONの面積を計算する関数が`st_area`関数です。`st_area`関数はPOLYGONからなる`sfc`オブジェクトを引数に取り、そのPOLYGONで示される面積を返します。\n\n`st_area`関数の返り値は`units`クラスのオブジェクトになります。この`units`クラスは[`units`](https://r-quantities.github.io/units/)パッケージ[@units_bib]で設定されているクラスです。`units`パッケージは数値に単位を付けた`units`クラスと、その単位の変換に関する演算の方法を提供しています。\n\n```{r, filename=\"geometryの演算:st_area関数\"}\nst_area(Nara_sfobj$geometry) # 面積の計算（classはunits）\n\n# sfはデータフレームと同じように取り扱うことができる\n# sfの列に計算した面積を設定している\nNara_sfobj$area <- st_area(Nara_sfobj$geometry) |> as.numeric()\n\nNara_sfobj |> \n  ggplot()+\n  geom_sf(aes(fill = log(area)))\n```\n\ngeometryがPOINTである場合には、`st_distance`で各POINT間の距離行列を求めることができます（距離行列については[28章](./chapter28.html)を参照）。また、geometryがLINESTRINGである場合には、`st_length`でそのLINESTRINGの長さを計算することができます。POLIGON間の距離や、POINTの長さ、LINESTRINGの面積は求めることができない、つまりgeometryが関数の設定と異なると計算はできません。\n\n```{r, filename=\"geometryの演算2\"}\n# 距離行列（地理空間上の距離）、POINTのみ計算できる\nd1 |> st_distance() |> _[1:4, 1:4]\n\nd1[[1]] |> st_distance() |> _[1:4, 1:4] # stcでも計算できる\n\n# 地理空間上の距離、LINESTRINGのみ計算できる\nst_linestring(rbind(c(135, 35), c(130, 30))) |> st_length()\n\n# 地理空間上の面積、POLYGONのみ計算できる\nst_area(Nara_sfobj$geometry) |> head()\n```\n\n`st_centroid`はgeometryの重心を求める関数です。また、`st_point_on_surface`は重心ではなく、[POLYGON内にある中心に近い点](https://gis.stackexchange.com/questions/76498/how-is-st-pointonsurface-calculated)を求める関数です。コロプレス図のPOLYGON内にバブルチャートでデータを表示する場合には、`st_centroid`より`st_point_on_surface`の方が使いやすいでしょう。\n\nまた、同様の演算を`ggplot2`中で行うこともできます。`geom`関数内で`stat=\"st_coordinates\"`を引数に取ることで、`st_point_on_surface`に相当する演算を行うことができます。\n\n```{r, filename=\"重心を求める\"}\n# 重心を求める\nst_centroid(Nara_sfobj |> st_geometry())\n\n# 重心に近いPOLYGON中の点を求める\nst_point_on_surface(Nara_sfobj |> st_geometry())\n\n# ggplot2ではstat=\"sf_coordinates\"で計算できる（st_point_on_surfaceを利用）\nNara_sfobj |> \n  ggplot()+\n  geom_sf()+\n  geom_point(\n    aes(geometry = geometry, color = total_pop, size = total_pop), \n    stat=\"sf_coordinates\")\n```\n\n### 境界線の演算\n\nあるPOINTやLINESTRING、POLYGONから一定の距離にある、境界を演算するための関数が`st_buffer`関数です。`st_buffer`関数はそのPOINTやPOLYGONからの距離である`dist`を引数に取ります。`st_buffer`の返り値はPOLYGONになります。\n\n```{r, filename=\"st_buffer・st_simplify関数\"}\n# 135, 35からの距離が5の境界線（POLYGONが返ってくる）\nst_point(c(135, 35), dim=\"XY\") |> st_buffer(dist = 5) |> st_simplify(dTolerance = 0.5)\n\n# 点からの距離が5の円\nst_point(c(135, 35), dim=\"XY\") |> st_buffer(dist = 5) |> plot()\n```\n\n### geometryの単純化\n\n日本全体の市町村のPOLYGONを取り扱う場合、高解像度のPOLYGONを用いるとデータサイズがとても大きくなることがあります。例えば、上で紹介した[国土数値情報ダウンロードサイト（国土交通省）](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v3_1.html)からダウンロードできる日本全国のGeoJSONデータは427MBもあり、コロプレス図などにそのまま用いると演算に時間がかかります。このようなgeometryデータを簡素化し、データサイズを減らす関数が`st_simplify`関数です。簡素化の程度は`dTolerance`引数で指定します。\n\n```{r, filename=\"st_buffer・st_simplify関数\"}\n# st_simplifyでPOLYGONの解像度を下げる\nst_point(c(135, 35), dim=\"XY\") |> st_buffer(dist = 5) |> st_simplify(dTolerance = 0.5) |> plot()\n```\n\n### geometryの接触の判定\n\ngeometry同士が重なっている・接触しているかどうかを判別するための関数が`st_intersects`関数・`st_touches`関数です。`st_intersects`関数はgeometryが重なっている場合には`TRUE`、重なっていない場合には`FALSE`を返します。また、`st_touches`関数はgeometry同士が接触していれば`TRUE`を、接触していなければ`FALSE`を返します。\n\n```{r, filename=\"geometryの重なり・接触の評価\"}\nd1 <- st_polygon(list(rbind(c(135, 35), c(135, 25), c(130, 25), c(130, 35), c(135, 35))))\nd2 <- st_polygon(list(rbind(c(137.5, 32.5), c(137.5, 30), c(125, 30), c(125, 32.5), c(137.5, 32.5))))\nd3 <- st_polygon(list(rbind(c(135, 35), c(135, 25), c(140, 25), c(140, 35), c(135, 35))))\n\n# 上の3つのPOLYGONをプロットする\npar(mfrow = c(1, 2))\nst_sfc(d1, d2) %>% plot()\nst_sfc(d1, d3) %>% plot()\n\n# sfg間に重なりがあるかどうかを評価\nst_intersects(d1, d2, sparse = FALSE) \nst_intersects(d1, d3, sparse = FALSE)\n\n# sfg間に接触があるかどうかを評価\nst_touches(d1, d2, sparse = FALSE) \nst_touches(d1, d3, sparse = FALSE)\n```\n### geometry同士の差分\n\ngeometry同士の差分を取るための関数が`st_difference`関数です。`st_difference`関数は第一引数に指定したgeometryから、第二引数に指定したgeometryの部分を取り除きます。ですので、`st_difference(d1, d2)`では`d1`から`d2`の部分を除き、`st_difference(d2, d1)`では`d2`から`d1`の部分を除く形となっています。\n\n```{r, filename=\"geometryの差分\"}\n# d1は縦長、d2は横長で、d1からd2の部分を取り除く\nst_difference(d1, d2) %>% plot() \n\n# d2からd1の部分を取り除く\nst_difference(d2, d1) %>% plot()\n```\n\n### CRS（測地系）\n\n[**測地系**](https://ja.wikipedia.org/wiki/%E6%B8%AC%E5%9C%B0%E7%B3%BB)（CRS：Coordinate Reference System）は緯度・経度で地表上の座標を示すための系です。測地系が異なると同じ緯度・経度の点でも地表上の位置が異なります。現在ではWGS84（世界測地系）を用いるのが最も一般的です。日本の測地系としてはJPD2011（[測地成果2011](https://www.gsi.go.jp/sokuchikijun/datum-main.html)、東日本大震災後の地形変化を考慮した測地系）が用いられていますが、このJPD2011はWGS84とほぼ同じものとなっています。GeoJSONなどの地理データでは、使用した測地系が何であるか通常表記されていますので、正しい測地系が設定されているか確認し、異なっている場合には測地系を変更するとよいでしょう。\n\nデータの測地系を確認する場合には、`st_crs`関数を用います。`st_crs()<-`という形で測地系の名前を代入することにより、`sf`オブジェクトの測地系を変更することもできます。\n\n```{r, filename=\"測地系の表示\"}\nst_crs(Nara_sfobj) # JGD2011のデータ\nst_crs(Nara_sfobj) <- 4326 # WGS84に変更する（warningが出るが、変換される）\n```\n\n\n## ラスタデータの取り扱い：stars\n\n現在（2023年）ではRでのベクタの取り扱いにはほぼ`sf`が用いられていると思いますが、ラスタデータの取り扱いでは、[`terra`](https://rspatial.github.io/terra/)パッケージ[@terra_bib]と[`stars`](https://r-spatial.github.io/stars/)パッケージ[@stars_bib]が両方用いられています。\n\n`terra`は昔から用いられているラスタデータの取り扱いに関するライブラリである[`raster`](https://cran.r-project.org/web/packages/raster/index.html)パッケージ[@raster_bib]を更新したライブラリで、`sf`との連携が組み込まれています。\n\n`stars`は`sf`の開発者が作成したラスタデータの取り扱いに関数ライブラリです。`terra`と比べるとやや[ダウンロードされていないパッケージ](https://www.datasciencemeta.com/rpackages)ではありますが、ココでは`terra`ではなく`stars`について説明することとします。\n\n```{r, filename=\"starsパッケージのロード\"}\npacman::p_load(stars)\n```\n\nまずは、`stars`パッケージに登録されている、[ランドサット7号](https://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%89%E3%82%B5%E3%83%83%E3%83%887%E5%8F%B7)が撮影したブラジルの[Olinda](https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%AA%E3%83%B3%E3%83%80_(%E3%83%96%E3%83%A9%E3%82%B8%E3%83%AB))という都市の衛星画像を`stars`のオブジェクトとした`L7_ETMs`を示します。このデータは位置を表す`x`、`y`と、その位置における値を示す`band`からなるデータです。\n\n```{r, filename=\"starsオブジェクト\"}\nL7_ETMs # ランドサット7号の衛星写真データ\n\nL7_ETMs |> class() # クラスはstars_proxyとstars\n\ndim(L7_ETMs) # L7_ETMsはx、y、bandの3次元データ\n```\n\n`L7_ETMs`を呼び出すと、以下のように`x`、`y`、`band`に関する表が示されます。\n\n`x`、`y`で示される位置は、`from`の位置から`to`の位置まで`delta`の間隔で示されています。`x`は横（東西）方向の位置、`y`は縦（南北）方向の位置を意味します。`x`と`y`の`delta`の絶対値が同じですので、このラスタデータは正方形の位置データの集まりとなっています。`stars`のルールとして、`x`の`delta`はプラス、`y`の`delta`はマイナスで示します。\n\n`offset`は`from`に当たる位置の情報です。他のgeometryデータと共に利用する場合にはこの位置を参照して位置合わせを行うことになります。\n\n`refsys`は参照系、上で説明した測地系の情報です。このデータでは[SIRGAS 2000（EPSG:4674）](https://epsg.io/4674)という南米地域の測地系のデータになっています。\n\n`point`は位置情報が点であるか（`TRUE`）、面であるか（`FLASE`）を示しており、最後の`x/y`はその列が`x`（東西方向の位置）であるか、`y`（南北方向の位置）であるかを示しています。\n\n最後の行に示されている`band`は`L7_ETMs`に含まれているラスタデータの値を示すもので、1から6、つまり各位置に値が6つずつ存在することを示しています。`L7_ETMs`の場合では、光の波長ごとに撮影した6つの衛星写真となっています（詳しくは`?L7_ETMs`で確認してみて下さい）。\n\n`stars`の表の各列の意味を以下の表にまとめます。\n\n```{r, echo=FALSE}\nd <- data.frame(\n  field = c(\"from\", \"to\", \"offset\", \"delta\", \"refsys\", \"point\", \"values\"),\n  meaning = c(\"はじめのインデックス\", \"最後のインデックス\", \"インデックス1の位置\", \"ピクセルのサイズ\", \"測地系\", \"セルが点であるかどうか\", \"その他の値\")\n)\n\nknitr::kable(d, col.names = c(\"列名\", \"意味\"))\n```\n\n`stars`オブジェクトを`plot`関数の引数にすることで、`stars`オブジェクトが示すラスタデータをプロットすることができます。上に示した通り、`L7_ETMs`には6つの`band`データが含まれるため、それぞれの`band`に対する画像がプロットされます。\n\n```{r, filename=\"plot関数でラスタデータをプロットする\"}\nplot(L7_ETMs)\n```\n\n### GeoTIFFデータの読み込み\n\nラスタデータは衛星などからの写真・画像として得られることもあります。`stars`では、[GeoTIFF](https://ja.wikipedia.org/wiki/GeoTIFF)ファイル（地理情報を含むTIFFファイル）を読み込んで`stars`ファイルとすることができます。以下の例では、ライブラリのフォルダから`L7_ETMs`のGeoTIFF画像を`read_stars`関数で読み込んでいます。読み込んだデータのクラスは`stars`のみで、上で示した`stars_proxy`とは少し表示が異なります。`stars`はS3クラスで、中身はリストです。\n\n```{r, filename=\"tiff画像をstarsとして読み込む\"}\n# ライブラリのフォルダ内のファイルへのパスを取得\ntif <- system.file(\"tif/L7_ETMs.tif\", package = \"stars\") \n\n# 読み込み\nx <- read_stars(tif)\nx # GeoTIFFには測地系などの情報が付随している\n\nclass(x) # クラスはstars\n\nmode(x) # starsはリスト(S3オブジェクト)\n```\n\n### starsのデータ構造\n\n`stars`のリストの要素は3次元の`array`です。また、`stars`をデータフレームに変換すると、`x`と`y`、`band`の番号とその値からなる、4列のデータフレームになります。\n\n```{r, filename=\"starsの構造\"}\nclass(x[[1]]) # starsの要素はarray\n\ndim(x[[1]]) # 3次元アレイになっている\n\nas.data.frame(x) |> head() # データフレームに変換できる\n```\n\n### netCDFの読み込み\n\n[netCDF](https://ja.wikipedia.org/wiki/NetCDF)（Network Common Data Form）は、気象や海洋などのラスタデータを取り扱う際に広く用いられているバイナリ形式のファイルです。`read_stars`関数でこの`netCDF`をstarsオブジェクトとして読み込むことで、R上で取り扱うことができます。\n\n下の例では、[北米の降雨量・気温・時間をまとめたnetCDFデータ](https://gdo-dcp.ucllnl.org/downscaled_cmip_projections/dcpInterface.html#About)をライブラリのフォルダから`read_stars`関数で読み込み、`stars`オブジェクトとしています。`bcsd_obs_1999.nc`というファイルがnetCDFファイルで、拡張子には.ncが用いられます。読み込み時には登録されているデータの名前（`pr`：降雨量、`tas`：気温）が返ってきます。\n\n```{r}\n# pr（降水量）とtas（気温）があることが返ってくる\nw <- system.file(\"nc/bcsd_obs_1999.nc\", package = \"stars\") |>\n    read_stars()\n\n# prとtasはstars（S3、リスト）の要素\nw |> str(max.level = 1)\n\n# wは12時点のデータ\ndim(w)\n```\n\n### ggplot2でstarsオブジェクトをプロットする\n\n`stars`ライブラリには`ggplot2`で`stars`オブジェクトをプロットするための`geom`関数である`geom_stars`関数が備わっています。`geom_stars`関数内でデータを設定することで、自動的に`aes`の内容が決定されてプロットされる仕組みになっています。`ggplot2`のその他の関数（下の例では`facet_wrap`や`scale_fill_viridis`関数）は`ggplot2`と同様に利用することができます。\n\n```{r, filename=\"ggplo2でstarsオブジェクトからプロットを作成する\"}\npacman::p_load(viridis)\n\nggplot() +\n  geom_stars(data = w[1], alpha = 0.8) +\n  facet_wrap(~ time) +\n  scale_fill_viridis()\n```\n\n### starsクラスの構造\n\n`stars`クラスから特定の要素を抜き出す場合には、`split`関数を用います。`split`関数では、第一引数に`stars`オブジェクト、第二引数に抜き出す要素（`x`、`y`、`band`など）を文字列で指定します。`stars`オブジェクトに要素を追加する場合には`merge`関数を用います。\n\n```{r, filename=\"split関数で要素を取り出す\"}\nst_dimensions(x) # dimensionの情報を取り出す\n\nsplit(x, \"x\") |> head(5) # xの要素を取り出す\n\nsplit(x, \"y\") |> head(5)\n\nsplit(x, \"band\") |> head(5)\n```\n\n### sfでラスタデータを切り抜き（crop）する\n\n`sf`のベクタデータを利用して、`stars`のラスタデータを切り出すこともできます。ラスタデータの位置に対応した`sf`オブジェクト（正確には`sfc`オブジェクト）を準備し、`stars`オブジェクトのインデックスに`sf`オブジェクトを与えると、その`sfc`オブジェクトで指定した範囲のラスタデータのみが抽出されます。下の例では、`circle`はPOLIGONの`sfc`オブジェクトで、`x`が`stars`オブジェクトです。`x[circle]`という形で`stars`のインデックスに`sf`を指定することで、`stars`のラスタデータをクロップ（切り抜き）することができます。\n\n```{r, filename=\"sfでstarsオブジェクトを切り抜きする\"}\n# circleはPOLIGONのsfcオブジェクト\ncircle = st_sfc(st_buffer(st_point(c(293749.5, 9115745)), 400), crs = st_crs(x))\n\n# sfcで呼び出すと切り出し（crop）ができる\nplot(x[circle][, , , 1], reset = FALSE) # x[circle]でsfでのcropを行っている\npar(new = T)\nplot(circle, col = NA, border = 'red', add = TRUE, lwd = 2)\n```\n\n### starsオブジェクトの整形\n\n`stars`オブジェクトのデータの整形は、`dplyr`を用いて行うことができます。`stars`オブジェクトは`array`のリストであるため、`array`データの整形に関わるライブラリである[cubelyr](https://cran.r-project.org/web/packages/cubelyr/index.html)パッケージ[@cubelyr_bib]をロードしておいた方がよい場合もあります。\n\n```{r, filename=\"starsオブジェクトの整形\"}\nw # 上でロードした北米の降雨量・気温のラスタデータ\n\n# pacman::p_load(cubelyr) # なくてもよい\n\n# xの範囲を指定する（offset ～ offset + delta * (to - 1)の間を指定する必要がある）\nw |> filter(x > -80, x < -70)\n\n# リストの要素を追加する\nw |> mutate(pr_per_tas = pr / tas) # 降水量を気温で割った値を追加している\n\n# リストの要素を選択する\nw |> select(pr)\n```\n\n### starsオブジェクトを作成する\n\nラスタデータは`x`、`y`の位置とその位置に対応する値からなるデータです。このようなデータは行列があれば表現することができます。`stars`では行列から`st_as_stars`関数を用いて`stars`オブジェクトを作成することができます。ただし、この行列から`stars`を作成する場合には、行方向が`x`（東西）、列方向が`y`（南北）に相当するとされるため、行列が90度回転した形で`stars`に変換されます。\n\n```{r, filename=\"matrixからstarsを作成\"}\n# matrixからstarsオブジェクトを作成する\nma <- matrix(1:20, nrow = 4)\ndim(ma) = c(x = 4, y = 5) # 軸名をつける\nma <- st_as_stars(ma)\nma # starsオブジェクトの表示、値はattributeとなっている\n\n# dimでは位置情報の次元が返ってくる（転置しているので、縦長になる）\nma |> dim()\n\n# リストにはmatrixが登録されている\nma |> _[[1]] \n\n# 90度回転した結果が帰ってきている（行方向が1次元目、列方向が2次元目となるため）\nma |> image(text_values = TRUE) \n```\n\n### ラスタの形状の変更\n\n上記の`L7_ETMs`では、`x`、`y`の`delta`の絶対値が同じ値（28.5）であったため、ラスタの1点の形は正方形でした。一方で、`stars`ではラスタの形状を正方形だけでなく、長方形や平行四辺形のような、ゆがめた形（シアー、shear、ずれた形）を取ったり、ラスタデータを回転させることもできます。\n\nラスタの形状データはアトリビュートとして設定されており、attributes中の`affine`がシアーの設定となります。この`affine`にベクターを代入することでシアーの角度を調整することができます。また、`curvilinear`は曲面座標系の設定となります。\n\n```{r, filename=\"シアー・回転等の設定\"}\n# rasterの要素にグリッドの回転・シアー(shear)を設定する\n# affineが回転/シアー、curvilinearは曲線座標を示す\nst_dimensions(ma) |> str(list.len = 4)\n\nma1 <- ma\n\n# affineを変更することで、シアーの角度を設定する\nattr(attr(ma1, \"dimensions\"), \"raster\")$affine = c(0.1, 0.2)\nst_dimensions(ma1) |> str(list.len = 4)\n\nimage(ma1)\n```\n\n### sfをラスタに変換\n\n`sf`を`stars`に変換するのに用いる関数が、`st_rasterize`関数です。`sf`オブジェクトをそのままラスタにすると、列が自動的に選ばれてデータとして設定されます。`sf`では、インデックスに列名を指定すると、その列とgeometryだけが残った`sf`オブジェクトが得られます。この特徴を利用して、インデックス指定した`sf`を`st_rasterize`の引数とするとよいでしょう。また、`x`、`y`の`delta`はそれぞれ`dx`、`dy`引数で設定することができます。\n\n```{r, filename=\"sfをラスタに変換\"}\n# sfをラスタ化する\nst_rasterize(Nara_sfobj, dx = 0.01, dy = 0.01)\n\n# male_popの列だけ選んでラスタ化する\nst_rasterize(Nara_sfobj[\"male_pop\"], dx = 0.01, dy = 0.01) |> plot()\n```\n\n### starsオブジェクトをsfに変換\n\n#### contour（等高線）への変換\n\n`stars`オブジェクトを`sf`に変換する方法はいくつかあります。まず紹介するのは、`st_contour`関数を用いて、等高線を示すLINESTRINGに変換する方法です。`contour_lines`引数にはLINESTRINGを返すかどうか（`FALSE`ならPOLIGONが返ってきます）、`breaks`引数には等高線の間隔を指定します。\n\n```{r, filename=\"starsを等高線のLINESTRINGに変換\"}\n# 等高線のLINESTRINGに変換\nst_contour(ma, contour_lines = TRUE, breaks = 1:20) |> plot()\n```\n\n#### POINT、POLYGONへの変換\n\nstarsオブジェクトをPOINTやPOLYGONに変換する場合には、`st_as_sf`関数を用います。`as_point`引数に`TRUE`を指定した場合にはPOINTの`sf`が、`FALSE`を指定した場合にはPOLYGONの`sf`が返ってきます。\n\n```{r, filename=\"starsをPOINT・POLYGONのsfに変換\"}\nst_as_sf(ma, as_points = TRUE) |> plot() # POINTSに変換\n\nst_as_sf(ma, as_points = FALSE) |> plot() # POLYGONに変換\n```\n\n## インタラクティブなマップの表示\n\n上述のように、`sf`でも`stars`でも、オブジェクトを`plot`関数の引数に取ることで地図を描画することができます。また、`ggplot2`にも`sf`や`stars`オブジェクトを表示するための手法が存在します。一方で地図データでは比較的大きい面積を占める地理空間と、狭い面積を占める空間（参考：[面積が大きい・小さい市町村](https://www.gsi.go.jp/common/000077945.pdf)）があり、どうしても狭い面積を占める空間は見にくくなってしまいます。この問題は、`plot`や`ggplot2`のグラフが静的であることが原因で起こります。\n\n地理情報を表示する場合には、静的な図ではなく、例えばgoogle mapのように、地図を拡大・縮小して確認できた方が情報を利用しやすく、理解しやすくなります。このような拡大・縮小に対応した、インタラクティブな地図を書くライブラリがRにはいくつも備わっています。インタラクティブな地図を描画するライブラリの代表的なものが、[`tmap`](https://r-tmap.github.io/tmap/)パッケージ[@tmap_bib]と[`leaflet`](https://rstudio.github.io/leaflet/)パッケージ[@leaflet_bib]です。\n\n`tmap`は`ggplot2`風に用いることができる、比較的簡単に静的・インタラクティブな地図を描画するパッケージです、一方で`leaflet`はより本格的にインタラクティブな地図を描画することができるパッケージです。以下では、まず`tmap`について紹介し、その後`leaflet`について紹介します。\n\n### tmapパッケージ\n\n`tmap`パッケージは、設定により静的・インタラクティブな地図の描画を切り替えることができる、ggplot2-likeな地図描画ライブラリです。\n\n`tmap`パッケージで地図を描画するときには、まず`sf`オブジェクトを`tm_shape`関数の引数に取ります。`ggplot2`での`ggplot`関数と同様に、`tm_shape`関数だけでは地図を描画することはできず、この関数に`+`で他の関数をつないでいくことで地図を描画することができます。たとえば、POLYGONの中身を埋め、境界線を表示した地図を描画する場合には、以下のように`tm_polygons`関数を`+`でつなぎます。\n\n```{r, filename=\"tmapで地図を描画する\"}\npacman::p_load(tmap)\n\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons()\n```\n\n同様に、POLYGONの境界線を描画する場合には、`tm_borders`関数を`+`でつなぎます。\n\n```{r, filename=\"境界線を描画する：tm_borders関数\"}\nNara_sfobj |> \n  tm_shape() +\n  tm_borders()\n```\n\nまた、境界線を描画することなくPOLYGONを埋めるように描画する場合には`tm_fill`を用います。`tm_fill`と`tm_borders`を同時に描画しているのが`tm_polygons`になります。\n\n```{r}\nNara_sfobj |> \n  tm_shape() +\n  tm_fill()\n```\n\n### コロプレス図を描画する\n\nコロプレス図を描画する場合には、`tm_polygons`関数の`col`引数に、描画したい値を文字列で指定します。凡例（legend）や色は自動的に作成され、表示されます。\n\n```{r, filename=\"コロプレス図を描画する\"}\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons(col = \"total_pop\")\n```\n\n#### 静的マップとインタラクティブマップ\n\nここまでは`tmap`で描画されているのは静的な、拡大・縮小などができないマップでした。`tmap`では、静的なマップ・インタラクティブなマップを表示するモードを`tmap_mode`関数で変更できます。`tmap_mode(\"view\")`と指定すると、インタラクティブなマップが、`tmap_mode(\"plot\")`と指定すると静的なマップが表示されるようになります。モードの設定を行っていないときは静的なマップが表示されます。インタラクティブな地図の表示には、後ほど説明する`leaflet`パッケージでも利用されている、Javascriptの地図表示ライブラリである[leaflet](https://leafletjs.com/)が使用されています。\n\n```{r, filename=\"viewモードでインタラクティブな地図を表示\"}\ntmap_mode(\"view\")\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons(col = \"total_pop\")\n```\n\n```{r, filename=\"plotモードで静的な地図を表示\"}\ntmap_mode(\"plot\")\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons(col = \"total_pop\")\n```\n\n### legendの表示\n\nlegend（凡例）の表示方法を変える場合には、`tm_legend`関数を用います。`tm_legend`関数には凡例の表示を変えるためだけでなく、地図のタイトルや位置、色等を変更するための引数を指定することができます。legendの表示をしない場合には、引数に`show=FALSE`を指定します。\n\n```{r, filename=\"凡例（legend）などの編集\"}\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons(col = \"total_pop\") +\n  tm_legend(show = FALSE) # viewモードではshow=FALSEは機能しない\n```\n\n### バブルチャートの作成\n\n地図上に値を点のサイズ・色で表現したい場合には、`tm_symbols`関数を用います。`col`引数に`sf`の列を文字列で指定すると点の色が、`size`に指定すると点のサイズがその列の値に従い変更されます。`scale`は点のサイズを調整する引数です。\n\n```{r, filename=\"バブルチャートを描画する\"}\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons() +\n  tm_symbols(col = \"total_pop\", size = \"total_pop\", scale = 3) +\n  tm_legend(show = FALSE)\n```\n\n### faceting\n\n`ggplot2`と同様に、`tmap`でもfacetingにより複数のマップを簡単に並べて表示することができます。`tmap`ではfacetingの関数として`tm_facets`を用います。`tm_facets`では`by`引数に文字列で`sf`の列を取ることで、その列のラベルに従いグラフが分割されます。\n\n```{r, filename=\"faceting\"}\n# 奈良の市町村を北・南で2分割する\nNara_sfobj$ns <- rep(c(\"North\", \"South\"), c(30, 12)) \nNara_sfobj$ns[7] <- \"South\"\n\n# tm_facetsで北部・南部を別のマップとして描画する\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons() +\n  tm_symbols(col = \"total_pop\", size = \"total_pop\", scale = 3) +\n  tm_legend(show = FALSE)+\n  tm_facets(by = \"ns\")\n```\n\n### 地図を並べる：tmap_arrange\n\nfacetingを用いるのではなく、複数作成した`tmap`の地図を並べて表示することもできます。地図を並べて表示する場合には、`tmap`のオブジェクトを変数に代入し、その変数を`tmap_arrange`関数の引数に取ります。並べ方は`ncol`、`nrow`などの引数で、グラフのサイズは`width`、`heights`などの引数で指定することができます。\n\n```{r, filename=\"地図を並べて表示する\"}\n# tmapのオブジェクトを準備する\nmap_north <- Nara_sfobj |> \n  filter(ns == \"North\") |> \n  tm_shape() +\n  tm_polygons()\n\nmap_south <- Nara_sfobj |> \n  filter(ns == \"South\") |> \n  tm_shape() +\n  tm_polygons()\n\n# 北側と南側の地図を左右に並べて表示する\ntmap_arrange(map_north, map_south)\n```\n\n### その他の設定\n\n`tmap`にはたくさんの関数・引数が設定されており、うまく用いることで地図の表示を様々にカスタマイズすることができます。以下の例では`tm_layout`関数の`bg.color`引数に色を指定することで、背景色を青色にしています。また、`stars`のラスタデータを描画する場合には`tm_raster`関数を用います。\n\n```{r, filename=\"背景色を変更する\"}\nNara_sfobj |> \n  tm_shape() +\n  tm_polygons(col = \"total_pop\") +\n  tm_layout(bg.color = \"blue\") +\n  tm_legend(show = FALSE)\n```\n\n```{r, filename=\"starsを表示する\"}\n# sfをラスタに変換\nNara_raster <- st_rasterize(Nara_sfobj[\"male_pop\"], dx = 0.01, dy = 0.01)\n\n# ラスタを表示する\nNara_raster |> \n  tm_shape() +\n  tm_raster() +\n  tm_legend(show = FALSE)\n```\n\n### tmapオブジェクトを保存する\n\n`ggplot2`における`ggsave`のように、`tmap`にはマップを保存するための関数である`tmap_save`関数があります。`tmap_save`関数では`tmap`のオブジェクトと`filename`を引数として指定します。`filename`の拡張子に従い保存する形式を変更することができ、`.png`や`.jpg`などを用いれば画像で、`.html`を指定すればインタラクティブなJavascriptのマップとして保存することができます。\n\n```{r, eval=FALSE, filename=\"tmapを保存する\"}\ntmap_save(map_north, filename = \"naramap_north.png\")\n\ntmap_save(map_north, filename = \"naramap_north.html\")\n```\n\n## leafletパッケージ\n\nインタラクティブなマップを作成したい場合には、`tmap`でも紹介したJavascriptのライブラリであるleafletをRで用いることができるようにした、`leaflet`パッケージを用いるのが最もよいでしょう。`tmap`は（部分的に）`leaflet`パッケージのwrapperとなっていて、`tmap`でインタラクティブなマップを書くこともできますが、`leaflet`パッケージでは細かく引数を設定することで、より思い通りのマップを作成することができます。\n\n```{r, filename=\"leafletを読み込む\"}\npacman::p_load(leaflet)\n```\n\n### 基本のマップ\n\n`leaflet`は`ggplot2`や`tmap`のように`+`でつなぐタイプのグラフィックライブラリではなく、`plotly`に近い、パイプ演算子で繋いでいくタイプのライブラリです。`leaflet`パッケージでのマップ作製は、まず`sf`オブジェクトを`leaflet`関数の引数とするところからスタートします。次に、パイプ演算子で`addTiles`関数を繋ぎます。この形で引数を取らずに実行すると、世界地図が示されます。\n\n```{r, filename=\"leafletの基本：leafletとaddTiles\"}\nNara_sfobj |> \n  leaflet() |> \n  addTiles()\n```\n\n### setView関数\n\nこのままではズームが引きすぎですし、日本を中心とした形にもなっていません。デフォルトで表示する位置を表示するための関数が`setView`関数です。`setView`関数は、経度・緯度を引数に取り、その位置を中心としたマップを描画するための関数です。`zoom`引数に数値を設定することで、拡大した地図をデフォルトで表示することもできます。\n\n```{r, filename=\"setView関数で位置を調整する\"}\nNara_sfobj |> \n  leaflet() |> \n  addTiles() |> \n  setView(137.5, 37.5, zoom = 4)\n```\n\n### POLYGONを描画する\n\nここまでは`sf`オブジェクトの内容は何も表示されていません。`sf`に設定されているPOLYGONを描画するときには、`addPolygons`関数を用います。`addPolygons`関数をパイプ演算子でつなぐと、`sf`オブジェクトに設定されている`geometry`に従いマップが表示されます。しかし、今まで表示されていたマップの表示がなくなり、POLYGONだけが表示されるようになります。\n\n```{r, filename=\"addPolygonsでPOLYGONを表示する\"}\nNara_sfobj |> \n  leaflet() |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons()\n```\n\n### 背景のマップを描画する\n\n背景のマップを表示する場合には、`addProviderTiles`関数を追加します。`addProviderTiles`では引数でどのようなマップを表示するかを選択します。マップの種類は、[leafletのプレビュー](https://leaflet-extras.github.io/leaflet-providers/preview/)を参考に選びましょう。以下の例では、`\"OpenstreetMap.Mapnik\"`（地名がその地域の原語に従い表示されるOpenstreetMap）を選択しています。\n\n```{r, filename=\"背景のマップをaddProviderTilesで設定する\"}\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons()\n```\n\n### POLYGONの表示を整える\n\nPOLYGONと背景のマップは描画されましたが、どうもPOLYGONの周辺の線が太く、見にくいです。この線の太さや色は`addPolygons`の引数である`weight`や`color`を設定することで変更できます。`weight=1`とするとちょうどよい感じの線の太さになります。\n\n```{r, filename=\"境界の線の表示を変更する\"}\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons(weight = 1, color = \"blue\")\n```\n\n### POLYGONの中身の色を変更する\n\nコロプレス図を作成するためには、POLYGONの中の色が値に従って変化する必要があります。コロプレス図を描画するためには、`addPolygons`関数の`fillcolor`引数を指定します。この`fillcolor`の設定がやや複雑で、まずは色を指定するルールに関する関数を設定する必要があります。\n\n色を指定する関数には、`colorNumeric`、`colorBin`、`colorQuantile`、`colorFactor`の4つがあります。`colorNumeric`は数値をそのまま色に変換し、`colorBin`と`colorQuantile`は数値を指定した値の間隔、もしくは分位値に従って色分けし、`colorFactor`は因子に色を付ける関数です。下の例では、`colorQuantile`を用いて、`domain`に人口の対数（`log(Nara_sfobj$total_pop)`）を取ります。また、`n=5`を指定することで、人口を分位値で5カテゴリーに分けています。第一引数は色の指定で、赤（`\"Reds\"`）で値の変化を示すように設定しています。色指定については[Rの色見本](https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf)を参考に指定します。\n\n`fillcolor`引数では、チルダ（`~`）を用いて上の色指定関数（下の例では`pal`）を、コロプレス図に記載したいデータを引数として指定します。下の例では`log(total_pop)`を指定し、人口の対数をコロプレス図として示しています。\n\n```{r, filename=\"コロプレス図としてPOLYGONに色を指定する\"}\n# 色指定のための関数\npal <- colorQuantile(\"Reds\", domain = log(Nara_sfobj$total_pop), n = 5)\n\n# fillcolor引数に色指定関数を設定し、コロプレス図とする\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons(weight = 1, color = \"blue\", fillColor = ~ pal(log(total_pop)))\n```\n\n### fillcolorの調整\n\n上の例では、全体的にコロプレス図の色が薄く、コントラストがよくありません。少し透明度が高すぎるようです。`addpolygons`関数で色の透明度を指定する場合には、`fillopacity`引数に値を指定します。`fillopacity`のデフォルト値は`0.2`でかなり小さめですので、もう少し大きな値を指定し、透明度を低めにします。透明度を低めに設定することで、コロプレス図のコントラストがはっきりし、分かりやすい図になります。\n\n```{r, filename=\"fillopacity引数で透明度を調整する\"}\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons(\n    weight = 1, \n    color = \"blue\", \n    fillColor = ~ pal(log(total_pop)),\n    fillOpacity = 0.7)\n```\n\n### マウスで選択した位置をハイライトする\n\n`leaflet`では、インタラクティブなマップの表現として、拡大・縮小だけでなく、マウスで選択した位置をハイライトし、選択している位置を分かりやすくすることができます。このハイライトの設定を行う引数が`highlightOptions`です。`highlightoptions`引数には`highlightoptions`関数を指定し、この`highlightoptions`関数内でハイライトされたときの線の太さ（`weight`）、色（`color`）、透明度（`fillopacity`）、前面に表示するかどうか（`bringToFront`）等を指定します。\n\n```{r, filename=\"マウスで選択した位置をハイライト\"}\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons(\n    weight = 1, \n    color = \"blue\", \n    fillColor = ~ pal(log(total_pop)),\n    fillOpacity = 0.7,\n    \n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"red\",\n      fillOpacity = 0.3,\n      bringToFront = TRUE))\n```\n\n### マウスで選択した位置にテキストを表示する\n\n同様に、マウスで選択した位置にテキストでその位置の情報を表示することもできます。表示するテキストの準備には`addPolygons`関数の`label`引数を用います。`label`引数には、`sf`オブジェクトの各列に対応する、表示したい文字列を設定します。\n\nまた、`addPolygons`関数の`labelOptions`引数を指定することで、表示する文字列の細かな設定を行うことができます。以下の例では、フォントのサイズやウエイト、空白スペースのサイズ、文字列が表示される位置を指定しています。\n\n```{r, filename=\"マウスで選択した位置にテキストを表示\"}\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons(\n    weight = 1, \n    color = \"blue\", \n    fillColor = ~ pal(log(total_pop)),\n    fillOpacity = 0.7,\n    \n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"red\",\n      fillOpacity = 0.3,\n      bringToFront = TRUE),\n      \n    label = paste(Nara_sfobj$N03_004, \":\", (Nara_sfobj$total_pop / 10000) |> round(1), \"万人\"),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\"))\n```\n\n### 凡例の表示\n\nさらに凡例を追加する場合には、`addPolygons`関数内で`addLegend`関数を指定します。`addLegend`関数には、`addPolygons`関数にも用いた色指定の関数（以下の例では`pal`）、数値（`values`）、透明度、位置等を`addLegend`関数の引数に指定することで、`addPolygons`関数で指定した色に対応した凡例を追加することができます。\n\n```{r, filename=\"凡例の表示\"}\nNara_sfobj |> \n  leaflet() |> \n  addProviderTiles(\"OpenStreetMap.Mapnik\") |> \n  setView(136, 34.25, zoom = 8) |> \n  addPolygons(\n    weight = 1, \n    color = \"blue\", \n    fillColor = ~ pal(log(total_pop)),\n    fillOpacity = 0.7,\n    \n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"red\",\n      fillOpacity = 0.3,\n      bringToFront = TRUE),\n      \n    label = paste(Nara_sfobj$N03_004, \":\", (Nara_sfobj$total_pop / 10000) |> round(1), \"万人\"),\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |> \n    \n    addLegend(pal = pal, values = ~log(total_pop), opacity = 0.7, title = NULL,\n      position = \"bottomright\")\n```\n\n`leaflet`には上記の他にも無数の関数が設定されており、駆使することで色々なグラフを作成することができます。`leaflet`の日本語の資料はあまりありませんが（日本語では[このページ](https://kazutan.github.io/JapanR2015/leaflet_d.html)が一番詳しいと思います）、[`leaflet`のreference](https://rstudio.github.io/leaflet/reference/index.html)を読み解きながら作図すれば、思い通りの地図を作成することができます。\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"output-file":"chapter32.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","lightbox":"auto","bibliography":["references.bib"],"editor":"source","theme":{"light":"united","dark":"cyborg"},"toc-expand":2,"code-block-bg":true,"code-block-border-left":"#31BAE9"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}