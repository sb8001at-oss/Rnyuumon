{"title":"教師なし学習","markdown":{"headingText":"教師なし学習","containsRefs":false,"markdown":"\n**教師なし学習**は、データの特徴を捉えるためにデータを変換したり、群に分ける方法の総称です。教師なし学習の特徴は、以前に取ったデータと新しく取得したデータを分けて用いる教師あり学習とは異なり、すべてのデータを一度に用いて学習を行うことです。教師なし学習には、以下の図1のように、データをグループに分ける**クラスタリング**と、多次元のデータを理解しやすいように変換する**次元圧縮**の2つが含まれます。\n\n![](./image/classification_category2.png)\n\n```{r, setup, include=FALSE, echo=FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE\n)\n\npacman::p_load(tidyverse)\n```\n\n## クラスタリング\n\n**クラスタリング**とは、1つの要素にたくさんのデータが付随している、多次元データを用いて、要素間が互いに似ているかどうかを判断し、互いに似ているもの同士を一つのグループにまとめる方法です。類似した要素のまとまりを見つけるときに用いられます。\n\n「1つの要素にたくさんのデータ」というのはイメージしにくいかもしれませんが、例えば、ある個人について付随しているデータを考えると、年齢、性別、身長、体重、職業、趣味など、1人にたくさんのデータがくっついてきます。ある個人Aさんと別の個人Bさんでは、異なるデータがくっついていることになります。AさんとBさんの属性が似ているかどうかは、そのデータがどれぐらい似ているかを調べればわかります。このように1人あたりのデータがたくさんある状態のことを**多次元データ**であると考えることができます。\n\n多次元データがどの程度似ているのかを表現できれば、個々人が似ている・似ていないを判断することができ、似ている人をグループとして分けることができます。この似ている人同士をグループにすることがクラスタリングに当たります。\n\nクラスタリングするときに、似ているものから順番に線でつないでいく方法のことを**階層ありクラスタリング**、似ているものを大まかにグループ分けする方法を**階層なしクラスタリング**と呼びます。\n\n## 階層ありクラスタリング\n\n### 距離行列\n\n階層ありクラスタリングとは、多次元データ間の**距離**を計算することで、個々のデータについて似ている度合いを評価し、評価に従って似ているものから**クラスター**に分けていく手法のことです。まずは、データを**距離行列**に変換する必要があります。\n\n距離行列とは、たくさんあるデータとデータの距離を行列としてまとめたものです。最も単純な距離行列は2つのデータの直線距離（ユークリッド距離）です。\n\n距離行列についてイメージしやすいように、まずは、都道府県の県庁所在地の緯度・経度のデータを用いて距離行列を計算します。都道府県の緯度経度情報は[Github Gistのページ](https://gist.github.com/ctsaran/42728dad3c7d8bd91f1d)からダウンロードしています。\n\n簡便化のために、関西の都道府県のみを用います。緯度・経度から、関西の都道府県は下のグラフに示すように位置していることがわかります。この時、各県から別の県までの直線距離をそれぞれ求めることができます。これを行列にまとめたのが距離行列です。Rでは、`dist`関数というものを用いて、緯度・経度のデータからユークリッド距離の距離行列を求めることができます。\n\n```{r, filename=\"データの準備\"}\nkansai <- read.csv(\"./data/pref_lat_lon.csv\", header = T, fileEncoding = \"CP932\")\n\n# 関西の都道府県データのみ取得する\nkansai <- kansai[24:30, ]\nkansai # 各県の緯度と経度\n\nggplot(\n  kansai, \n  aes(x = lon, y = lat, color = pref_name, label = pref_name)) + \n  geom_text() # 県庁所在地の位置\n```\n\n\n```{r, filename=\"データを距離行列に変換\"}\n# ユークリッド距離（数値は24から順に三重、滋賀、京都、大阪、兵庫、奈良、和歌山）\ndist(kansai[, 2:3], method=\"euclidean\") \n```\n\n上の例では緯度・経度の2つのデータから距離行列を計算していますが、もっとたくさんの列があるデータにおいても同様に距離行列を計算することができます。また、距離行列には、距離の計算の仕方によってさまざまな種類のものがあります。距離としてよく用いられるものは、**ユークリッド距離**（2点間の直線の距離）と**マンハッタン距離**（2点間を移動するときの横と縦の移動距離を足したもの）の2つです。\n\nこの距離行列を用いて、距離が近いもの同士をクラスターにまとめていくものが、**階層ありクラスタリング（hierarchical clustering）**です。\n\n::: {.panel-tabset}\n\n## ユークリッド距離\n\n```{r}\n# ユークリッド距離\n#（軸の数値は24から順に三重、滋賀、京都、大阪、兵庫、奈良、和歌山）\ndist(kansai[, 2:3], method = \"euclidean\") \n```\n\n## 最大距離\n\n```{r}\n# 縦と横の距離の最大値を取る\ndist(kansai[, 2:3], method = \"maximum\") \n```\n\n## マンハッタン距離\n\n```{r}\n# マンハッタン距離\ndist(kansai[, 2:3], method = \"manhattan\") \n```\n\n## キャンベラ距離\n\n```{r}\n# キャンベラ距離\n#（原点近くの距離を大きく見積もる、2点の距離を原点からの距離の絶対値の和で割る）\ndist(kansai[, 2:3], method = \"canberra\")\n```\n\n## バイナリ距離\n\n```{r}\n# バイナリ距離（距離が0なら1、0でなければ0を返す）\ndist(kansai[, 2:3], method = \"binary\") \n```\n\n## ミンコフスキー距離\n\n```{r}\n# ミンコフスキー距離\n#（ユークリッドとマンハッタンの中間的なもの、pという引数を別途取る。pのデフォルトは2）\ndist(kansai[, 2:3], method = \"minkowski\") \n```\n\n:::\n\n### Rでの階層ありクラスタリング\n\nRでは、この階層ありクラスタリングを`hclust`関数を用いて行います。`hclust`関数の第一引数は距離行列で、上に述べた通り`dist`関数を用いて計算できるものです。`method`引数には、クラスタリングの方法を選択します。クラスタリングの方法は、`\"complete\"`（デフォルト）、`\"ward.D\"`、`\"ward.D2\"`、`\"single\"`、`\"average\"`、`\"mcquitty\"`、`\"median\"`、`\"centroid\"`の8つから選択します。\n\nこの、`hclust`関数の返り値を`plot`することで、クラスタリングの結果を確認することができます。`hclust`関数の返り値自体を確認することはあまりないため、基本的には`plot`して使うものだと考えてもらうとよいと思います。`plot`関数において、`hang`引数を`-1`に指定すると、クラスタリングする要素の下端をそろえることができます。\n\n`plot`関数で表示されるのは、より近いもの同士も線でつないだ樹形上の図です。線でつながった距離が近いほど、データがよく似ていることを示しています。上記の都道府県の緯度・経度でクラスタリングを行うと、距離の近さとクラスタリングの図上の近さが対応しているのがわかるかと思います。\n\n::: {.panel-tabset}\n\n## 下揃えなし\n\n```{r, filename=\"階層ありクラスタリング\", fig.width=10}\nJPll <- read.csv(\"./data/pref_lat_lon.csv\", header = T, row.names = 1, fileEncoding = \"CP932\")\nhc <- hclust(dist(JPll), method = \"complete\") # 引数は距離行列\nplot(hc) # 樹形図の作図\n```\n\n## 下揃えあり\n\n```{r, filename=\"階層ありクラスタリング：下を揃える\", fig.width=10}\nplot(hc, hang = -1)\n```\n\n:::\n\n## 階層なしクラスタリング\n\n階層ありクラスタリングでは、距離の近いデータ同士をつなぐため、各データのクラスタの近さは厳密に計算されています。一方で、この方法では距離行列を必ず計算する必要があり、データが増えると計算回数がどんどん増えていきます。\n\nデータ同士の距離ではなく、「クラスターの中心」を定め、この中心からの距離が近いものを同じクラスターであるとしてグループ分けする方法のことを**階層なしクラスタリング**と呼びます。こちらの方法であれば、計算回数はクラスター数に依存するため、データが増えても大きくは計算回数が増えず、比較的単純な計算でグループ分けを行うことができます。一方で、厳密にデータ間の距離を計算しているわけではないので、階層ありクラスタリングのように細かなデータの類似性を評価することはできません。\n\nこの階層なしクラスタリングの最も代表的なものが、**k-mean法**です。\n\n## k-means\n\n**k-means法**では、あらかじめ乱数に従い「クラスターの中心」を設定します。このクラスターの中心の数は解析する人が設定する必要があります。次に、このクラスターの中心からの距離が近いデータを、そのクラスターのデータであるとします。この仮のクラスターができたら、次にクラスター内のデータの重心を求めます。重心が定まったら、この重心を新しい「クラスターの中心」として、クラスターの中心の位置を更新します。\n\nこのクラスターの中心を重心に更新する試行を、重心が移動しなくなるまで繰り返した時のクラスター内のデータをクラスターのメンバーとします。言葉ではわかりにくいので、以下にk-meansによるクラスタリングの図を示します。また、[こちらのリンク](http://tech.nitoyon.com/ja/blog/2013/11/07/k-means/)、もしくは[このWebアプリケーション](https://www.shinyapps.io/admin/#/application/11051496)を見ていただくと、k-meansをよりイメージしやすいかと思います。WebアプリケーションはRで、`if(!require(shiny)){install.packages(\"shiny\")};runGitHub(\"kmeans_animated\", \"sb8001at\")`を実行することでも利用することができます。\n\n:::{.callout-tip collapse=\"true\"}\n\n## k-mean：下グラフ描画のスクリプト\n\n```{r, eval=FALSE}\nset.seed(0)\n\n# データにはirisのがく片データを使用\ndata <- iris[, 1:2]\ncolnames(data) <- c(\"x\", \"y\")\n\n# クラスターの中心の初期値\ncenter_means <- \n  data.frame(\n    x = rnorm(3, mean(data[ ,1]), sd(data[ ,1])), \n    y = rnorm(3, mean(data[ ,2]), sd(data[ ,2])),\n    clus = 1:3)\n\n# アウトプットを保存する変数\ndata_for_gganimate <- NULL\n\nfor(i in 1:20){ # おそらくi=16ぐらいで収束している\n  \n  # 各中心からの距離の計算\n  dist_d <- data.frame(\n    dist_1 = (data$x - center_means[1, 1]) ^ 2 + (data$y - center_means[1, 2]) ^ 2,\n    dist_2 = (data$x - center_means[2, 1]) ^ 2 + (data$y - center_means[2, 2]) ^ 2,\n    dist_3 = (data$x - center_means[3, 1]) ^ 2 + (data$y - center_means[3, 2]) ^ 2\n  )\n  \n  # 最も近いクラスターを探す\n  min_dist <- apply(dist_d, 1, min)\n  \n  clus <- \n    case_when(\n      dist_d$dist_1 == min_dist ~ 1,\n      dist_d$dist_2 == min_dist ~ 2,\n      dist_d$dist_3 == min_dist ~ 3,\n    )\n  \n  # グラフ用データを準備\n  data_temp <- data.frame(data, clus, xcenter = center_means[clus,]$x, ycenter = center_means[clus,]$y, timestate = 2 * i - 1)\n  \n  data_for_gganimate <- rbind(data_for_gganimate, data_temp)\n  \n  # 重心でクラスターの中心を更新する\n  center_means2 <- data_temp |> group_by(factor(clus)) |> summarise(x = mean(x), y = mean(y))\n  center_means$x <- center_means2$x\n  center_means$y <- center_means2$y\n    \n  # グラフ用データを準備\n  data_temp <- data.frame(data, clus, xcenter = center_means[clus,]$x, ycenter = center_means[clus,]$y, timestate = 2 * i)\n  \n  data_for_gganimate <- rbind(data_for_gganimate, data_temp)\n}\n\npacman::p_load(gganimate)\n\n# gganimateでグラフ化\np <- ggplot()+\n  geom_point(data = data_for_gganimate, aes(x = x, y = y, color = factor(clus), size = 2), alpha = 0.5) +\n  geom_point(data = data_for_gganimate, aes(x = xcenter, y = ycenter, color = factor(clus), size = 3), alpha = 0.7)+\n  geom_segment(data = data_for_gganimate, aes(x = x, y = y, xend = xcenter, yend = ycenter, color = factor(clus)), alpha = 0.5)+\n  theme(legend.position = \"none\")+\n  transition_states(timestate, transition_length = 1, state_length = 1, wrap = TRUE)+\n  ease_aes('linear')\n\nanim_save(\"./image/p_kmeans.gif\", animate(p, renderer = gifski_renderer()))\n```\n\n:::\n\n![](./image/p_kmeans.gif)\n\nRではk-meansでのクラスタリングを`kmeans`関数を用いて行うことができます。`kmeans`関数の引数はデータフレームとクラスターの数（`centers`）です。以下の例では、`iris`のデータを3つのクラスターに分けています。k-meansのクラスター中心の初期値は乱数で決められますので、クラスターの結果は計算のたびに少しずつ変化します。また、初期値を特定の値として`centers`引数に行列で与えることもできます。\n\n```{r, filename=\"kmeans関数でクラスタリング\"}\n## k-means\nset.seed(0) # k-meansは乱数計算なので、シードを設定\nk.cent3 <- kmeans(iris[ ,1:4], centers = 3) # 3つのクラスタに分ける\nk.cent3$cluster # 計算結果\n```\n\n\n```{r, filename=\"クラスターの中心を指定\"}\nk.cents <- kmeans(iris[ ,1:4], centers = iris[c(1, 51, 101), 1:4]) # 初期値を各種の始めの値に設定\nk.cents$cluster\n```\n\n以下では、k-meansでクラスター分けしたデータと、`iris`の`Species`の関係を示しています。k-meansでクラスター分けした結果が`Species`とほぼ重なることを確認できます。\n\n```{r, filename=\"クラスターとirisの種の比較\", warning=FALSE}\nspvec <- iris$Species |> levels()\n\nk.cent3$cluster <- k.cent3$cluster - 1\nk.cent3$cluster <- if_else(k.cent3$cluster == 0, 3, k.cent3$cluster)\n\ncbind(iris, cluster = spvec[k.cent3$cluster]) |> \n  gather(tag, value, 5:6) |> \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = value))+\n    geom_point(size = 3)+\n    facet_wrap(~ tag)\n```\n\n## c-means\n\n**c-means法**はfuzzy c-means法とも呼ばれる、クラスターへの所属を確率で求める手法です。c-means法もk-means法と同じく、データとクラスターの距離をもとにクラスタリングを行う手法の一つです。Rでは、c-means法の計算を[`e1071`](https://cran.r-project.org/web/packages/e1071/index.html)パッケージ [@e1071_bib]の`cmeans`関数で行うことができます。`cmeans`関数も`kmeans`関数と同様に、データフレームと中心の数（`centers`）を引数に取ります。クラスターの中心の初期値は行列で与えることもできます。\n\n```{r, filename=\"c-means法\", warnings=FALSE, message=FALSE}\npacman::p_load(e1071)\n# クラスタリングの計算（中心を指定）\niris.c <- cmeans(iris[,1:4], centers = iris[c(1, 51, 101), 1:4])\n\n# クラスターとirisの種の比較\ncbind(iris, cluster = spvec[iris.c$cluster]) |>  \n  gather(tag, value, 5:6) |> \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = value))+\n  geom_point(size = 3)+\n  facet_wrap(~ tag)\n```\n\n## スペクトラルクラスタリング\n\nスペクトラルクラスタリングは、上記のk-meansやc-meansのように、中心からの距離だけでは分離するのが難しいようなクラスタリングを行うときに有効な手法です。スペクトラルクラスタリングでは、近くにあるデータは同じクラスターに分類されやすくするようにアルゴリズムが組まれていて、k-meansやc-meansでは分離不能なクラスタをきれいに分けることができます。\n\nRではスペクトラルクラスタリングを[`kernlab`](https://cran.r-project.org/web/packages/kernlab/index.html)パッケージ [@kernlab_bib1; @kernlab_bib2]の`specc`関数を用いて行うことができます。`specc`関数の使い方は`kmeans`関数や`cmeans`関数とほぼ同じで、データフレームと`centers`を引数に取ります。また、返り値を`plot`関数の引数にすることで、簡単にクラスターをグラフにすることもできます。\n\n```{r, filename=\"スペクトラルクラスタリング\"}\npacman::p_load(kernlab)\n\n# データにはkernlabのspiralsを用いる\ndata(spirals)\nhead(spirals)\n\nsc <- specc(spirals, centers = 2) # スペクトラルクラスタリング\nplot(spirals, col = sc) # 結果の表示（色がクラスターを示す）\n```\n\nただし、このスペクトラルクラスタリングは必ずしも良いクラスタリングの方法ではなく、例えば`iris`のクラスタリングに用いると、3クラスターを指定しても、ほとんど2クラスターしか出てこなくなってしまいます。クラスター同士の距離が近く、接していると正しくクラスタリングできないようです。スペクトラルクラスタリングを用いる時にはデータの構造をよく確認する必要があります。\n\n```{r, filename=\"irisでスペクトラルクラスタリング\"}\n# 3クラスタとなるよう設定\nsc.iris <- specc(iris[,1:4] |> as.matrix(), centers = 3)\n\n# 結果に1がほとんどなく、ほぼ2クラスターになっている\nsc.iris@.Data \n```\n\n## 主成分分析\n\n**主成分分析**は、多次元のデータを第一主成分・第二主成分…という主成分にデータ変換する手法です。この**第一主成分**というのは、データを空間に配置したときに、ばらつきが最も大きくなる軸に沿った値を指します。このようにばらつきが最も大きくなる軸を選んで主成分とすることで、多次元のデータからデータの損失を抑えつつ、そのデータの特徴を残したようなパラメータに変換することができます。要は、多次元のデータだと特徴を捉えにくい場合においても、主成分に変換することでデータの特徴を捉えやすくすることができます。\n\n第二主成分は、第一主成分を定めた軸に垂直な面において、最もばらつきが多い軸に沿った値となります。第一主成分の軸と第二主成分の軸は互いに直行している、90度に交わっているので、**第一主成分と第二主成分の相関はほぼゼロ**になります。この特徴のため、[26章](./chapter26.html)で説明した主成分回帰では説明変数同士が相関しているときに起こる問題、多重共線性を避けることができます。\n\n以下に、主成分分析の軸のイメージを示します。軸は互いに垂直に交わっているのがわかると思います。PC1を横に、PC2を縦になるように回転させたのが、下の第一主成分と第二主成分でのプロットのイメージとなります。\n\n:::{.callout-tip collapse=\"true\"}\n\n## 主成分分析における主成分の軸のイメージ（スクリプト）\n\n```{r, eval=FALSE}\niris_temp <- iris |> filter(Species != \"setosa\") |> _[ ,1:3]\niris.pc2 <- prcomp(iris_temp)\n\npc1 <- iris.pc2$x[ ,1]\npc2 <- iris.pc2$x[ ,2]\npc3 <- iris.pc2$x[ ,2]\ncenter1 <- iris.pc2$center[1]\ncenter2 <- iris.pc2$center[2]\ncenter3 <- iris.pc2$center[3]\n\niris_temp$pc1_Sepal.Length <- pc1 * iris.pc2$rotation[1, 1] + center1\niris_temp$pc1_Sepal.Width <- pc1 * iris.pc2$rotation[2, 1] + center2\niris_temp$pc1_Petal.Length <- pc1 * iris.pc2$rotation[3, 1] + center3\niris_temp$pc2_Sepal.Length <- pc2 * iris.pc2$rotation[1, 2] + center1\niris_temp$pc2_Sepal.Width <- pc2 * iris.pc2$rotation[2, 2] + center2\niris_temp$pc2_Petal.Length <- pc2 * iris.pc2$rotation[3, 2] + center3\niris_temp$pc3_Sepal.Length <- pc3 * iris.pc2$rotation[1, 3] + center1\niris_temp$pc3_Sepal.Width <- pc3 * iris.pc2$rotation[2, 3] + center2\niris_temp$pc3_Petal.Length <- pc3 * iris.pc2$rotation[3, 3] + center3\n\npacman::p_load(plotly)\n\nfig <- \n  plot_ly(\n    iris_temp, \n    x =~ Sepal.Length, \n    y =~ Sepal.Width, \n    z =~ Petal.Length, \n    type = \"scatter3d\",\n    mode = \"markers\",\n    name = 'data',  \n    marker = list(size = 2)) |> \n  add_trace(\n    x =~ pc1_Sepal.Length, \n    y =~ pc1_Sepal.Width, \n    z =~ pc1_Petal.Length, \n    type = \"scatter3d\", \n    mode = \"markers+lines\",\n    name = 'PC1', \n    marker = list(color = \"red\", size = 0.1),\n    line = list(color = \"red\", width = 5)) |> \n  add_trace(\n    x =~ pc2_Sepal.Length, \n    y =~ pc2_Sepal.Width, \n    z =~ pc2_Petal.Length, \n    type = \"scatter3d\",\n    mode = \"markers+lines\",\n    name = 'PC2',\n    marker = list(color = \"red\", size = 0.1),\n    line = list(color = \"blue\", width = 5)) |> \n  add_trace(\n    x =~ pc3_Sepal.Length, \n    y =~ pc3_Sepal.Width, \n    z =~ pc3_Petal.Length, \n    type = \"scatter3d\", \n    mode = \"markers+lines\",\n    name = 'PC3',\n    marker = list(color=\"red\", size=0.1),\n    line = list(color=\"green\", width=5))\n\nfig\n```\n\n:::\n\n```{r, echo=FALSE}\niris_temp <- iris |> filter(Species != \"setosa\") |> _[,1:3]\niris.pc2 <- prcomp(iris_temp)\n\npc1 <- iris.pc2$x[,1]\npc2 <- iris.pc2$x[,2]\npc3 <- iris.pc2$x[,2]\ncenter1 <- iris.pc2$center[1]\ncenter2 <- iris.pc2$center[2]\ncenter3 <- iris.pc2$center[3]\n\niris_temp$pc1_Sepal.Length <- pc1 * iris.pc2$rotation[1, 1] + center1\niris_temp$pc1_Sepal.Width <- pc1 * iris.pc2$rotation[2, 1] + center2\niris_temp$pc1_Petal.Length <- pc1 * iris.pc2$rotation[3, 1] + center3\niris_temp$pc2_Sepal.Length <- pc2 * iris.pc2$rotation[1, 2] + center1\niris_temp$pc2_Sepal.Width <- pc2 * iris.pc2$rotation[2, 2] + center2\niris_temp$pc2_Petal.Length <- pc2 * iris.pc2$rotation[3, 2] + center3\niris_temp$pc3_Sepal.Length <- pc3 * iris.pc2$rotation[1, 3] + center1\niris_temp$pc3_Sepal.Width <- pc3 * iris.pc2$rotation[2, 3] + center2\niris_temp$pc3_Petal.Length <- pc3 * iris.pc2$rotation[3, 3] + center3\n\npacman::p_load(plotly)\n\nfig <- \n  plot_ly(\n    iris_temp, \n    x=~Sepal.Length, \n    y=~Sepal.Width, \n    z=~Petal.Length, \n    type=\"scatter3d\",\n    mode=\"markers\",\n    name = 'data',  \n    marker=list(color=\"orange\", size=3)) |> \n  add_trace(\n    x=~pc1_Sepal.Length, \n    y=~pc1_Sepal.Width, \n    z=~pc1_Petal.Length, \n    type=\"scatter3d\", \n    mode=\"markers+lines\",\n    name = 'PC1', \n    marker=list(color=\"red\", size=0.1),\n    line=list(color=\"red\", width=5)) |> \n  add_trace(\n    x=~pc2_Sepal.Length, \n    y=~pc2_Sepal.Width, \n    z=~pc2_Petal.Length, \n    type=\"scatter3d\",\n    mode=\"markers+lines\",\n    name = 'PC2',\n    marker=list(color=\"red\", size=0.1),\n    line=list(color=\"blue\", width=5)) |> \n  add_trace(\n    x=~pc3_Sepal.Length, \n    y=~pc3_Sepal.Width, \n    z=~pc3_Petal.Length, \n    type=\"scatter3d\", \n    mode=\"markers+lines\",\n    name = 'PC3',\n    marker=list(color=\"red\", size=0.1),\n    line=list(color=\"green\", width=5))\n\nfig\n```\n\n```{r, echo=FALSE}\ndata.frame(pc1, pc2) |> \n  ggplot(aes(x=pc1, y=pc2))+\n  geom_point(size=2, color=\"orange\")+\n  geom_hline(yintercept=0, color=\"red\")+\n  geom_vline(xintercept=0, color=\"blue\")+\n  labs(title=\"PC1とPC2の2次元グラフ\")\n```\n\n主成分分析は、主成分回帰のようなデータの前処理の他に、次元を圧縮することでデータの類似性や違いを分かりやすく示す場合に用いられています。\n\n例えば、ヒトのDNAには無数のSNP（Single Nucleotide polymorphism、一塩基多型）があります。このSNPというのは、DNAの塩基が置き換わっているもの（例えば、AがCに代わっている）を指し、置き換わりが各個々人によって異なることを意味しています。私のDNAのある位置の塩基がAで、別の方ではCになっている、というように、多型を示すことがSNPです。ヒトのDNAの長さは大体3×10^9^塩基あります。この長いDNAには、SNPが6000万個ぐらいあります。\n\nヒトを含め、分子系統樹と呼ばれる祖先からの遺伝子変化の流れを調べる場合には、近年ではこのSNPを指標に系統樹を書きます（以前はミトコンドリアDNAやリボソーム蛋白のDNAのSNPや反復配列の長さが使われていたような気がします）。もちろんこの6000万個のすべてのSNPを用いるわけではありませんが、通常取り扱うSNPは非常に多くなります。このたくさんあるSNPを用いて、例えば日本人と韓国人の違いを示すことを考えると、ひとつづつSNPを見て特徴を捉えていては、いつまでたっても違いはわかりません。このように、膨大なデータ（の次元）がある場合に、主成分分析は力を発揮します。膨大なデータを第一主成分と第二主成分に変換してしまえば、2次元のプロットを利用して日本人と韓国人の違いを表すことができます。ヒトの歴史的な移動に関して、このSNPと主成分分析を用いて[論文](https://www.nature.com/articles/jhg2012114#citeas)が発表されています[@1523106605673180672]。この論文を見ていただければわかる通り、主成分分析を用いれば膨大なSNPのデータを2次元に集約し、わかりやすい表現で説明することができます。\n\nただし、この第一主成分や第二主成分などの主成分が何を意味しているのかは、その時々によって異なりますし、理解が難しいことも多いです。「主成分が近いものは類似している」ぐらいの意味しかわからない場合もあると考えるとよいでしょう。\n\n### Rで主成分分析\n\nRでは、`prcomp`関数で主成分分析の計算を行うことができます。`prcomp`関数は引数に行列やデータフレームを取ります。`prcomp`関数の返り値は各主成分方向の標準偏差（standard deviations）と、回転（Rotation）です。回転は、データを主成分に変換するときの係数を示します。\n\n```{r, filename=\"主成分分析\"}\niris.pc <- prcomp(iris[ ,1:4])\n\niris.pc\n```\n\n`prcomp`関数の返り値を`summary`関数の引数に取ると、標準偏差、分散の配分（Proportion of Variance）、積算の分配の配分（Cumulative Proportion）が示されます。このうち、分散の配分はその主成分によってばらつきをどれだけ説明できているかを示すものです。下の例では、PC1で92.5%程度のばらつきを示すことができている、つまり、PC1でデータの差を十分説明できていることがわかります。\n\n```{r, filename=\"summaryの結果\"}\niris.pc |> summary()\n```\n\n主成分分析では、Cumulative Proportionにもよりますが、第一主成分（PC1）と第二主成分（PC2）に変換したデータをプロットして、データの類似性などを示すことが一般的です。変換後の主成分は、`$x`で呼び出すことができます。以下のように、`iris`の種が同じ、つまりよく似たデータであれば、比較的近い位置に変換後のデータが集まるのがわかります。\n\n```{r, filename=\"第一主成分と第二主成分をプロット\"}\niris.pc <- prcomp(iris[ ,1:4])\nirispcd <- iris.pc$x |> as.data.frame()\nirispcd$Species <- iris$Species\nggplot(irispcd, aes(x = PC1, y = PC2, color = Species)) + geom_point(size = 2)\n```\n\n## 因子分析\n\n**因子分析**も主成分分析と同じく、多次元のデータをいくつかの因子に変換することで、データの性質を簡単に理解できるようにするための手法です。主成分分析との違いは、主成分分析では主成分の意味を理解するのが難しいのに対して、因子分析では因子の意味付けが比較的容易であること、因子間の相関は必ずしも0とはならないこと、主成分分析が射影の計算であるのにたいして、因子分析は回転の計算を行うことなどです。\n\nRでは、因子分析を`factanal`関数を用いて行うことができます。以下の例では、鹿児島大学が[成績サンプルデータ](https://estat.sci.kagoshima-u.ac.jp/data/cgi-bin/data/whats_data/data/img/932722923_9821.xls)として提供しているデータを用いて因子分析を行っています。\n\n`factanal`関数はデータフレームまたは行列を第一引数に取り、因子の数（`factors`）、回転の方法（`rotation`）、算出するスコアのタイプ（`scores`）を引数として設定して用います。\n\n`factors`には、出力として得たい因子の数を指定します。以下の例では、理系・文系科目の得意・不得意を評価する因子を作成するため、因子数を`2`としています。\n\n`rotation`には`\"varimax\"`か`\"promax\"`のどちらかを選択するのが一般的です。`varimax`回転はデータをそのまま回転させる方法（直交回転）、`promax`回転はデータの軸の角度を変換させて回転させる方法（斜交回転）です。`promax`回転では因子間に相関が生じるのが特徴です。\n\n`scores`には計算して得られる数値（因子スコア）の計算方法を指定します。方法には`\"none\"`、`\"Bartlett\"`、`\"regression\"`のいずれかを選択します。`\"none\"`を指定するとスコアが算出されないので、`\"Bartlett\"`か`\"regression\"`のいずれかを選択します。\n\n`factanal`関数の返り値のうち、Loadingが各データの寄与率を示す値となります。以下のvarimax変換の例では、Factor1（因子1）では数学、物理、化学、Factor2では国語、英語の値が高いため、Factor1は理系科目の、Factor2は文系科目の評価を反映していることがわかります。\n\n```{r, filename=\"因子分析：バリマックス変換\"}\nm1 <- read.csv(\"./data/testresult.csv\", fileEncoding = \"CP932\")\nm1v <- factanal(m1[ ,2:6], factors = 2, scores = \"Bartlett\") # varimax変換\nm1v\n```\n\n同様にpromax回転での因子分析でも、Factor1が理系科目、Factor2が文系科目の成績を反映していることがわかります。ただし、寄与率はバリマックスとは異なり、Factor1での理系科目の寄与率もFactor2での文系科目の寄与率もvarimax回転より高いため、こちらの方がより理系度・文系度を反映していることがわかります。\n\n```{r, filename=\"因子分析：プロマックス変換\"}\nm1p <- factanal(m1[,2:6], factors = 2, rotation = \"promax\", scores = \"Bartlett\") # promax変換\nm1p\n```\n\n以下に、varimax回転、promax回転それぞれでの因子のスコアをプロットした結果を示します。スコアは`$scores`で呼び出すことができます。varimax回転でもpromax回転でも、概ね理系・文系科目の得意さを因子で評価できています。\n\n::: {.panel-tabset}\n\n## varimax回転\n\n```{r}\nm1vs <- m1v$scores |> as.data.frame() # 計算したスコアをデータフレームに変換\nm1vs$student <- 1:nrow(m1vs) # 生徒のIDを追加\n\nggplot(m1vs, aes(x = Factor1, y = Factor2, color = student, label = student))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")+\n  labs(title = \"バリマックス回転\", x = \"理系度\", y = \"文系度\")\n```\n\n## promax回転\n\n```{r}\nm1ps <- m1p$scores |> as.data.frame()\nm1ps$student <- 1:nrow(m1ps)\n\nggplot(m1ps, aes(x = Factor1, y = Factor2, color = student, label = student))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")+\n  labs(title = \"プロマックス回転\", x = \"理系度\", y = \"文系度\")\n```\n\n:::\n\n## 多次元尺度法\n\n多次元尺度法は主成分分析や因子分析とは少し異なる次元圧縮の方法です。多次元尺度法は、距離行列から互いの点の位置を求める、距離行列演算の逆のような変換を行う手法です。\n\n以下の例では、都道府県の県庁所在地の緯度・経度を`dist`関数で距離行列に変換し、距離行列を多次元尺度法で位置の情報に変換しています。\n\n```{r, filename=\"緯度・経度を距離行列に変換\"}\nJPD <- read.csv(\"./data/pref_lat_lon.csv\", header = T, fileEncoding = \"CP932\")\n\nprefecture <- JPD[,1] %>% unlist()\nJPD <- JPD[,-1] %>% dist() # 距離行列を計算\n```\n\nRでは多次元尺度法の計算を`MASS`パッケージの`sammon`関数を用いて行うことができます。`sammon`関数の引数は距離行列です。距離行列を`sammon`関数で変換すると、`x`と`y`という、位置を示す2つの変数が求まります。\n\n```{r}\npacman::p_load(MASS)\nJPpos <- JPD |> sammon() |> _$points\nhead(JPpos)\n```\n\n以下に、`sammon`関数の返り値をプロットしたものを示します。`x`と`y`の単位はありませんが、都道府県の位置関係を正確に反映していることが見て取れると思います。ただし、距離行列には方角のデータが含まれていないため、東西南北の方向は回転したり反転したりすることになります。\n\n```{r, filename=\"多次元尺度法の結果をプロットする\"}\nJPpos <- as.data.frame(JPpos)\ncolnames(JPpos) <- c(\"x\", \"y\")\nJPpos$prefecture <- prefecture\n\nggplot(JPpos, aes(x = -x, y = -y, label = prefecture, color = prefecture))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")\n```\n\n`cmdscale`関数を用いても多次元尺度法の計算を行うことができます。\n\n```{r, filename=\"cmdscale関数で多次元尺度法\"}\nJPpos2 <- JPD %>% cmdscale %>% as.data.frame\ncolnames(JPpos2) <-  c(\"x\", \"y\")\nJPpos2$prefecture <- prefecture\n\nggplot(JPpos2, aes(x = x, y = y, label = prefecture, color = prefecture))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"output-file":"chapter28.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","lightbox":"auto","bibliography":["references.bib"],"editor":"source","theme":{"light":"united","dark":"cyborg"},"toc-expand":2,"code-block-bg":true,"code-block-border-left":"#31BAE9"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}