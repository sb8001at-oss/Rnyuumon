{"title":"データの読み込みと書き出し（I/O）","markdown":{"headingText":"データの読み込みと書き出し（I/O）","containsRefs":false,"markdown":"\n```{r, setup, include=FALSE, echo=FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE\n)\n```\n\n統計に用いるデータは、通常Excelのような表計算ソフトや、データベースなどで作成されます。Rを用いてデータ解析・統計解析を行うためには、まずRに表計算ソフトやデータベースからデータを読み込む必要があります。\n\nデータ解析・統計解析が終われば、Rでの解析結果を書き出し、Excelなどで取り扱う必要があります。\n\nこのように、Rで解析を行うためには、データの読み込み・書き出しが必須となります。Rはこのような、データの読み込み・書き出し（Input/Output、**I/O**）のための関数を多数備えています。\n\n## ディレクトリの操作\n\nデータを読み込み、書き出すためには、まず読み込む・書き出すためのフォルダが必要となります。フォルダのことを**ディレクトリ**とも呼びます。Rでは、**ワーキングディレクトリ（working directory）**というものが設定されています。Rからはこのワーキングディレクトリの中のファイルを確認することができます。\n\nワーキングディレクトリは通常、RStudioを起動した時に、右下のカラムのFilesタブに表示されています。\n\n![図1：ワーキングディレクトリをfilesタブで確認する](./image/filestab.png)\n\nこのfilesタブでは、任意のフォルダに移動することができます。上図の右上、...と記載されている部分をクリックするとウインドウが開きます。このウインドウ上で任意のフォルダに移動すれば、filesタブに示されるフォルダが変わります。ただし、表示するフォルダを変えるだけではワーキングディレクトリを変更することはできません。\n\nfilesタブに表示されたフォルダをワーキングディレクトリに設定するには、filesタブの右上、「More」から「Set As Working Directory」を選択します。\n\n![図2：MoreのリストからSet As Working Directoryを選ぶ](./image/filestab_options.png)\n\nFileに表示されているディレクトリをワーキングディレクトリに変更する場合には、同じ「More」から「Go To Working Directory」を選択します。\n\nワーキングディレクトリの変更は、上の「Session」から「Set Working Directory」を選択することでも変更できます。\n\n![図3：「Session」からワーキングディレクトリを変更する](./image/Session_SetWD.png)\n\nデフォルトのワーキングディレクトリ（Rstudioを開いた時に設定されているワーキングディレクトリ）を変更する場合には、「Tools」→「Option」を選択し、「Default working directory」に任意のフォルダを指定します。\n\n![図4：デフォルトのワーキングディレクトリを変更する](./image/DefaultWD.png)\n\n### getwd関数とsetwd関数\n\n上記のように、RStudioの機能を使えばワーキングディレクトリを簡単に変更することができます。ただし、データのフォルダ構造によっては、Rでの演算中にワーキングディレクトリを変更したい、といった場合もあります。\n\nワーキングディレクトリの確認と設定は、`getwd`関数と`setwd`関数を用いて行うことができます。\n\n`getwd`関数は現在のワーキングディレクトリを確認するための関数です。`getwd`関数は引数を取らず、実行すると現在のワーキングディレクトリのアドレスを文字列で返します。\n\n`setwd`関数はワーキングディレクトリを変更するための関数です。`setwd`関数は**文字列のディレクトリのアドレス**を引数に取ります。`setwd`関数を実行すると、アドレスで指定したフォルダにワーキングディレクトリが変更されます。\n\n```{r, eval=FALSE, filename=\"ワーキングディレクトリの確認と設定\"}\ngetwd() # ワーキングディレクトリを確認\nsetwd(\"directory/name/as/character\") # ワーキングディレクトリを変更\n```\n\n### 絶対パスと相対パス\n\nディレクトリを指定する際には、**ディレクトリのアドレス**を用います。Windowsでは、フォルダを開き、上のアドレスバーを右クリックすると、アドレスをテキストとしてコピーすることができます。この方法でコピーできるアドレスのことを**絶対パス**と呼びます。絶対パスには、ルートディレクトリ（大元のフォルダ）からそのフォルダまでのアドレスが全て記載されています。\n\n![図5：ディレクトリのアドレス（Windowsの場合）](./image/directory_address.png)\n\nディレクトリのアドレスには、**相対パス**と呼ばれるものもあります。相対パスは、現在のディレクトリの上位や下位といった、現在のディレクトリからの位置を相対的に表すものです。\n\n`setwd`関数は、この絶対パス、相対パスのいずれも使用することができます。絶対パスの場合には、ルートからのすべてのアドレスを文字列で指定します。一方、相対パスの場合は、.（ピリオド）を用いて、現在のディレクトリからの位置を以下のように指定します。\n\n-   **「./」**は今のディレクトリのアドレスを示す記号\n-   **「../」**は今のディレクトリの一つ上位のディレクトリを示す記号\n\n上の記号を用いて、一つ下位にあるディレクトリは以下のように示すことができます。\n\n**\"./一つ下のフォルダ名\"**\n\nまた、`setwd`関数は、下位のフォルダであれば、そのフォルダまでのパスを記載するだけでもディレクトリを指定することができます。ただし、Windowsではフォルダのつなぎ文字がバックスラッシュ（\\\\）になっています。Rでのつなぎ文字はスラッシュ（/）ですので、Windowsではアドレスの記法が異なることに注意が必要です。\n\n```{r, eval=FALSE, filename=\"相対パスと絶対パス\"}\nsetwd(\"../\") # 一つ上のフォルダにワーキングディレクトリを移動\nsetwd(\"./NameF\") # 一つ下の「NameF」というフォルダにワーキングディレクトリを移動\nsetwd(\"NameF\") # 上と同じ\nsetwd(\"NameF/NameF2\") # NameFフォルダ内のNameF2というフォルダに移動\n```\n\n## ディレクトリ内のファイルの確認\n\nワーキングディレクトリ内のファイルやフォルダは、Rで開いたり、確認したりすることができます。`dir`関数と`list.files`関数はワーキングディレクトリ内のファイル・フォルダの一覧を表示するための関数です。いずれもファイル・フォルダ名の一覧を文字列のベクターとして返します。`list.dirs`関数はワーキングディレクトリ内にあるフォルダのアドレスの一覧を文字列のベクターとして返します。\n\n```{r, eval=FALSE, filename=\"ディレクトリ内のファイル・フォルダの確認\"}\ndir() # ディレクトリ名とファイル名が返ってくる\nlist.files() # dir関数と同じ\nlist.dirs() # ディレクトリ名のみ返ってくる\n```\n\n## フォルダとファイルの作成\n\n現在のワーキングディレクトリにフォルダを作成する際には、`dir.create`関数を用います。`dir.create`関数は作成するフォルダ名の文字列を引数に取ります。ワーキングディレクトリ内にファイルを作成する関数はいくつもあります。単にファイルを作るのであれば`file.create`関数を、文字列をテキストで保存する場合には`cat`関数を用います。\n\n```{r, eval=FALSE, filename=\"ディレクトリとファイルの作成\"}\ndir.create(\"tmp\") # 現在のワーキングディレクトリに「tmp」というフォルダを作成\nsetwd(\"tmp\") # 作成したフォルダにワーキングディレクトリを移動\nfile.create(\"filename.txt\") # 空のテキストファイルを作成\ncat(\"Hello world\", file=\"helloworld.txt\") # Hello worldと書き込まれたテキストファイルを作成\n```\n\n## ワークスペースイメージ（.Rdata）の保存\n\n**ワークスペース**とは、Rを実行している時に取り扱っているオブジェクトなどの環境のことです。RGUIやRStudioを閉じるときには、下の図のようなウインドウが表示され、ワークスペースのイメージを保存するかどうか尋ねられます。ワークスペースを保存すると、現在のワーキングディレクトリに「**.RData**」というファイルが作成されます。この.RDataがワークスペースのイメージです。\n\n![図6：Rstudio終了時のワークスペース保存](./image/save_workspace.png)\n\n.RDataファイルはRStudioを閉じるときだけでなく、RStudioのメニューから「Session → Save Workspace As...」を選ぶことでも保存できます。また、`save.image`関数を用いても、.RDataファイルを作成することができます。\n\n現在のワークスペースの情報は、RStudio右上のパネルの「Environment」で確認できます。このパネルでは、現在Rで取り扱っている変数（オブジェクト）の一覧を確認することができます。\n\n![図7：Environmentパネル](./image/environment_pane.png)\n\nこのパネルに表示されているのと同じ、オブジェクトのリストをR上で取得する場合には、`ls`関数を用います。\n\nRを閉じると、オブジェクトはメモリから削除されます。次にRStudioを起動したときには、デフォルトのワーキングディレクトリに存在する.RDataから自動的にワークスペースのイメージが読み込まれます。別途、.RDataファイルを指定してワークスペースを読み込む場合には、`load`関数を用います。`load`関数で.RDataファイルを読み込むことで、.RDataファイルを保存した際に使用していたオブジェクトがメモリ上に展開されます。\n\nこのように、ワークスペースを保存・読み込むことで、以前のデータ分析環境を読み込み、データ分析の続きを行うことができます。\n\n```{r, eval=FALSE, filename=\"ワークスペースの保存と読み込み\"}\nls() # 現在メモリ上にある全てのオブジェクトを表示\nsave.image() # ワークスペースのイメージを保存する\nload(\".Rdata\") # ワークスペースのイメージを読み込む\n```\n\n## オブジェクトの保存と読み込み\n\nワークスペース全体ではなく、個別のオブジェクトも、一時的に保存し、読み込むことができます。オブジェクトの保存と読み込みには、`save`関数と`load`関数を用います。\n\n`save`関数はオブジェクトと文字列のファイル名の2つを引数に取り、オブジェクトを引数で指定したファイル名で保存する関数です。ファイル名は何でもよく、ファイルの拡張子にも特に指定はないのですが、**「.rda」**を拡張子としたファイル名とするのが一般的です。\n\n保存したオブジェクトを読み込む関数が、`load`関数です。`load`関数はファイル名の文字列を引数に取り、`save`関数で保存した.rdaファイルを読み込みます。`load`関数で読み込むと、Rのワークスペースには保存したオブジェクトが現れます。\n\n`save`・`load`関数と同様の関数として、`dput`関数と`dget`関数というものもあります。`dput`関数で保存したファイルは`load`関数で読み込めず、`save`関数で保存したファイルは`dget`関数で読み込めないため、`dput`関数でオブジェクトを保存した場合には、`dget`関数で読み込む必要があります。`dget`関数はオブジェクトを返す関数ですので、ワークスペースにオブジェクトが再現されるわけではありません。\n\n```{r, eval=FALSE, error=TRUE, filename=\"オブジェクトの保存と読み込み\"}\nx <- c(1, 2, 3)\nsave(x, file = \"Robject.rda\") # オブジェクトを保存\nrm(x) # xを削除する\nload(\"Robject.rda\") # オブジェクトの読み込み\nx # xが読み込まれている\n\ndput(x, \"Robject_dput.rda\") # オブジェクトを保存\ndget(\"Robject_dput.rda\") # オブジェクトが返ってくる\n\ndget(\"Robject.rda\") # エラー。saveで保存するとdgetで読み込めない\nload(\"Robject_dput.rda\") # エラー。dputで保存するとloadで読み込めない\n```\n\n### プログラムを呼び出す\n\n保存したプログラムを他のプログラムで呼び出すときには、`source`関数を用います。`source`関数の引数はファイル名の文字列です。[2章](./chapter2.html)で説明した通り、Rのプログラムは通常「.R」の拡張子を付けて取り扱いますので、拡張子を含めたファイル名を指定します。現在のワーキングディレクトリに保存されているファイルを呼び出す場合はそのファイル名を、他のディレクトリに保存されているファイルを呼び出す場合はそのファイルのパスを含む文字列を`source`関数の引数に取ります。。`source`関数でプログラムを呼び出すと、プログラムが実行されます。複雑なプログラムでは、関数などを別ファイルで定義しておいて、そのファイルを呼び出して用いることもあります。\n\n```{r, filename=\"source関数でプログラムの呼び出し\", eval=FALSE}\nsource(\"code_hello_world.R\")\n```\n\n## データの読み込み\n\n### Excelからデータを読み込む（古典的な方法）\n\n統計を行うデータは、通常Excelのような表計算ソフトか、データベースで準備するのが一般的です。このようなデータをRで取り込む際には、一昔前までは**「テキストファイルに変換」**してから読み込むのが一般的でした。\n\n最近ではライブラリを使用することでExcelやデータベースのファイルから直接データを読み込むことができますが、ライブラリなしのRではこのような読み込みはできません。ライブラリが使用できないときには、以下のような方法でExcelファイルをテキストで保存し、Rで読み込むことになります。\n\nまた、Web上に保存されているデータがテキストである場合も少なくありません。このような、Web上のテキストファイルの読み込みにも、以下に示すテキスト読み込みの方法を用いることができます。\n\n#### Excel：csv・タブ切りテキストへの変換\n\nまずは、Excelでのテキストファイルの変換について説明します。Rで読み込むことができるテキストは、大きく分けると以下の4種類です。\n\n-   **コンマ切りテキスト**（comma-separated values, **csv**）\n-   **タブ切りテキスト**（tab-separated values, **tsv**）\n-   スペース切りテキスト\n-   固定幅テキスト\n\nこれらのうち、スペース切りテキストについてはデータにスペースが入っていると読み込みが難しくなるため、通常は避けられます。固定幅テキストはやや取り扱いにくいため、Excelからの変換には用いません。したがって、Excelファイルは主にコンマ切りテキストかタブ切りテキストに変換して、Rで読み込むことになります。\n\nExcelファイルからコンマ切り・タブ切りテキストへの変換はExcel上で行います。Excelの「ファイル」メニューから「名前を付けて保存」を選択し、ファイル名の下のドロップダウンリストから「CSV UTF-8 (コンマ区切り)(\\*.csv)」もしくは「テキスト (タブ区切り)(\\*.txt)」を選択します。拡張子である「.csv」や「.txt」は自動的に付与されます。\n\n::: {.callout-tip collapse=\"true\"}\n\n## エンコーディング\n\nテキストには**エンコーディング**というものがあり、日本語テキストは**UTF-8、Shift-JIS（CP932）、EUC-JP**のいずれかのエンコーディングを持ちます。エンコーディングが異なると文字化けを起こします。RのデフォルトのエンコーディングはUTF-8です。WindowsではShift-JISが用いられている場合があるため、エンコーディングに注意が必要となります。\n\n:::\n\n![図8：Excelでコンマ切り・タブ切りテキストを作成する](./image/excel_changeformats.png)\n\n::: {.callout-tip collapse=\"true\"}\n\n## Excelの空欄データ\n\nExcelには「データをセルから消したのに何らかのデータが残る」という謎仕様があります。 空のExcelファイルを作成し（Book1）、G7までを1で埋めます（Book2、下図9）。数値をバックスペースで消して保存すると（Book3）、何故かBook1よりBook3の方がファイルサイズが大きくなります（下図10）。Rからテキスト変換したファイルを読み込むと、この「無いけど残っているデータ」を読み込んでしまうので、エラーが生じることがあります。データをDeleteで削除、もしくは右クリックから削除を選ぶと、この残ったデータを削除することができます。\n\n長い歴史を持つ、代々受け継がれたExcelファイルではこのような謎データがファイルサイズを大きくし、動作を遅くしている場合もありますので、データ数に比べてファイルサイズが大きいExcelファイルがあれば空欄をDeleteしてみることをおすすめします。\n\n![図9：Excelのセルに1を入力し、バックスペースで削除する](./image/book2_excel.png)\n\n![図10：バックスペースで削除すると、ファイルサイズが増える](./image/filesize_excel.png)\n\n:::\n\n### scan関数\n\nまずは、1行のデータを読み込む場合について説明します。1行のデータであれば、`scan`関数を用いて読み込むことができます。`scan`関数の第一引数は文字列のファイル名です。ファイル名を指定するときには、必ず**拡張子を含めて記載します**。`scan`関数には、「`sep`」という引数を指定することができます。`sep`はデータ間の区切り文字を指定するものです。コンマ切りテキスト、CSVであれば「`sep = \",\"`」、タブ切りテキストであれば「`sep = \"\\t\"`」を指定します。`scan`関数の返り値はベクターとなります。\n\nただし、`what`という引数を設定すると、返り値をリストにすることができます。`what`は空のリストを指定する引数で、リストの要素の個数に従い、`scan`で読み取った結果が代入されます。代入の順番は、1つ目がリストの1要素目、2つ目がリストの2要素目...となります。リストの長さより多い要素は再びリストの1要素目に代入されます。\n\n```{r, filename=\"scan関数でテキストファイルを読み込む\"}\nscan(\"./data/scansample.txt\", sep = \",\") # コンマ切りテキストを読み込む\n\nscan(\"./data/scansample.txt\", sep = \",\", what = list(\"\", \"\")) # 出力をリストにする\n```\n\n### read.table関数\n\nExcelから読み込む表は、通常行と列を持つ、テーブルの形をしていますので、データフレームにできると便利です。テキストに変換したExcelの表をデータフレームとして読み込む関数が`read.table`関数です。`read.table`関数は第一引数にテキストファイルのファイル名を取ります。`scan`関数と同様に、ファイル名には拡張子を含める必要があります。\n\n`read.table`関数は`scan`関数と同じく、「`sep`」引数を取ります。`sep`引数には、コンマ切りテキスト、CSVであれば「`sep = \",\"`」、タブ切りテキストであれば「`sep = \"\\t\"`」を指定します。\n\n`read.table`関数はさらに、「`header`」という引数を取ります。この引数に`TRUE`を指定すると（「`header = T`」）、読み込むテキストの1行目を列名として、データを読み込みます。\n\n`read.table`関数でよく用いられる引数はファイル名、`sep`、`header`の3つですが、その他たくさんの引数を取ることができます。`read.table`関数の引数の一覧を以下の表1に示します。\n\n```{r, echo=FALSE}\nd <- readxl::read_excel(\"./data/chapter13_augs_readtable.xlsx\")\nknitr::kable(d, caption=\"表1：read.table関数の引数\")\n```\n\n### read.csv関数、read.delim関数\n\n`read.table`関数の仲間として、csvの読み込み用の`read.csv`関数、タブ切りテキスト読み込み用の`read.delim`関数、固定幅テキストの読み込み用の`read.fwf`関数がRには準備されています。`read.csv`関数は`sep`引数にコンマ、`read.delim`関数は`sep`引数にタブがデフォルト値として設定されており、`sep`引数を入力することなくデータを読み込むことができます。\n\n```{r, eval=FALSE, filename=\"テキストファイルの読み込み\"}\nread.table(\"filename.txt\", sep=\"\\t\", header=T)\nread.table(\"filename.txt\", sep=\"\\t\", header=T, stringAsFactors = T)\nread.csv(\"filename.csv\")\nread.csv2(\"filename.csv\") # ヨーロッパ仕様\nread.delim(\"filename.tsv\")\nread.delim2(\"filename.tsv\") # ヨーロッパ仕様\n\nread.fwf(\"filename.txt\") # 固定幅テキスト\n```\n\n:::{.callout-tip collapse=\"true\"}\n\n## ヨーロッパで準備されたファイルのデータ読み込み\n\nヨーロッパではコンマ（,）をセミコロン（;）、小数点（ピリオド .）をコンマ（,）で記載するため、通常の`read.csv`関数、`read.delim`関数ではテキストファイルをまともに読み込むことができません。ヨーロッパで生成されるテキストファイルの読み込みには、専用の関数（`read.csv2`、`read.delim2`）が設けられています。\n\n:::\n\n#### stringAsFactorsとfileEncoding\n\n`read.table`関数の「`stringAsFactors`」という引数は、昔はTRUEがデフォルトとされており、`read.table`関数で読み込んだ文字列はすべて因子に変換されていました。Rのバージョン4.0.0より`stringAsFactors`のデフォルト値が`FALSE`に変更されたため、現在の`read.table`関数では、文字列は文字列のまま読み込まれます。\n\nWindowsではテキストファイルのエンコーディングがShift JIS（CP932）になっている場合がありますので、「`fileEncoding = \"CP932\"`」を引数に指定しないと読み込めないことがあります。エンコーディングがUTF-8であれば、`fileEncoding`を指定する必要はありません。\n\n\n### クリップボードからの読み込み\n\nRでは、コピーしたテキストをクリップボードから読み込むこともできます。Ctrl+Cなどでコピーしたテキストを読み込む場合には、`read.table`関数の引数に`\"clipboard\"`を指定します。\n\n```{r, eval=FALSE, filename=\"クリップボードの内容を読み込む\"}\nread.table(\"clipboard\")\n```\n\n## データの書き出し\n\nRからのデータの書き出しでは、通常テキストファイルが書き出されます。Excelファイルに直接書き出すこともできなくは無いのですが（[xlsxパッケージ](https://cran.r-project.org/web/packages/xlsx/index.html) [@xlsx_bib]を利用する）、それほど一般的ではありません。データの書き出しに用いられる関数には、`write`関数、`write.table`関数などがあります。\n\n### write・cat関数\n\nベクターや行列などのデータの書き出しには、`write`関数・`cat`関数を用います。`write`関数は`cat`関数のラッパーで、2つの関数の間には大きな差はありません。`cat`関数はオブジェクトをコンソールに表示するために用いられますが、ファイルを出力する事もできます。`print`関数を用いてもコンソールへ表示することはできますが、ファイルを保存することはできません。\n\n`cat`関数、`write`関数は、オブジェクトとファイル名を引数に取ります。共に`sep`引数で区切り文字を指定することができます。\n\n```{r, eval=FALSE, filename=\"cat・write関数でのオブジェクトの表示\"}\nvec <- c(1, 2, 3)\ncat(vec) # consoleにvecを表示\n\nwrite(vec, \"\") # cat関数と同じ（第2引数が無いとファイル保存が行われる）\n\nprint(vec) # print関数でも表示できる\n```\n\n```{r, eval=FALSE, error=TRUE, filename=\"cat・write関数でのファイルの保存\"}\ncat(vec, file=\"cat.txt\")\nwrite(vec, file=\"vector.txt\", sep=\"\\t\")\nprint(vec, \"print.txt\") # エラー\n```\n\n### write.table関数\n\nRでは、データ処理の多くはデータフレームを用いて行います。テキストファイルをデータフレームとして取り込む`read.table`関数とは逆に、データフレームをテキストファイルとして書き出す関数が`write.table`関数です。\n\n`write.table`関数はデータフレームとファイル名を引数に取り、データフレームをそのファイル名のテキストファイルとして書き出します。\n\n`write.table`関数の代表的な引数は、`sep`、`col.names`、`row.names`、`quote`の4つです。`sep`は`read.table`関数と同じく区切り文字を指定する引数です。`col.names`と`row.names`は論理型を取り、`TRUE`であれば列名・行名を保存し、`FALSE`であれば列名・行名を省いて保存します。`quote`も論理型を取り、文字列・因子をダブルクオーテーションで囲むするかどうかを指定します。\n\n`read.table`関数に`read.csv`関数があったように、`write.table`関数にはCSV用の`write.csv`関数があります。`write.csv`関数は`sep`のデフォルト値にコンマが設定されています。ヨーロッパ仕様の`write.csv2`関数もありますが、日本で使用することはまれです。\n\n```{r, eval=FALSE, filename=\"write.table関数\"}\nwrite.table(df_obj, \"filename.txt\", sep = \"\\t\")\n\n# 列名あり、行名なし、ダブルクオーテーションなしで保存\nwrite.table(df_obj, \"filename.txt\", sep = \"\\t\", col.names = T, row.names = F, quote = F) \n\nwrite.csv(df_obj, \"filename.csv\")\nwrite.csv2(df_obj, \"filename.csv\") #  ヨーロッパ仕様\n```\n\n## readr\n\nRのデフォルトのI/Oは上記の通りですが、`read.table`関数、`write.table`関数を用いると、指定する引数が多かったり、読み込んだ列のデータ型が思うように設定されなかったりすることがよく起こります。また、デフォルトの関数群ではその実行速度が遅く、大きなデータを取り扱う場合には読み込みにとても時間がかかる、という問題もあります。\n\nこれらの不都合を解決するI/Oに関するライブラリが`readr`パッケージ [@readr_bib]です。`readr`パッケージは、Rのデフォルトの関数名のピリオドをアンダースコア（`_`）に変換した関数群を備えており、列の型をうまく設定してくれる仕組みを備えています。また、デフォルトの関数よりも実行速度が速いため、大きなデータを取り扱う場合には、`readr`の関数群を用いたほうが良いでしょう。\n\n`readr`パッケージは`tidyverse` [@tidyverse_bib]を構成するライブラリの一つであり、インストール・ロードは`tidyverse`ライブラリのインストール・ロードと同時に行うことができます。\n\n```{r, eval=FALSE, filename=\"readrの読み込み\"}\npacman::p_load(tidyverse)\n```\n\n### readr：テキストデータの読み込み\n\n`readr`でのテキストデータの読み込みには、`read_table`関数を用います。`read_table`関数の使い方は`read.table`関数とほぼ同じです。`read.table`関数と同じく、`read_table`関数も区切り文字を`sep`引数で設定します。`read_table`関数のデフォルトの区切り文字はスペースですので、`sep`を設定しない場合にはスペース切りテキストの読み込みに対応しています。読み込まれたファイルは、`tibble`というデータ型の、データフレームに変換されます。\n\nコンマ切りテキスト（CSV）の読み込みには、`read_csv`が、タブ切りテキスト（TSV）の読み込みには`read_tsv`関数が準備されています。これらの他に、ヨーロッパ仕様のCSVを読み込む`read_csv2`関数、区切り文字を指定する必要がある`read_delim`関数、固定幅テキストの読み込みを行う`read_fwf`関数などがあります。\n\n`readr`パッケージの読み込み関数は圧縮ファイルの読み込みにも対応しており、gzip（.gz）、bzip2（.bz2）、lzma（.xz）、zip（.zip）などの圧縮ファイルを直接読み込むことができます。また、インターネットからテキストファイルを直接読み込むこともできます。インターネットから直接読み込む場合には、テキストファイルが保存されているwebアドレス（`http://`, `https://`, `ftp://` など）をファイル名として設定します。\n\n```{r, eval=FALSE, filename=\"readrでテキストファイルを読み込む\"}\nread_table(\"filename.txt\") # sep=\" \"（スペース切り）がデフォルト\nread_csv(\"filename.csv\") # コンマ切りテキスト\nread_tsv(\"filename.tsv\") # タブ切りテキスト\nread_delim(\"filename.txt\", delim=\"\\t\") # delim引数に区切りを指定\nread_fwf(\"filename.txt\") # 固定幅テキスト\nread_csv2(\"filename.csv\") # ヨーロッパ仕様\n\nread_delim(clipboard()) # クリップボードの読み込み\n\nread_table(\"filename.zip\") # zipファイルも直接読み込める\n```\n\n### tibble\n\n`readr`の読み込み関数は、読み込んだデータを`tibble`というデータ型に変換します。この`tibble`は概ねデータフレームと同じで、取り扱いもデータフレームと同様に行うことができます。\n\n`tibble`は`tibble`関数で、データフレームと同じように作成することができます。また、`as_tibble`関数を用いることで、行列や通常のデータフレームを`tibble`に変換することができます。\n\n`readr`に限らず、`tidyverse`のライブラリ群の関数では返り値を`tibble`とするものが多いです。`tibble`のデータフレームは、表示した時に列のデータ型を表示する、10行以上の行は省略する、列も省略する等の特徴があります。`tibble`については、[16章](./chapter16.html)で詳しく説明します。\n\n```{r, filename=\"tibble\"}\npacman::p_load(tidyverse)\n\ntibble(x = 1:3, y = c(\"a\", \"b\", \"c\"), z = c(T, F, T))\n\nas_tibble(iris)\n```\n\n### readr：テキストファイルの書き出し\n\n`readr`パッケージは`write.table`関数に当たる、テキスト書き出しの関数を備えています。`readr`が備えている関数は、データフレームをCSVとして保存する`write_csv`関数、タブ切りテキストとして保存する`write_tsv`関数、スペース切りテキストとして保存する`write_delim`関数があります。\n\n`read_table`関数と同様に、`write_`関数もテキストの圧縮ファイルの保存に対応しています。対応している圧縮ファイルはgzip（.gz）、bzip2（.bz2）、lzma（.xz）です。\n\n```{r, eval=FALSE, filename=\"readrでのファイル書き出し\"}\nwrite_csv(x, \"filename.csv\") # コンマ切り\nwrite_tsv(x, \"filename.tsv\") # タブ切り\nwrite_delim(x, \"filename.txt\") # スペース切り\nwrite_csv2(x, \"filename.csv\") # ヨーロッパ仕様\n\nwrite_csv(x, \"filename.gz\") # gzipで圧縮して出力\nwrite_csv(x, \"filename.bz2\") # bzip2で圧縮して出力\nwrite_csv(x, \"filename.xz\") # lzmaで圧縮して出力\n```\n\n## readxl\n\n私のようなヘボいR使いは昔から上記のようにExcelをテキストファイルに変換してはRに読み込むというステップを踏み続けてきました。このExcelからテキストへの変換の手間を無くすライブラリが`readxl`パッケージ [@readxl_bib]です。\n\n`readxl`パッケージも`tidyverse`と同じく、[Posit Software](https://posit.co/)が開発しているライブラリですが、`tidyverse`には含まれていません。`tidyverse`とは別に、`readxl`パッケージを独立に読み込む必要があります。\n\n`readxl`パッケージで使用する関数は、ほぼ`read_excel`関数だけです。`read_excel`関数は、.xlsおよび.xlsxファイルの読み込みに対応しており、ファイル名で指定したExcelファイルからテーブルを`tibble`として読み込みます。`read_excel`関数では`sheet`という引数を設定することができます。`read_excel`関数は`sheet`に設定した番号（もしくはシート名）のシートを読み込みます。\n\n`readxl`パッケージは`read_excel`関数以外に、Excelファイルのメタデータ読み込みのための関数などを備えています。\n\n```{r, eval=FALSE, filename=\"readxlでExcelファイルを読み込む\"}\npacman::p_load(readxl)\nread_excel(\"filename.xlsx\", sheet = 1) # read_xlsxが読み込まれる\nread_excel(\"filename.xls\", sheet = 1) # read_xlsが読み込まれる\n```\n\n::: {.Callout-tip collapse=\"true\"}\n\n## Excelファイルの種類\n\nExcelには昔使用されていたファイルである.xlsファイルと、Excel2007から使われている.xlsxファイルがあります。\n\n.xlsファイルはバイナリファイルで、内部的には1と0でデータが表現されています。\n\n.xlsxファイルは実際にはzipファイルで、xmlというフォーマットで記載されたデータがzipファイルのフォルダ内に含まれています。.xlsxファイルは拡張子を.zipに書き換えるとzipファイルとして解凍することができ、中身を確認することができます。\n\n.xlsと.xlsxは全然違うファイルですが、`read_excel`関数は拡張子によって.xlsを読み込む`read_xls`関数と.xlsxを読み込む`read_xlsx`関数を切り替えて呼び出しています。\n\n:::\n\n#### その他のデータ読み込みライブラリ\n\n[Posit Software](https://posit.co/)は`readxl`の他にも、多数のデータ読み込み用ライブラリを開発しています。以下に示したライブラリを利用することで、様々なデータ型のファイルをRで読み込み、統計に用いることができます。\n\n- [`googlesheets4`](https://googlesheets4.tidyverse.org/)：Googleスプレッドシートの読み込み [@googlesheets4_bib]\n- [`haven`](https://haven.tidyverse.org/)：SAS、SPSS、Stataファイルの読み込み [@haven_bib]\n- [`jsonlite`](https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html)：jsonファイルの読み込み [@jsonlite_bib]\n- [`httr2`](https://httr2.r-lib.org/)：Webからの読み込み [@httr2_bib]\n- [`rvest`](https://rvest.tidyverse.org/)：スクレイピング用ライブラリ [@rvest_bib]\n- [`DBI`](https://dbi.r-dbi.org/)：データベースの読み込み [@DBI_bib]\n\n## data.table\n\n近年のデータサイエンスでは、時に数百万～数千億程度のデータを取り扱うこともあります。個人のPCでRを使ってこのような超大規模のデータを取り扱うのは現実的ではありませんが、数万～数十万行ぐらいのデータをPCで取り扱うことは増えてきています。例えば、生物分野では[マイクロアレイ](https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%A2%E3%83%AC%E3%82%A4)や[高速シークエンサー](https://jp.illumina.com/content/dam/illumina-marketing/apac/japan/documents/pdf/primer_illumina_sequencing_introduction-j.pdf)のデータは数万～数十万行で、分析を個人が、自分のPCで取り扱うこともあるかと思います。自分でマイクロアレイやシークエンサーを使ってデータを出さなくても、[GEO Dataset](https://www.ncbi.nlm.nih.gov/gds)などからデータを取得して、解析してみることも一般的に行われています。\n\nこのような超巨大データを取り扱う場合、R謹製の`read.table`関数では手に余りますし、`read_table`関数を用いても、読み込んだ後のデータ処理が重く、取り扱いに苦労します。このような大規模データの読み込みに特化したライブラリが、`data.table`パッケージ [@datatable_bib]です。\n\n[`data.table`](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html)パッケージは、大規模データを読み込み、Rで高速に利用できるよう設計されたライブラリです。\n\n`data.table`パッケージでデータを読み込むときには、`fread`関数を用います。`fread`関数はhtmlからの読み込みにも対応しています。読み込んだデータは`data.table`クラスのオブジェクトとなります。\n\n```{r, eval=FALSE, filename=\"data.tableパッケージのfread関数でファイルを読み込む\"}\npacman::p_load(data.table)\n\n# flights14（NYのフライトデータ、25万行11列）をinputとする\ninput <- \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv\"\n\n# freadで読み込む\nflights <- fread(input) # 219MBのデータ読み込み\nclass(flights)\n\ndim(flights)\n```\n\n`data.table`の取り扱いの方法はほぼデータフレームと同じです。`data.table`はインデックスからデータの要約ができる機構を備えています。ただし、後の章で説明する`tidyr`・`dplyr`の関数も適用できますので、データの要約は`tidyr`・`dplyr`で行ってもよいでしょう。\n\n```{r, eval=FALSE, filename=\"data.tableクラスの取り扱い\"}\nflights[5, 1] # 通常のインデックスに対応\n\nflights[1:5] # 行列を指定しない場合は、行のインデックスになる\n\nflights[1:5, 2:5] # ベクターでの読み出しにも対応\n\nhead(flights[origin == \"JFK\", ]) # originがJFKの行を選択\n\nhead(flights[, .(month, day)]) # monthとdayの列を選択\n\nhead(flights$origin) # originの列を抽出\n```\n\n:::{.callout-tip collapse=\"true\"}\n\n## data.tableでのデータ取り扱い\n\n `data.table`が使われ始めた頃は、`data.table`オブジェクトの取り扱い方がデータフレームとは大きく異なっており、かなりとっつきにくかったのですが、現在ではデータフレームとほぼ同じ取り扱いができるようになっています。\n\n:::\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"output-file":"chapter13.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","lightbox":"auto","bibliography":["references.bib"],"editor":"source","theme":{"light":"united","dark":"cyborg"},"toc-expand":2,"code-block-bg":true,"code-block-border-left":"#31BAE9"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}