{
  "hash": "436b4df65a830d4642f59be15048a82c",
  "result": {
    "engine": "knitr",
    "markdown": "# 因子（factor）\n\n\n\n\n\n**因子**はほぼRにのみに存在する特徴的なクラスです。因子は**カテゴリカル変数**（男性と女性、病気の有無など）を表現するためのもので、統計解析において重要な役割を果たします。ただし、因子の挙動はやや複雑で、文字列のつもりが因子だった、因子だと思っていたら文字列だった、などという場合が多々発生します。\n\n因子を作るときには、`factor`関数を用います。引数には文字列や数値のベクターを取ります。また、`gl`関数を用いても因子を作成することができます。\n\n\n::: {.cell filename='因子を作成する'}\n\n```{.r .cell-code}\nx <- c(\"dog\", \"cat\", \"pig\", \"horse\")\nfactor(x)\n## [1] dog   cat   pig   horse\n## Levels: cat dog horse pig\n\ngl(2, 8, labels=c(\"A\", \"B\")) # AとBを８回ずつ繰り返す因子\n##  [1] A A A A A A A A B B B B B B B B\n## Levels: A B\n\n# 4つのラベルを1回ずつ16個まで繰り返す因子\ngl(4, 1, 16, labels=c(\"cat\", \"dog\", \"pig\", \"rat\")) \n##  [1] cat dog pig rat cat dog pig rat cat dog pig rat cat dog pig rat\n## Levels: cat dog pig rat\n```\n:::\n\n\n因子と文字列を表示したときの違いは、\n\n-   表示したときにダブルクオーテーションがあるかどうか（あれば文字列、なければ因子）\n-   表示したときにLevelsが表示されるか（表示されなければ文字列、表示されれば因子）\n\nの2点です。文字列なのか因子なのかわからないときには、コンソールに表示してみるとよいでしょう。\n\n\n::: {.cell filename='因子と文字列の違い'}\n\n```{.r .cell-code}\nx <- rep(x, c(5, 4, 3, 2))\nx # これは文字列のベクター（ダブルクオーテーション付き）\n##  [1] \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"cat\"   \"cat\"   \"cat\"   \"cat\"  \n## [10] \"pig\"   \"pig\"   \"pig\"   \"horse\" \"horse\"\n\nfx <- factor(x)\nfx # こちらは因子のベクター（Levelsを表示）\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig\n```\n:::\n\n\n## 因子のレベル（Levels）\n\n因子には**レベル（Levels）**というアトリビュートが存在します。レベルは、因子の種類と順番を指すアトリビュートです。文字列を因子に変えた場合には、アルファベット順にレベルが付与され、数値を因子に変えた場合には、数値の小さいものからレベルが付与されます。レベルの順序は、**グラフや統計結果の表示の順番**に影響を与えます。\n\n因子のレベルを確認する関数には、`nlevels`関数と`levels`関数の2つが存在します。`nlevels`関数は因子のレベルの数を返す関数です。`levels`関数は因子のレベルをそのレベルの順番にそって返します。\n\n\n::: {.cell filename='因子のレベルとその順番'}\n\n```{.r .cell-code}\nnlevels(fx)\n## [1] 4\n\nlevels(fx) # levelsはアルファベット順になる\n## [1] \"cat\"   \"dog\"   \"horse\" \"pig\"\n\nx2 <- c(4, 3, 2, 1)\nfx2 <- factor(x2)\nlevels(fx2) # levelsは数値順になる\n## [1] \"1\" \"2\" \"3\" \"4\"\n```\n:::\n\n\n## 因子のクラスと型\n\n因子の**クラスはfactor、型はnumeric（integer）**です。つまり、**因子は整数にレベルがラベル付けされているクラス**となります。\n\n\n::: {.cell filename='因子のクラス・型'}\n\n```{.r .cell-code}\nclass(fx)\n## [1] \"factor\"\nmode(fx)\n## [1] \"numeric\"\ntypeof(fx)\n## [1] \"integer\"\n\n# 文字列から作った因子もnumericとなる\nfch <- c(\"dog\", \"cat\")\nfch <- factor(fch)\nmode(fch)\n## [1] \"numeric\"\n```\n:::\n\n\n因子はそもそも型が数値ですので、`as.numeric`関数で数値に変換できます。このときの数値はレベルの順番に1、2、3...となります。また、因子を`as.character`関数を用いて文字列に変換することもできます。文字列に変換した場合には、レベルの名前がそのまま出力されます。\n\nまた、ベクターには、名前（names）というアトリビュートがあるのですが、因子のレベルはこの名前とは異なります。因子のベクターにも名前は別途つけることができますが、過剰に複雑になるので避けた方が良いでしょう。\n\n\n::: {.cell filename='因子から数値・文字列への変換'}\n\n```{.r .cell-code}\nfx\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig\n\nas.numeric(fx) # levelsの順に番号が付く\n##  [1] 2 2 2 2 2 1 1 1 1 4 4 4 3 3\n\nas.character(fx) # 文字列には直接変換できる\n##  [1] \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"cat\"   \"cat\"   \"cat\"   \"cat\"  \n## [10] \"pig\"   \"pig\"   \"pig\"   \"horse\" \"horse\"\n\n# factorの文字はnamesとしては設定されていない（levelsはnamesではない）\nnames(fx) \n## NULL\n\nfx1 <- fx\nnames(fx1) <- rep(c(\"rat\", \"mouse\", \"sheep\", \"monkey\"), c(2, 3, 4, 5))\nfx1 # 名前付きベクターの因子\n##    rat    rat  mouse  mouse  mouse  sheep  sheep  sheep  sheep monkey monkey \n##    dog    dog    dog    dog    dog    cat    cat    cat    cat    pig    pig \n## monkey monkey monkey \n##    pig  horse  horse \n## Levels: cat dog horse pig\n```\n:::\n\n\n因子の各レベルの要素の個数を数える場合には、`table`関数を用います。`table`関数を用いると、各レベルと、そのレベルの要素の数が返ってきます。同様に、`summary`関数でも要素の数を数えることができます。\n\n\n::: {.cell filename='因子の個数を数える：table関数'}\n\n```{.r .cell-code}\ntable(fx)\n## fx\n##   cat   dog horse   pig \n##     4     5     2     3\n\nsummary(fx)\n##   cat   dog horse   pig \n##     4     5     2     3\n```\n:::\n\n\n## レベルの順序を変更する\n\nレベルの順序は、因子を作成するときに`factor`関数の引数に`levels`を指定することで変更できます。`levels`には因子の要素のベクターで指定します。この`levels`に指定した順番に、レベルの順序が決まります。\n\n\n::: {.cell filename='レベルの順序を変更する'}\n\n```{.r .cell-code}\nfx\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig\nfx2 <- factor(fx, levels = c(\"cat\", \"horse\", \"pig\", \"dog\"))\n\nlevels(fx) # レベル順はcat, dog, horse, pig\n## [1] \"cat\"   \"dog\"   \"horse\" \"pig\"\n\nlevels(fx2) # レベルの順序が上のlevelsの順に変更されている\n## [1] \"cat\"   \"horse\" \"pig\"   \"dog\"\n\nas.numeric(fx) # 元の順序\n##  [1] 2 2 2 2 2 1 1 1 1 4 4 4 3 3\n\nas.numeric(fx2) # 変更後の順序\n##  [1] 4 4 4 4 4 1 1 1 1 3 3 3 2 2\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：因子に関連する関数\n\n|関数名            |因子xに適用される演算                |\n|:-----------------|:------------------------------------|\n|factor(x, levels) |因子を作成する・レベルの順序を変える |\n|levels(x)         |レベルを表示する                     |\n|nlevels(x)        |レベルの数を表示する                 |\n|table(x)          |各レベルの要素数を表示する           |\n\n\n:::\n:::\n\n\n## forcats\n\nRでは因子のレベル順を変更し、グラフや統計結果の表示順を定める場合があります。特に統計学的検定の計算では、対照群（Control）と処理群（Treatment）が因子の順番によって決まる場合があり、因子の順序が計算上重要となります。\n\nデフォルトのRの関数群でも因子の順序などを編集することはできますが、因子の演算を行う専門のライブラリである`forcats` [@forcats_bib]を用いると、より簡潔に、統一感のある因子の演算を行うことができます。`forcats`も`tidyverse` [@tidyverse_bib]に含まれるライブラリの一つです。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表2：forcatsの関数\n\n|関数名                              |因子xに適用される演算                       |\n|:-----------------------------------|:-------------------------------------------|\n|fct_count(x)                        |各レベルの要素の数を返す                    |\n|fct_match(x, pattern)               |patternのレベルであればTRUEを返す           |\n|fct_unique(x)                       |各レベルから要素を1つずつ返す               |\n|fct_c(x, y)                         |因子を結合する                              |\n|fct_unify(list(x, y))               |リスト内の因子間でレベルを追加する          |\n|fct_relevel(x, levels)              |レベルを付け直す                            |\n|fct_infreq(x)                       |レベルの要素の数順にレベルをつけ直す        |\n|fct_inorder(x)                      |前にある要素ほど前のレベルにする            |\n|fct_rev(x)                          |レベルを逆順にする                          |\n|fct_shift(x)                        |レベルの順を1つずらす                       |\n|fct_shuffle(x)                      |レベルをランダムに並べ替える                |\n|fct_recode(x, newlevel=\"oldlevel\")  |oldlevelのラベルをnewlevelにつけ直す        |\n|fct_anon(x)                         |レベル名を匿名化する                        |\n|fct_collupse(x, newlevel=c(levels)) |2つ以上のレベルを1つにまとめる              |\n|fct_lump_min(x, min)                |minで指定した数以上のレベルをotherにする    |\n|fct_other(x, keep)                  |keepで指定したレベル以外の因子をotherにする |\n\n\n:::\n:::\n\n\n### 因子の確認\n\n`fct_count`関数は`table`関数とほぼ同じ関数で、因子の要素数を返しますが、結果をデータフレーム（正確にはtibbleというもの）で返す点が`table`関数とは異なります。\n\n`fct_match`関数は、パターンとしてレベル名を設定し、そのレベルと一致する要素では`TRUE`、一致しない要素には`FALSE`を返します。\n\n`fct_unique`関数は`levels`関数とほぼ同じですが、`levels`関数の返り値が文字列なのに対して、`fct_unique`関数は因子を返す点が異なります。\n\n\n::: {.cell filename='forcats 因子を確認する'}\n\n```{.r .cell-code}\n# tidyverseをロードすると、forcatもロードされる\npacman::p_load(tidyverse)\n\nfx\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig\n\n# table関数と同じ変換をデータフレーム（正確にはtibble）を出力として行う\nfct_count(fx) \n## # A tibble: 4 × 2\n##   f         n\n##   <fct> <int>\n## 1 cat       4\n## 2 dog       5\n## 3 horse     2\n## 4 pig       3\n\nfct_match(fx, \"dog\") # 因子dogを探す関数\n##  [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE\n\nfct_unique(fx) # levelsとほとんど同じ関数(因子を返す、levelsは文字列を返す)\n## [1] cat   dog   horse pig  \n## Levels: cat dog horse pig\n```\n:::\n\n\n### 因子を結合する\n\n因子をつなぐときに用いるのが、`fct_c`関数と`fct_unity`関数です。`fct_c`関数は`c`関数と同じですが、因子のリストを引数に取れるという特徴があります。`fact_unify`関数は引数にリストを取り、お互いにレベルを追加するところが異なります。\n\n\n::: {.cell filename='forcats：因子を結合する'}\n\n```{.r .cell-code}\nfx3 <- factor(rep(c(\"rat\", \"mouse\", \"sheep\"), c(3, 4, 5)))\n\nc(fx, fx3)\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse rat   rat   rat   mouse mouse mouse mouse sheep sheep sheep\n## [25] sheep sheep\n## Levels: cat dog horse pig mouse rat sheep\n\nfct_c(fx, fx3) # レベルが追加される(c関数でつないでもほぼ同じ)\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse rat   rat   rat   mouse mouse mouse mouse sheep sheep sheep\n## [25] sheep sheep\n## Levels: cat dog horse pig mouse rat sheep\n\nfct_unify(list(fx, fx3)) # 因子のリストにそれぞれレベルを追加する\n## [[1]]\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig mouse rat sheep\n## \n## [[2]]\n##  [1] rat   rat   rat   mouse mouse mouse mouse sheep sheep sheep sheep sheep\n## Levels: cat dog horse pig mouse rat sheep\n```\n:::\n\n\n### レベルの操作\n\n因子のレベルを付け直すのが`fct_relevel`関数です。`factor`関数に`levels`引数を取るのとほぼ同じことができます。\n\n`fct_infreq`関数は因子のレベルを因子の個数順（多いものが前、少ないものが後）に、`fct_inorder`関数は因子のベクターで前に出てきたものをより前にする形でレベルを変更するものです。\n\n`fct_rev`関数はレベルを逆順に、`fct_shift`関数は一番前のレベルを一番最後にシフトし、`fct_shuffle`関数はレベルの順序をランダムに入れ替える関数です。\n\n\n::: {.cell filename='forcats：レベルを操作する'}\n\n```{.r .cell-code}\nfct_relevel(fx, c(\"dog\", \"cat\", \"pig\", \"horse\")) # factor(fx, levels=c(\"dog\", \"cat\", \"pig\", \"horse\"))と同じ\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: dog cat pig horse\n\nfct_infreq(fx) # 要素が多いものから順番に並べ替える\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: dog cat pig horse\n\nfct_inorder(fx) # 要素が前にあるものをレベルの前に変更する\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: dog cat pig horse\n\nfct_rev(fx) # レベルを逆順にする\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: pig horse dog cat\n\nfct_shift(fx) # レベルを1つずらす\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: dog horse pig cat\n\nfct_shuffle(fx) # レベルをランダムに並べ替える\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig\n```\n:::\n\n\n### レベル名の変更\n\n`fct_recode`関数は因子名を別名に付け替え、`fct_anon`関数は因子名を匿名化（anonymize）するものです。`fct_collapse`関数は因子の複数のレベルを1つにまとめ、`fct_lump_min`関数は定めた数のレベル以外のレベルをすべてotherに変えます。`fct_other`関数は`keep`引数で指定したレベル以外をotherに変えます。\n\nいずれも、データをRに取り込んだ後に、余分な因子を処理したり、匿名化することで個人情報等に対応したりするために用いるものです。\n\n\n::: {.cell filename='forcats：レベル名を変更する'}\n\n```{.r .cell-code}\nfct_recode(fx, mouse=\"dog\", rat=\"cat\", monkey=\"pig\", cow=\"horse\") # ラベルを付け替える\n##  [1] mouse  mouse  mouse  mouse  mouse  rat    rat    rat    rat    monkey\n## [11] monkey monkey cow    cow   \n## Levels: rat mouse cow monkey\n\nfct_anon(fx) # 因子を匿名化（anonymize）する\n##  [1] 4 4 4 4 4 2 2 2 2 1 1 1 3 3\n## Levels: 1 2 3 4\n\nfct_collapse(fx, dogcat = c(\"dog\", \"cat\")) # レベルを結合する\n##  [1] dogcat dogcat dogcat dogcat dogcat dogcat dogcat dogcat dogcat pig   \n## [11] pig    pig    horse  horse \n## Levels: dogcat horse pig\n\nfct_lump_min(fx, min=2) # 2つ以外のレベルをotherに変える\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n## [13] horse horse\n## Levels: cat dog horse pig\n\nfct_other(fx, keep=c(\"dog\", \"cat\")) # keep以外のレベルをotherに変える\n##  [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   Other Other Other\n## [13] Other Other\n## Levels: cat dog Other\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}