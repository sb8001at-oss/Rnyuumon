{
  "hash": "3e01afe6feb565939f5965d29bec438d",
  "result": {
    "markdown": "# 因子（factor）\n\n因子はほぼRにのみ存在する特徴的なクラスです．因子はカテゴリカル変数（男性と女性，病気の有無など）を表現するためのもので，統計解析において重要な役割を果たします．ただし，因子の挙動はやや複雑で，文字列のつもりが因子だった，因子だと思っていたら文字列だった，などという場合が多々発生します．\n\n因子を作るときには，<font color=\"red\">**factor関数**</font>を用います．引数には文字列や数値のベクターを取ります．\n\n\n::: {.cell filename='因子を作成する'}\n\n```{.r .cell-code}\nx <- c(\"dog\", \"cat\", \"pig\", \"horse\")\nfactor(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] dog   cat   pig   horse\nLevels: cat dog horse pig\n```\n:::\n:::\n\n\n因子と文字列を表示したときの違いは，\n\n-   表示したときにダブルクオーテーションがあるかどうか（あれば文字列，なければ因子）\n-   表示したときにLevelsが表示されるか（表示されなければ文字列，表示されれば因子）\n\nの2点です．文字列なのか因子なのかわからないときには，コンソールに表示してみるとよいでしょう．\n\n\n::: {.cell filename='因子と文字列の違い'}\n\n```{.r .cell-code}\nx <- rep(x, c(5, 4, 3, 2))\nx # これは文字列のベクター（ダブルクオーテーション付き）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"cat\"   \"cat\"   \"cat\"   \"cat\"  \n[10] \"pig\"   \"pig\"   \"pig\"   \"horse\" \"horse\"\n```\n:::\n\n```{.r .cell-code}\nfx <- factor(x)\nfx # こちらは因子のベクター（Levelsを表示）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: cat dog horse pig\n```\n:::\n:::\n\n\n## 因子のレベル（Levels）\n\n因子にはレベル（Levels）というアトリビュートが存在します．レベルは，因子の種類と順番を指すアトリビュートです．文字列を因子に変えた場合には，アルファベット順にレベルが付与され，数値を因子に変えた場合には，数値の小さいものからレベルが付与されます．レベルの順序は，**グラフや統計結果の表示の順番**に影響を与えます．\n\n因子のレベルを確認する関数として，<font color = \"red\">**nlevels関数とlevels関数**</font>の2つが存在します．nlevels関数は因子のレベルの数を返す関数です．levels関数は因子のレベルをそのレベルの順番にそって返します．\n\n\n::: {.cell filename='因子のレベルとその順番'}\n\n```{.r .cell-code}\nnlevels(fx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nlevels(fx) # levelsはアルファベット順になる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cat\"   \"dog\"   \"horse\" \"pig\"  \n```\n:::\n\n```{.r .cell-code}\nx2 <- c(4, 3, 2, 1)\nfx2 <- factor(x2)\nlevels(fx2) # levelsは数値順になる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\"\n```\n:::\n:::\n\n\n## 因子のクラスと型\n\n因子は**クラスがfactor，型はnumeric（integer）**です．つまり，**因子は整数にレベルがラベル付けされているクラス**となります．\n\n\n::: {.cell filename='因子のクラス・型'}\n\n```{.r .cell-code}\nclass(fx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nmode(fx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(fx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n因子はそもそも型が数値ですので，as.numericで数値に変換できます．このときの数値はレベルの順番に1，2，3...となります．また，因子を文字列に変換することもできます．文字列に変換した場合には，レベルの名前がそのまま出力されます．\n\nまた，ベクターには，名前（names）というアトリビュートがあるのですが，因子のレベルはこの名前とは異なります．因子のベクターにも名前は別途つけることができます．\n\n\n::: {.cell filename='因子から数値・文字列への変換'}\n\n```{.r .cell-code}\nas.numeric(fx) # levelsの順に番号が付く\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 2 2 2 1 1 1 1 4 4 4 3 3\n```\n:::\n\n```{.r .cell-code}\nas.character(fx) # 文字列には直接変換できる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"dog\"   \"cat\"   \"cat\"   \"cat\"   \"cat\"  \n[10] \"pig\"   \"pig\"   \"pig\"   \"horse\" \"horse\"\n```\n:::\n\n```{.r .cell-code}\n# factorの文字はnamesとしては設定されていない（levelsはnamesではない）\nnames(fx) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nfx1 <- fx\nnames(fx1) <- rep(c(\"rat\", \"mouse\", \"sheep\", \"monkey\"), c(2, 3, 4, 5))\nfx1 # 名前付きベクターの因子\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   rat    rat  mouse  mouse  mouse  sheep  sheep  sheep  sheep monkey monkey \n   dog    dog    dog    dog    dog    cat    cat    cat    cat    pig    pig \nmonkey monkey monkey \n   pig  horse  horse \nLevels: cat dog horse pig\n```\n:::\n:::\n\n\n因子の各レベルの要素の個数を数える場合には，<font color = \"red\">**table関数**</font>を用います．table関数を用いると，各レベルと，そのレベルの要素の数が返ってきます．同様に，**summary関数**でも要素の数を数えることができます．\n\n\n::: {.cell filename='因子の個数を数える：table関数'}\n\n```{.r .cell-code}\ntable(fx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfx\n  cat   dog horse   pig \n    4     5     2     3 \n```\n:::\n\n```{.r .cell-code}\nsummary(fx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  cat   dog horse   pig \n    4     5     2     3 \n```\n:::\n:::\n\n\n## レベルの順序を変更する\n\nレベルの順序は，因子を作成するときにfactor関数の引数に，<font color = \"red\">**levels**</font>を指定することで変更できます．levelsには因子の要素のベクターで指定します．このlevelsに指定した順番に，レベルの順序が決まります．\n\n\n::: {.cell filename='レベルの順序を変更する'}\n\n```{.r .cell-code}\nfx2 <- factor(fx, levels = c(\"cat\", \"horse\", \"pig\", \"dog\"))\nlevels(fx) # レベル順はcat, horse, pig, dog\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cat\"   \"dog\"   \"horse\" \"pig\"  \n```\n:::\n\n```{.r .cell-code}\nlevels(fx2) # レベルの順序が上のlevelsの順に変更されている\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cat\"   \"horse\" \"pig\"   \"dog\"  \n```\n:::\n\n```{.r .cell-code}\nas.numeric(fx) # 元の順序\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2 2 2 2 2 1 1 1 1 4 4 4 3 3\n```\n:::\n\n```{.r .cell-code}\nas.numeric(fx2) # 変更後の順序\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 1 1 1 1 3 3 3 2 2\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表1：因子に関連する関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> 因子xに適用される演算 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> factor(x, levels) </td>\n   <td style=\"text-align:left;\"> 因子を作成する・レベルの順序を変える </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> levels(x) </td>\n   <td style=\"text-align:left;\"> レベルを表示する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> nlevels(x) </td>\n   <td style=\"text-align:left;\"> レベルの数を表示する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> table(x) </td>\n   <td style=\"text-align:left;\"> 各レベルの要素数を表示する </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## forcats\n\nRでは因子のレベル順を変更し，グラフや統計結果の表示順を定める場合があります．特に統計学的検定の計算では，対照群（Control）と処理群（Treat）が因子の順番によって決まる場合があり，因子の順序が計算上重要となります．デフォルトのRの関数群でも因子の順序などを編集することはできますが，因子の演算を行う専門のライブラリである<font color = \"red\">**forcats**</font>を用いると，より簡潔に，統一感のある因子の演算を行うことができます．forcatsもtidyverseに含まれるライブラリの一つです．\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表2：forcatsの関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> 因子xに適用される演算 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> fct_count(x) </td>\n   <td style=\"text-align:left;\"> 各レベルの要素の数を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_match(x, pattern) </td>\n   <td style=\"text-align:left;\"> patternのレベルであればTRUEを返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_unique(x) </td>\n   <td style=\"text-align:left;\"> 各レベルから要素を1つずつ返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_c(x, y) </td>\n   <td style=\"text-align:left;\"> 因子を結合する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_unify(list(x, y)) </td>\n   <td style=\"text-align:left;\"> リスト内の因子間でレベルを追加する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_relevel(x, levels) </td>\n   <td style=\"text-align:left;\"> レベルを付け直す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_infreq(x) </td>\n   <td style=\"text-align:left;\"> レベルの要素の数順にレベルをつけ直す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_inorder(x) </td>\n   <td style=\"text-align:left;\"> 前にある要素ほど前のレベルにする </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_rev(x) </td>\n   <td style=\"text-align:left;\"> レベルを逆順にする </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_shift(x) </td>\n   <td style=\"text-align:left;\"> レベルの順を1つずらす </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_shuffle(x) </td>\n   <td style=\"text-align:left;\"> レベルをランダムに並べ替える </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_recode(x, newlevel=&quot;oldlevel&quot;) </td>\n   <td style=\"text-align:left;\"> oldlevelのラベルをnewlevelにつけ直す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_anon(x) </td>\n   <td style=\"text-align:left;\"> レベル名を匿名化する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_collupse(x, newlevel=c(levels)) </td>\n   <td style=\"text-align:left;\"> 2つ以上のレベルを1つにまとめる </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_lump_min(x, min) </td>\n   <td style=\"text-align:left;\"> minで指定した数以上のレベルをotherにする </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fct_other(x, keep) </td>\n   <td style=\"text-align:left;\"> keepで指定したレベル以外の因子をotherにする </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### forcats 因子の確認：fct_count，fct_match，fct_unique\n\n**fct_count関数**ははtable関数とほぼ同じですが，結果をデータフレーム（正確にはtibbleというもの）で返します．\n\n**fct_match関数**は，パターンとしてレベル名を設定し，そのレベルと一致する要素ではTRUE，一致しない要素にはFALSEを返します．\n\n**fct_unique関数**はlevels関数とほぼ同じですが，levels関数の返り値が文字列なのに対して，fct_unique関数は因子を返す点が異なります．\n\n\n::: {.cell filename='forcats 因子を確認する'}\n\n```{.r .cell-code}\n# tidyverseをロードすると，forcatもロードされる\npacman::p_load(tidyverse)\n\nfx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: cat dog horse pig\n```\n:::\n\n```{.r .cell-code}\n# table関数と同じことをデータフレーム（正確にはtibble）を出力として行う\nfct_count(fx) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 2\n  f         n\n  <fct> <int>\n1 cat       4\n2 dog       5\n3 horse     2\n4 pig       3\n```\n:::\n\n```{.r .cell-code}\nfct_match(fx, \"dog\") # 因子dogを探す関数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nfct_unique(fx) # levelsとほとんど同じ関数(因子を返す、levelsは文字列を返す)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] cat   dog   horse pig  \nLevels: cat dog horse pig\n```\n:::\n:::\n\n\n### forcats 因子を結合する：fct_c，fct_unity\n\n因子をつなぐときに用いるのが，fct_c関数とfct_unity関数です．fct_c関数はc関数と同じですので，特に用いる理由はありません．fact_unify関数は引数にリストを取り，お互いにレベルを追加するところが異なります．\n\n\n::: {.cell filename='forcats：因子を結合する'}\n\n```{.r .cell-code}\nfx3 <- factor(rep(c(\"rat\", \"mouse\", \"sheep\"), c(3, 4, 5)))\n\nc(fx, fx3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse rat   rat   rat   mouse mouse mouse mouse sheep sheep sheep\n[25] sheep sheep\nLevels: cat dog horse pig mouse rat sheep\n```\n:::\n\n```{.r .cell-code}\nfct_c(fx, fx3) # レベルが追加される(c関数でつないでもほぼ同じ)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse rat   rat   rat   mouse mouse mouse mouse sheep sheep sheep\n[25] sheep sheep\nLevels: cat dog horse pig mouse rat sheep\n```\n:::\n\n```{.r .cell-code}\nfct_unify(list(fx, fx3)) # 因子のリストにそれぞれレベルを追加する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: cat dog horse pig mouse rat sheep\n\n[[2]]\n [1] rat   rat   rat   mouse mouse mouse mouse sheep sheep sheep sheep sheep\nLevels: cat dog horse pig mouse rat sheep\n```\n:::\n:::\n\n\n### forcats レベルの操作：fct_relevel，fct_infreq，fct_inorder，fct_rev，fct_shift，fct_shuffle\n\n因子のレベルを付け直すのが**fct_relevel関数**です．factor関数にlevels引数を取るのとほぼ同じことができます．fct_infreq関数は因子のレベルを因子の個数順（多いものが前，少ないものが後）に，fct_inorder関数は因子のベクターで前に出てきたものをより前にレベルを変更するものです．fct_rev関数はレベルを逆順に，fct_shift関数は一番前のレベルを一番最後にシフトし，fct_shuffle関数はレベルの順序をランダムに入れ替える関数です．\n\n\n::: {.cell filename='forcats：レベルを操作する'}\n\n```{.r .cell-code}\nfct_relevel(fx, c(\"dog\", \"cat\", \"pig\", \"horse\")) # factor(fx, levels=c(\"dog\", \"cat\", \"pig\", \"horse\"))と同じ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: dog cat pig horse\n```\n:::\n\n```{.r .cell-code}\nfct_infreq(fx) # 要素が多いものから順番に並べ替える\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: dog cat pig horse\n```\n:::\n\n```{.r .cell-code}\nfct_inorder(fx) # 要素が前にあるものをレベルの前に変更する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: dog cat pig horse\n```\n:::\n\n```{.r .cell-code}\nfct_rev(fx) # レベルを逆順にする\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: pig horse dog cat\n```\n:::\n\n```{.r .cell-code}\nfct_shift(fx) # レベルを1つずらす\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: dog horse pig cat\n```\n:::\n\n```{.r .cell-code}\nfct_shuffle(fx) # レベルをランダムに並べ替える\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: horse cat dog pig\n```\n:::\n:::\n\n\n### forcats レベル名の変更：fct_recode，fct_anon，fct_collapse，fct_lump_min，fct_other\n\nfct_recode関数は因子名を別名に付け替え，fct_anon関数は因子名を匿名化（anonymize）するものです．fct_collupse関数は因子の複数のレベルを1つにまとめ，fct_lump_min関数は定めた数のレベル以外のレベルをすべてotherに変えます．fct_other関数はkeep引数で指定したレベル以外をotherに変えます．いずれも，データをRに取り込んだ後に，余分な因子を処理したり，匿名化することで個人情報等に対応するために用いるものです．\n\n\n::: {.cell filename='forcats：レベル名を変更する'}\n\n```{.r .cell-code}\nfct_recode(fx, mouse=\"dog\", rat=\"cat\", monkey=\"pig\", cow=\"horse\") # ラベルを付け替える\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] mouse  mouse  mouse  mouse  mouse  rat    rat    rat    rat    monkey\n[11] monkey monkey cow    cow   \nLevels: rat mouse cow monkey\n```\n:::\n\n```{.r .cell-code}\nfct_anon(fx) # 因子を匿名化（anonymize）する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 1 1 1 1 3 3 3 2 2\nLevels: 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nfct_collapse(fx, dogcat = c(\"dog\", \"cat\")) # レベルを結合する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dogcat dogcat dogcat dogcat dogcat dogcat dogcat dogcat dogcat pig   \n[11] pig    pig    horse  horse \nLevels: dogcat horse pig\n```\n:::\n\n```{.r .cell-code}\nfct_lump_min(fx, min=2) # 2つ以外のレベルをotherに変える\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   pig   pig   pig  \n[13] horse horse\nLevels: cat dog horse pig\n```\n:::\n\n```{.r .cell-code}\nfct_other(fx, keep=c(\"dog\", \"cat\")) # keep以外のレベルをotherに変える\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] dog   dog   dog   dog   dog   cat   cat   cat   cat   Other Other Other\n[13] Other Other\nLevels: cat dog Other\n```\n:::\n:::\n",
    "supporting": [
      "chapter10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}