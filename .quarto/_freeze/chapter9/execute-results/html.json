{
  "hash": "d707e6f7e88d827d8b2e500e2c04c6e9",
  "result": {
    "engine": "knitr",
    "markdown": "# 文字列\n\n\n\n\n\n多くのプログラミング言語では、**文字列（character）**の取り扱いが非常に重要視されます。住所や氏名は文字列ですし、電話番号も通常は数値というより文字列のような取り扱いを受けます。フォルダの位置（ディレクトリ）やウェブページ（html）なども文字列で構築されています。Rは統計の言語ですので、文字列には数値ほど色々な関数は実装されていませんが、Rにも基本的な文字列処理の関数は備わっています。現代では文字列を統計で取り扱う機会も増えていますので（[Word2Vec](https://ja.wikipedia.org/wiki/Word2vec)や生成AIなど）、文字列の取り扱いは統計においても重要性を増してきています。\n\n## 文字列を取り扱う関数\n\n### 文字列の結合：pasteとpaste0関数\n\nRには文字列を取り扱う関数が一通り備わっています。まずは`paste`関数について紹介します。`paste`関数は引数の文字列をつないで、1つの文字列にする関数です。各引数の文字列をつなぐ部分には、`sep`引数で指定した文字列が入ります。`paste`関数では、`sep`のデフォルトがスペースとなっているので、`sep`を設定しなければスペースが自動的に文字列の間に入ります。`paste0`関数では`sep`が空、つまり文字列のつなぎには何も入力されない形となります。\n\n\n::: {.cell filename='文字列をつなぐ'}\n\n```{.r .cell-code}\npaste(\"A dog\", \"is running\") # 引数同士をスペースを挟んでつなぐ\n## [1] \"A dog is running\"\n\npaste(\"A\", \"dog\", \"is\", \"running\") # 引数は2つ以上でもよい\n## [1] \"A dog is running\"\n\npaste(\"A dog\", \"is running\", sep=\"/\") # sepに指定した文字が引数の間に入る\n## [1] \"A dog/is running\"\n\npaste0(\"A dog\", \"is running\") # sepに何も追加したくない場合\n## [1] \"A dogis running\"\n```\n:::\n\n\n### sprintf関数\n\n他のプログラミング言語と同様に、`sprintf`関数と呼ばれる、文字列に変数を挿入する関数をRでも用いることができます。`sprintf`関数は第一引数に文字列を取り、この文字列中の`\"%s\"`や`\"%f\"`の部分に第二引数で指定した変数を挿入する関数です。`\"%s\"`には文字列、`\"%f\"`には数値が入ります。第二引数以降の変数は挿入する順番に指定する必要があります。\n\n\n::: {.cell filename='sprintf関数'}\n\n```{.r .cell-code}\nsprintf(\"%f\", pi)\n## [1] \"3.141593\"\n\n# .2fで小数点2桁まで表示\nsprintf(\"%sは%.2fです。\", \"円周率\", pi)\n## [1] \"円周率は3.14です。\"\n\n# 文字列の部分に数値、数値の部分に文字列が来るのでエラー\nsprintf(\"%sは%.2fです。\", pi, \"円周率\") \n## Error in sprintf(\"%sは%.2fです。\", pi, \"円周率\"): invalid format '%.2f'; use format %s for character objects\n```\n:::\n\n\n### 文字数をカウントする：nchar\n\n文字数をカウントする関数が`nchar`関数です。`nchar`関数は引数に取った文字列の文字数を返します。`type`引数を指定すると、文字列のバイト数や文字幅を求める事もできます。\n\n\n::: {.cell filename='文字数を数える'}\n\n```{.r .cell-code}\nnchar(\"Hello R\") # スペースを含めて7文字\n## [1] 7\n\nx <- c(\"A dog is running\", \"A cat is running\")\nnchar(x) # ベクターの要素それぞれについて計算\n## [1] 16 16\n\nnchar(\"日本語\") # 日本語でも文字列はカウントされる\n## [1] 3\n\nnchar(\"日本語\", type=\"bytes\") # バイト数は3倍\n## [1] 9\n\nnchar(\"日本語\", type=\"width\") # 等角文字は半角文字の2倍幅\n## [1] 6\n```\n:::\n\n\n### 文字列から一部抜き出す：substr\n\n文字列の一部を抜き出す関数が`substr`関数です。文字列のうち、`start`で指定した位置の文字から`stop`で指定した位置の文字までを返します。位置の指定はインデックスと同じで、1文字目が1、2文字目が2、という形を取ります。`substr`関数によく似た`substring`関数もほぼ同じ機能を持ちますが、引数名が`first`と`last`になっており、`last`のデフォルト値がとても大きく(1000000L) なっています。ですので、`first`だけを引数として指定し、それ以降の文字列を返す形で利用するものになっています。\n\n\n::: {.cell filename='文字列の抜き出し'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nsubstr(x, start = 3, stop = 5) # xの3文字目から5文字目\n## [1] \"dog\" \"cat\"\n\nsubstring(x, 3) # 3文字目以降を取得\n## [1] \"dog is running\" \"cat is running\"\n```\n:::\n\n\n### 文字列を分割する：strsplit\n\n`strsplit`関数は、文字列をある特定の文字で分割し、リストの要素として返す関数です。文字は1文字でも、複数の文字でも問題ありません。\n\n\n::: {.cell filename='文字列の分割'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstrsplit(x, \" \") # スペースで分離。リストが返ってくる\n## [[1]]\n## [1] \"A\"       \"dog\"     \"is\"      \"running\"\n## \n## [[2]]\n## [1] \"A\"       \"cat\"     \"is\"      \"running\"\n\nstrsplit(x, \"i\") # i で分離\n## [[1]]\n## [1] \"A dog \" \"s runn\" \"ng\"    \n## \n## [[2]]\n## [1] \"A cat \" \"s runn\" \"ng\"\n```\n:::\n\n\n### パターンにあう位置を調べる：grepとmatch\n\n文字列が一定のパターン（例えば英単語など）を含むかどうかを調べるのが、`grep`関数と`match`関数です。\n\n`grep`関数は文字列のベクターに適用し、パターンを含むインデックスを返します。ベクターの要素がパターンを含まない場合には、長さ0のベクター（`integer(0)`）が返ってきます。\n\n`match`関数は、パターンが全部一致する要素のインデックスを返す関数です。一部が一致する場合にはインデックスは返ってきません。どの要素にも全部一致するものがなければ、`NA`が返ってきます。パターンが部分一致する場合にインデックスを返すのが`pmatch`関数です。`pmatch`関数では、パターンが部分一致する要素が複数あると`NA`が返ってきます。\n\n\n::: {.cell filename='パターンに一致するものを調べる'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\ngrep(pattern = \"dog\", x)\n## [1] 1\n\ngrep(pattern = \"cat\", x)\n## [1] 2\n\ngrep(pattern = \"is\", x)\n## [1] 1 2\n\ngrep(pattern = \"rat\", x)\n## integer(0)\n\n\nmatch(\"median\",   c(\"mean\", \"median\", \"mode\")) # 全文マッチするベクターの位置を返す\n## [1] 2\n\nmatch(\"med\",   c(\"mean\", \"median\", \"mode\")) # 一部マッチではNA\n## [1] NA\n\n\npmatch(\"mo\",   c(\"mean\", \"median\", \"mode\")) # 一部マッチするベクターの位置を返す\n## [1] 3\n\npmatch(\"me\",   c(\"mean\", \"median\", \"mode\")) # マッチするものが2つ以上あるとNA\n## [1] NA\n```\n:::\n\n\n### 文字列の置き換え：subとgsub\n\n文字列の中で、パターンが一致したものを別のパターンに置き換えるのが、`sub`関数、`gsub`関数です。`sub`関数、`gsub`関数は引数として、パターン（`pattern`）、置き換える文字列（`replacement`）、文字列のベクターを取ります。`sub`関数が文字列のうち、前からサーチして一番始めのパターンのみを置き換えるのに対して、`gsub`関数はパターンが一致した部分をすべて置き換えるものとなっています。`gsub`関数と同じような働きを持つ`chartr`関数というものもあります。\n\n\n::: {.cell filename='文字列の置き換え'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nsub(pattern = \"n\", replacement = \"N\", x) # 始めの要素だけ置き換え\n## [1] \"A dog is ruNning\" \"A cat is ruNning\"\n\ngsub(pattern = \"n\", replacement = \"N\", x) # すべて置き換え\n## [1] \"A dog is ruNNiNg\" \"A cat is ruNNiNg\"\n\nchartr(\"n\", \"N\", x) # 上のgsub関数と同じ結果\n## [1] \"A dog is ruNNiNg\" \"A cat is ruNNiNg\"\n```\n:::\n\n\n### 小文字、大文字に変換：tolower toupper\n\n文字列を小文字に置き換えるのが`tolower`関数、大文字に置き換えるのが`toupper`関数です。\n\n\n::: {.cell filename='小文字・大文字の変換'}\n\n```{.r .cell-code}\ntolower(\"A CAT IS RUNNING\") # 小文字に変換\n## [1] \"a cat is running\"\n\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\ntoupper(x) # 大文字に変換\n## [1] \"A DOG IS RUNNING\" \"A CAT IS RUNNING\"\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：Rの文字列に関する関数\n\n|関数名                        |文字列xに適用される演算                        |\n|:-----------------------------|:----------------------------------------------|\n|paste(x, y, sep = z)          |xとyをzを挟んで結合                            |\n|paste0(x, y)                  |xとyを何も挟まず結合                           |\n|nchar(x)                      |xの文字数をカウントする                        |\n|substr(x, start, stop)        |xから文字を切り出す                            |\n|substring(x, y)               |xのy文字目以降を切り出す                       |\n|strsplit(x, pattern)          |xをpatternで分割する                           |\n|grep(pattern, x)              |patternを含むxのインデックスを返す             |\n|match(pattern, x)             |pattern全文を含む要素のインデックスを返す      |\n|pmatch(pattern, x)            |patternを一部含む要素のインデックスを返す      |\n|sub(x, pattern, replacement)  |始めに一致するpatternをreplacementに置き換える |\n|gsub(x, pattern, replacement) |patternをreplacementにすべて置き換える         |\n|chartr(old, new, x)           |oldをnewにすべて置き換える                     |\n|tolower(x)                    |大文字を小文字に変換                           |\n|toupper(x)                    |小文字を大文字に変換                           |\n\n\n:::\n:::\n\n\n## stringr\n\nRのデフォルトの文字列関連の関数だけでも色々な文字列の操作ができますが、名前に統一感がなく、返ってくるものがリストだったりするものもあり、なかなか覚えにくく、使いにくいところがあります。\n\nこの使いにくさを解消し、統一感のある関数名を付けたライブラリが[`stringr`](https://stringr.tidyverse.org/)[@stringr_bib]です。`stringr`には文字列を操作する関数が40程度登録されており、ほぼいずれの関数も「`str_`」から名前が始まります。Rstudioでは、「`str_`」と入力すると入力候補と入力候補の説明文が示されるため、比較的簡単に関数を検索し、利用することができます。文字列を取り扱う場合にRのデフォルトの関数群を用いても特に問題はありませんが、`stringr`の関数群を用いると返り値の利便性や速度に利点があります。\n\n`stringr`は`tidyverse`に含まれるライブラリです。`stringr`のインストール、ロードには`pacman::p_load`関数を用います。\n\n\n::: {.cell filename='stringrのインストールおよびロード'}\n\n```{.r .cell-code}\npacman::p_load(tidyverse) # あらかじめpacmanのインストールが必要\n```\n:::\n\n\n以下に、`stringr`の代表的な関数の使い方を示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表2：stringrの関数\n\n|関数名                                   |文字列xに適用される演算                        |\n|:----------------------------------------|:----------------------------------------------|\n|str_detect(x, pattern)                   |patternがあるとTRUEを返す                      |\n|str_which(x, pattern)                    |patternを含むインデックスを返す                |\n|str_locate(x, pattern)                   |patternの位置を調べる                          |\n|str_locate_all(x, pattern)               |patternの位置をすべて調べる                    |\n|str_count(x, pattern)                    |patternが含まれる数を返す                      |\n|str_length(x)                            |文字数を返す                                   |\n|str_trim(x)                              |xの前後のスペースを取り除く                    |\n|str_trunc(x, width)                      |xをwidthの長さに省略する                       |\n|str_sub(x, start, end)                   |startからendの位置までの文字列を取り出す       |\n|str_subset(x, pattern)                   |patternを含む要素を取り出す                    |\n|str_extract(x, pattern)                  |patternを取り出す                              |\n|str_extract_all(x, pattern)              |patternをすべて取り出す                        |\n|str_match(x, pattern)                    |patternを行列で取り出す                        |\n|str_match_all(x, pattern)                |patternを行列ですべて取り出す                  |\n|str_c(x, y, sep)                         |xとyをsepを挟んで結合する                      |\n|str_flatten(x, y, collapse)              |xとyをcollapseを挟んで結合する                 |\n|str_split(x, pattern)                    |xをpatternで分割する                           |\n|str_split_fixed(x, pattern, n)           |xをpatternでn個に分割する                      |\n|str_split_i(x, pattern, i)               |xをpatternで分割し、i番目の要素を返す          |\n|str_replace(x, pattern, replacement)     |始めに一致するpatternをreplacementに置き換える |\n|str_replace_all(x, pattern, replacement) |patternをreplacementにすべて置き換える         |\n|str_to_lower(x)                          |大文字を小文字に変換する                       |\n|str_to_upper(x)                          |小文字を大文字に変換する                       |\n\n\n:::\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## stringrとラッパー（wrapper）\n\n`stringr`は[`stringi`](https://stringi.gagolewski.com/)[@stringi_bib]というライブラリのラッパー（wrapper）です。ラッパーとは既存の関数の名前や引数の順序を統一したり、使用頻度の高い関数を選んだり、部分的に機能を追加することで利用しやすくしたものです。`stringi`はC言語由来の文字列処理を取り込んでいるため、Rのデフォルトの関数よりも計算が速いという特徴があります。\n\n:::\n\n### パターンの検出：str_detect\n\n`str_detect`関数はパターンを検索し、論理型を返す関数です。パターンが含まれる要素には`TRUE`、含まれない要素には`FALSE`が返ってきます。\n\n\n::: {.cell filename='パターンの検出'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_detect(x, \"dog\")\n## [1]  TRUE FALSE\n```\n:::\n\n\n### パターンの検出：str_which\n\n`str_which`関数は上記の`grep`関数と同じく、パターンに一致するベクターのインデックスを返す関数です。複数の要素が一致する場合には、一致するすべてのインデックスを返します。\n\n\n::: {.cell filename='パターンを検出する：str_which関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_which(x, \"dog\")\n## [1] 1\n\nstr_which(x, \"cat\")\n## [1] 2\n\nstr_which(x, \"is\")\n## [1] 1 2\n```\n:::\n\n\n### パターンの位置を調べる：str_locate\n\nもっと厳密に、そのパターンが存在する文字列上の位置を特定するための関数が`str_locate`関数です。`str_locate`関数は行列、もしくは行列のリストを返します。行列のstart列がパターンの開始位置、endが終了位置を示します。パターンが複数含まれる場合には、行列のリストが返ってきます。\n\n\n::: {.cell filename='パターンの位置を返す：str_locate関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_locate(x, \"dog\") # 1つ目の要素のみにパターンが含まれる時\n##      start end\n## [1,]     3   5\n## [2,]    NA  NA\n\nstr_locate_all(x, \"n\") # 2つの要素にパターンが複数含まれる時\n## [[1]]\n##      start end\n## [1,]    12  12\n## [2,]    13  13\n## [3,]    15  15\n## \n## [[2]]\n##      start end\n## [1,]    12  12\n## [2,]    13  13\n## [3,]    15  15\n```\n:::\n\n\n### パターンが含まれる数を数える：str_count\n\nパターンが何回含まれるかを数える関数が`str_count`関数です。パターンが含まれていればそのパターンの個数を、含まれていなければ0を返します。\n\n\n::: {.cell filename='パターンの個数を数える：str_count関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_count(x, \"dog\") # 1つ目の要素に1つだけパターンが含まれる場合\n## [1] 1 0\n\nstr_count(x, \"n\") # 2つの要素に3つずつパターンが含まれる場合\n## [1] 3 3\n```\n:::\n\n\n### 文字数を数える：str_length\n\n`str_length`関数は`nchar`関数と同じく、文字数を返す関数です。どちらを使っても結果は同じですが、他の言語では文字数を数える関数に「`length`」関数を当てることが多いため、`str_length`の方が直感的に使い方がわかりやすい名前になっています。\n\n\n::: {.cell filename='文字数をカウントする：str_length関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_length(x)\n## [1] 16 16\n\nnchar(x)\n## [1] 16 16\n```\n:::\n\n\n### 文字列を整える：str_trim、str_trunc\n\n`str_trim`関数は文字列の前と後ろのスペースを取り除く関数です。文字列の演算では、スペースが前後に残って邪魔になることがよくあります。このような場合には`str_trim`でスペースを取り除き、形を整えることができます。\n\n`str_trunc`関数は、文字列の前や後ろを切り取り、「...」で置き換えて省略してくれる関数です。長い文字列をラベル等に用いるときに使用します。\n\n\n::: {.cell filename='文字列を整形する：str_trim, str_trunc関数'}\n\n```{.r .cell-code}\nstr_trim(\" x \") # スペースを取り除く\n## [1] \"x\"\n\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_trunc(x, 12) # 後ろを切り取って...で省略\n## [1] \"A dog is ...\" \"A cat is ...\"\n\nstr_trunc(x, 12, side=\"left\") # 前を切り取って...で省略\n## [1] \"...s running\" \"...s running\"\n```\n:::\n\n\n### 文字を切り出す：str_subとstr_subset\n\n`str_sub`関数は`substr`関数とほぼ同じ働きを持つ関数で、`start`の位置から`end`の位置までの文字列を抜き出します。\n\n`str_subset`関数はやや異なり、パターンを含むベクターの要素のみを取り出す関数です。\n\n\n::: {.cell filename='パターンを含む文字列を取り出す：str_sub、str_subset関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_sub(x, start=3, end=5) # 位置を特定して抽出\n## [1] \"dog\" \"cat\"\n\nstr_subset(x, \"cat\") # 文字を含む要素を抽出\n## [1] \"A cat is running\"\n\nstr_subset(x, \"is\")\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_subset(x, \"rat\")\n## character(0)\n```\n:::\n\n\n### 文字列を抽出する：str_extract\n\n`str_extract`関数は、パターンがマッチしたときに、そのパターンを返す関数です。パターンに一致する部分がない場合には、`NA`を返します。`str_extract`関数はマッチした始めのパターンのみを返し、`str_extract_all`関数はマッチしたパターンをすべて返します。`str_extract_all`関数の返り値はリストになります。\n\n\n::: {.cell filename='パターンを抽出する：str_extract関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_extract(x, \"is\") # 特定の文字列を抽出\n## [1] \"is\" \"is\"\n\nstr_extract(x, \"dog\") # 抽出できないとNAを返す\n## [1] \"dog\" NA\n\nstr_extract_all(x, \"n\") # パターン一致するものをすべて抽出\n## [[1]]\n## [1] \"n\" \"n\" \"n\"\n## \n## [[2]]\n## [1] \"n\" \"n\" \"n\"\n```\n:::\n\n\n### パターンマッチング：str_match\n\n`str_match`関数も一致したパターンを返す関数です。`str_match`関数は始めにマッチしたパターンを行列で返し、`str_match_all`関数はマッチしたすべてのパターンを行列のリストで返します。\n\n\n::: {.cell filename='マッチしたパターンを返す：str_match関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_match(x, \"dog\") # パターンがあれば、そのパターンを返す\n##      [,1] \n## [1,] \"dog\"\n## [2,] NA\n\nstr_match_all(x, \"n\") # パターンがあれば、それをすべて返す\n## [[1]]\n##      [,1]\n## [1,] \"n\" \n## [2,] \"n\" \n## [3,] \"n\" \n## \n## [[2]]\n##      [,1]\n## [1,] \"n\" \n## [2,] \"n\" \n## [3,] \"n\"\n```\n:::\n\n\n### 文字列をつなぐ：str_cとstr_flatten\n\n`str_c`関数と`str_flatten`関数はいずれも文字列をつなぐ関数です。ともに`paste`関数と`paste0`関数とほぼ同じですが、`NA`の取り扱いが少しだけ異なります。\n\n\n::: {.cell filename='文字列をつなぐ：str_c関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_c(x[1], x[2]) # paste0と同じ\n## [1] \"A dog is runningA cat is running\"\n\nstr_c(x[1], x[2], sep=\" \") # pasteと同じ\n## [1] \"A dog is running A cat is running\"\n\nstr_flatten(c(\"a\", \"dog\", \"is\", \"running\")) # paste0と同じ\n## [1] \"adogisrunning\"\n\nstr_flatten(c(\"a\", \"dog\", \"is\", \"running\"), collapse= \" \") # pasteと同じ\n## [1] \"a dog is running\"\n```\n:::\n\n\n### 文字列を分割する：str_split、str_split_fixed、str_split_i\n\n`str_split`関数はパターンで文字列を分割する関数で、`strsplit`関数とほぼ同じ機能を持ちます。\n\n`str_split_fixed`関数はパターンで分割するときに、分割後の要素の数を指定することができる関数です。\n\n`str_split_i`関数は、パターンで分割した後に、数値で指定したインデックスの要素のみを取り出す関数です。\n\n\n::: {.cell filename='文字列を分割する：str_split関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_split(x, \" \") # パターンで分割\n## [[1]]\n## [1] \"A\"       \"dog\"     \"is\"      \"running\"\n## \n## [[2]]\n## [1] \"A\"       \"cat\"     \"is\"      \"running\"\n\nstr_split_fixed(x, \" \", 2) # 始めのパターンで2つに分割\n##      [,1] [,2]            \n## [1,] \"A\"  \"dog is running\"\n## [2,] \"A\"  \"cat is running\"\n\nstr_split_i(x, \" \", 2) # パターンで分割し、2つ目の要素を取り出す\n## [1] \"dog\" \"cat\"\n```\n:::\n\n\n### 文字列を置き換える：str_replace、str_replace_all\n\n`str_replace`関数は文字列のパターンを別の文字列に置き換える関数です。`sub`関数とほぼ同等の機能を持ちます。`str_replace_all`関数は`gsub`関数とほぼ同じで、`str_replace`関数が始めにマッチしたパターンのみを置き換えるのに対し、`str_replace_all`関数はマッチしたパターンをすべて置き換えます。\n\n\n::: {.cell filename='文字列を置き換える：str_replace関数'}\n\n```{.r .cell-code}\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_replace(x, \"running\", \"walking\") # 前のパターンを後ろの文字列に置き換える\n## [1] \"A dog is walking\" \"A cat is walking\"\n\nstr_replace_all(x, \" \", \",\") # 前のパターンをすべて、後ろの文字列に置き換える\n## [1] \"A,dog,is,running\" \"A,cat,is,running\"\n```\n:::\n\n\n### 大文字・小文字の操作：str_to_lower、str_to_upper\n\n`str_to_lower`関数は大文字を小文字に、`str_to_upper`関数は小文字を大文字に変換する関数です。どちらも`tolower`関数、`toupper`関数とほぼ同等の機能を持ちます。`str_to_lower`、`str_to_upper`関数は言語による小文字・大文字の違いによる変換にも対応していますが、日本人がこの機能を使うことはほぼ無いでしょう。\n\n\n::: {.cell filename='大文字・小文字の操作：str_to_lower、str_to_upper'}\n\n```{.r .cell-code}\nstr_to_lower(\"A DOG IS RUNNING\")\n## [1] \"a dog is running\"\n\nx\n## [1] \"A dog is running\" \"A cat is running\"\n\nstr_to_upper(x)\n## [1] \"A DOG IS RUNNING\" \"A CAT IS RUNNING\"\n```\n:::\n\n\n## 正規表現\n\n文字列中に含まれる特定の文字や単語を取り出す・検出する際に、1つの文字や単語だけでなく、条件に適合した複数の文字列を対象としたい場合もあります。また、文字列の特定の並び（`\"would\"`, `\"like\"`, `\"to\"`が順番に並んでいるなど）のみを特定し、検出したいといった場合もあるでしょう。このような場合に文字列のマッチングに用いられるものが、**正規表現**です。正規表現では、文字列と記号を合わせて複雑な文字列のパターンを特定し、マッチングを行うことができます。\n\nRで用いることができる正規表現には、Rを含めて汎用されている規格（POSIX 1003.2 standard）のものと、Perl言語で用いられる正規表現の主に2つがあります。ここでは前者のみについて簡単に説明します。\n\nRで用いることができる正規表現の例を以下の表3に示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表3：Rの正規表現の一覧\n\n|正規表現       |意味                                   |\n|:--------------|:--------------------------------------|\n|\\\\a            |ビープ音（BEL）                        |\n|\\\\e            |エスケープ（ESC）                      |\n|\\\\f            |フォームフィード（FF，書式送り）       |\n|\\\\n            |ラインフィード（LF，改行）             |\n|\\\\r            |キャリッジリターン（CR，改行）         |\n|\\\\t            |タブ（TAB）                            |\n|\\\\w            |すべての英数字（アルファベット＋数値） |\n|\\\\W            |すべての英数字を含まない               |\n|\\\\<，\\\\>       |文書の端の空欄（<が始め，>が終わり）   |\n|\\\\b            |文書の端の空欄                         |\n|\\\\B            |文書中の空欄（端を除く）               |\n|[abc]          |a，b，cを含む                          |\n|[^abc]         |a，b，cを含まない                      |\n|[0-9]          |0～9の数字                             |\n|[:digit:]⁠      |数字                                   |\n|[:xdigit:]⁠     |16進数の数字（1~9，A~F）               |\n|[A-Z]          |A～Zの大文字アルファベット             |\n|[a-z]          |a～zの小文字アルファベット             |\n|[:alnum:]⁠      |すべての英数字（アルファベット＋数値） |\n|⁠[:alpha:]      |すべてのアルファベット                 |\n|⁠[:lower:]⁠      |すべての小文字アルファベット           |\n|⁠[:upper:]⁠      |すべての大文字アルファベット           |\n|[:blank:]⁠      |スペースもしくはタブ                   |\n|[:space:]      |スペース文字（FFやCRを含む）           |\n|[:graph:]⁠      |表示可能な文字（図形文字）             |\n|⁠[:print:]⁠      |表示可能な文字（スペース含む）         |\n|[:punct:]⁠      |句読点など                             |\n|[:cntrl:]⁠      |制御文字                               |\n|?a             |aが0～1回マッチする                    |\n|*a             |aが0回以上マッチする                   |\n|+a             |aが1回以上マッチする                   |\n|{5}a           |aaaaaがマッチする                      |\n|{5,}a          |aaaaaよりaが続く文字列がマッチする     |\n|{2,4}a         |aa，aaa，aaaaのいずれかがマッチする    |\n|(abc&#124;def) |abcかdefのどちらかにマッチする         |\n|[あ-ん]        |すべてのひらがな                       |\n|[ア-ン]        |すべてのカタカナ                       |\n\n\n:::\n:::\n\n\n### 関数での正規表現の利用\n\n正規表現はこの章で述べたR言語の文字列を対象とする関数や、`stringr`の関数でパターンとして指定し、用いることができます。以下は`grep`関数の`pattern`引数に正規表現を指定した場合の例です。正規表現を用いることで、例えばhtmlのアドレスやe-mailのアドレスとして正しい記載であるかなど、複雑な文字列のパターンでも検出し、評価することができます。\n\n\n::: {.cell filename='正規表現による文字列の検出'}\n\n```{.r .cell-code}\nv <- c(\"dog\", \"cat\", \"pig\", \"rat\", \"egg\")\ngrep(\"[abc]\", v, value=TRUE) # abcのいずれかを含む\n## [1] \"cat\" \"rat\"\n\ngrep(\"[^crat]\", v, value=TRUE) # crat以外を含む\n## [1] \"dog\" \"pig\" \"egg\"\n\ngrep(\"^c\", v, value=TRUE) # cから始まる\n## [1] \"cat\"\n\ngrep(\"[(o|g)][(p|g)]\", v, value=TRUE) # op、og、gp、ggのいずれかを含む\n## [1] \"dog\" \"egg\"\n\ngrep(\"g{2}\", v, value=TRUE) # ggを含む\n## [1] \"egg\"\n```\n:::\n\n\n### rexパッケージ\n\nとは言っても、正規表現をまるまる覚えるのは大変ですし、いちいち検索して正規表現でパターンを表現するのも場合によってはかなり大変です。[`rex`](https://rex.r-lib.org/index.html)パッケージ[@rex_bib]はこのような複雑な正規表現を人にも理解しやすい形で作成できるようにするためのパッケージです。よく用いられる正規表現は`shortcuts`というオブジェクト（リストと同じように取り扱えます）に含まれていますし、`rex`関数を用いてより複雑な正規表現を作成することもできます。\n\n\n::: {.cell filename='rexパッケージ'}\n\n```{.r .cell-code}\npacman::p_load(rex)\n\nshortcuts$letter # アルファベット\n## [:alpha:]\n\nshortcuts$non_puncts # 句読点以外\n## [^[:punct:]]+\n\nrex(none_of(\"a\", \"e\", \"i\", \"o\", \"u\")) # aeiou以外\n## [^aeiou]\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}