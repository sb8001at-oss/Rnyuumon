{
  "hash": "285918f4f339fbdf491d3d162b82658e",
  "result": {
    "engine": "knitr",
    "markdown": "# 教師なし学習\n\n**教師なし学習**は、データの特徴を捉えるためにデータを変換したり、群に分ける方法の総称です。教師なし学習の特徴は、以前に取ったデータと新しく取得したデータを分けて用いる教師あり学習とは異なり、すべてのデータを一度に用いて学習を行うことです。教師なし学習には、以下の図1のように、データをグループに分ける**クラスタリング**と、多次元のデータを理解しやすいように変換する**次元圧縮**の2つが含まれます。\n\n![](./image/classification_category2.png)\n\n\n\n\n\n## クラスタリング\n\n**クラスタリング**とは、1つの要素にたくさんのデータが付随している、多次元データを用いて、要素間が互いに似ているかどうかを判断し、互いに似ているもの同士を一つのグループにまとめる方法です。類似した要素のまとまりを見つけるときに用いられます。\n\n「1つの要素にたくさんのデータ」というのはイメージしにくいかもしれませんが、例えば、ある個人について付随しているデータを考えると、年齢、性別、身長、体重、職業、趣味など、1人にたくさんのデータがくっついてきます。ある個人Aさんと別の個人Bさんでは、異なるデータがくっついていることになります。AさんとBさんの属性が似ているかどうかは、そのデータがどれぐらい似ているかを調べればわかります。このように1人あたりのデータがたくさんある状態のことを**多次元データ**であると考えることができます。\n\n多次元データがどの程度似ているのかを表現できれば、個々人が似ている・似ていないを判断することができ、似ている人をグループとして分けることができます。この似ている人同士をグループにすることがクラスタリングに当たります。\n\nクラスタリングするときに、似ているものから順番に線でつないでいく方法のことを**階層ありクラスタリング**、似ているものを大まかにグループ分けする方法を**階層なしクラスタリング**と呼びます。\n\n## 階層ありクラスタリング\n\n### 距離行列\n\n階層ありクラスタリングとは、多次元データ間の**距離**を計算することで、個々のデータについて似ている度合いを評価し、評価に従って似ているものから**クラスター**に分けていく手法のことです。まずは、データを**距離行列**に変換する必要があります。\n\n距離行列とは、たくさんあるデータとデータの距離を行列としてまとめたものです。最も単純な距離行列は2つのデータの直線距離（ユークリッド距離）です。\n\n距離行列についてイメージしやすいように、まずは、都道府県の県庁所在地の緯度・経度のデータを用いて距離行列を計算します。都道府県の緯度経度情報は[Github Gistのページ](https://gist.github.com/ctsaran/42728dad3c7d8bd91f1d)からダウンロードしています。\n\n簡便化のために、関西の都道府県のみを用います。緯度・経度から、関西の都道府県は下のグラフに示すように位置していることがわかります。この時、各県から別の県までの直線距離をそれぞれ求めることができます。これを行列にまとめたのが距離行列です。Rでは、`dist`関数というものを用いて、緯度・経度のデータからユークリッド距離の距離行列を求めることができます。\n\n\n::: {.cell filename='データの準備'}\n\n```{.r .cell-code}\nkansai <- read.csv(\"./data/pref_lat_lon.csv\", header = T, fileEncoding = \"CP932\")\n\n# 関西の都道府県データのみ取得する\nkansai <- kansai[24:30, ]\nkansai # 各県の緯度と経度\n##    pref_name      lat      lon\n## 24    三重県 34.73055 136.5086\n## 25    滋賀県 35.00453 135.8686\n## 26    京都県 35.02100 135.7531\n## 27    大阪府 34.68649 135.5190\n## 28    兵庫県 34.69128 135.1831\n## 29    奈良県 34.68530 135.8327\n## 30  和歌山県 34.22481 135.1679\n\nggplot(\n  kansai, \n  aes(x = lon, y = lat, color = pref_name, label = pref_name)) + \n  geom_text() # 県庁所在地の位置\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell filename='データを距離行列に変換'}\n\n```{.r .cell-code}\n# ユークリッド距離（数値は24から順に三重、滋賀、京都、大阪、兵庫、奈良、和歌山）\ndist(kansai[, 2:3], method=\"euclidean\") \n##           24        25        26        27        28        29\n## 25 0.6962011                                                  \n## 26 0.8094045 0.1166423                                        \n## 27 0.9905981 0.4726170 0.4082964                              \n## 28 1.3261045 0.7536832 0.6585157 0.3359391                    \n## 29 0.6773781 0.3212419 0.3450157 0.3137553 0.6496856          \n## 30 1.4328793 1.0482682 0.9880967 0.5799866 0.4667195 0.8087048\n```\n:::\n\n\n上の例では緯度・経度の2つのデータから距離行列を計算していますが、もっとたくさんの列があるデータにおいても同様に距離行列を計算することができます。また、距離行列には、距離の計算の仕方によってさまざまな種類のものがあります。距離としてよく用いられるものは、**ユークリッド距離**（2点間の直線の距離）と**マンハッタン距離**（2点間を移動するときの横と縦の移動距離を足したもの）の2つです。\n\nこの距離行列を用いて、距離が近いもの同士をクラスターにまとめていくものが、**階層ありクラスタリング（hierarchical clustering）**です。\n\n::: {.panel-tabset}\n\n## ユークリッド距離\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ユークリッド距離\n#（軸の数値は24から順に三重、滋賀、京都、大阪、兵庫、奈良、和歌山）\ndist(kansai[, 2:3], method = \"euclidean\") \n##           24        25        26        27        28        29\n## 25 0.6962011                                                  \n## 26 0.8094045 0.1166423                                        \n## 27 0.9905981 0.4726170 0.4082964                              \n## 28 1.3261045 0.7536832 0.6585157 0.3359391                    \n## 29 0.6773781 0.3212419 0.3450157 0.3137553 0.6496856          \n## 30 1.4328793 1.0482682 0.9880967 0.5799866 0.4667195 0.8087048\n```\n:::\n\n\n## 最大距離\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 縦と横の距離の最大値を取る\ndist(kansai[, 2:3], method = \"maximum\") \n##           24        25        26        27        28        29\n## 25 0.6400220                                                  \n## 26 0.7554965 0.1154745                                        \n## 27 0.9896180 0.3495960 0.3345042                              \n## 28 1.3255230 0.6855010 0.5700265 0.3359050                    \n## 29 0.6758650 0.3192360 0.3357002 0.3137530 0.6496580          \n## 30 1.3406600 0.7797260 0.7961902 0.4616860 0.4664740 0.6647950\n```\n:::\n\n\n## マンハッタン距離\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# マンハッタン距離\ndist(kansai[, 2:3], method = \"manhattan\") \n##           24        25        26        27        28        29\n## 25 0.9140070                                                  \n## 26 1.0459457 0.1319387                                        \n## 27 1.0336730 0.6676360 0.5686257                              \n## 28 1.3647900 0.9987530 0.8997427 0.3406930                    \n## 29 0.7211160 0.3550790 0.4153317 0.3149490 0.6556420          \n## 30 1.8464010 1.4803640 1.3813537 0.8127280 0.4816110 1.1252850\n```\n:::\n\n\n## キャンベラ距離\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# キャンベラ距離\n#（原点近くの距離を大きく見積もる、2点の距離を原点からの距離の絶対値の和で割る）\ndist(kansai[, 2:3], method = \"canberra\")\n##             24          25          26          27          28          29\n## 25 0.006278704                                                            \n## 26 0.006938945 0.000660247                                                \n## 27 0.004272575 0.005851752 0.005661734                                    \n## 28 0.005444405 0.007023602 0.006833586 0.001309879                        \n## 29 0.003133566 0.004712733 0.005109133 0.001173500 0.002483376            \n## 30 0.012269091 0.013847973 0.013657932 0.007996570 0.006824715 0.009135586\n```\n:::\n\n\n## バイナリ距離\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# バイナリ距離（距離が0なら1、0でなければ0を返す）\ndist(kansai[, 2:3], method = \"binary\") \n##    24 25 26 27 28 29\n## 25  0               \n## 26  0  0            \n## 27  0  0  0         \n## 28  0  0  0  0      \n## 29  0  0  0  0  0   \n## 30  0  0  0  0  0  0\n```\n:::\n\n\n## ミンコフスキー距離\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ミンコフスキー距離\n#（ユークリッドとマンハッタンの中間的なもの、pという引数を別途取る。pのデフォルトは2）\ndist(kansai[, 2:3], method = \"minkowski\") \n##           24        25        26        27        28        29\n## 25 0.6962011                                                  \n## 26 0.8094045 0.1166423                                        \n## 27 0.9905981 0.4726170 0.4082964                              \n## 28 1.3261045 0.7536832 0.6585157 0.3359391                    \n## 29 0.6773781 0.3212419 0.3450157 0.3137553 0.6496856          \n## 30 1.4328793 1.0482682 0.9880967 0.5799866 0.4667195 0.8087048\n```\n:::\n\n\n:::\n\n### Rでの階層ありクラスタリング\n\nRでは、この階層ありクラスタリングを`hclust`関数を用いて行います。`hclust`関数の第一引数は距離行列で、上に述べた通り`dist`関数を用いて計算できるものです。`method`引数には、クラスタリングの方法を選択します。クラスタリングの方法は、`\"complete\"`（デフォルト）、`\"ward.D\"`、`\"ward.D2\"`、`\"single\"`、`\"average\"`、`\"mcquitty\"`、`\"median\"`、`\"centroid\"`の8つから選択します。\n\nこの、`hclust`関数の返り値を`plot`することで、クラスタリングの結果を確認することができます。`hclust`関数の返り値自体を確認することはあまりないため、基本的には`plot`して使うものだと考えてもらうとよいと思います。`plot`関数において、`hang`引数を`-1`に指定すると、クラスタリングする要素の下端をそろえることができます。\n\n`plot`関数で表示されるのは、より近いもの同士も線でつないだ樹形上の図です。線でつながった距離が近いほど、データがよく似ていることを示しています。上記の都道府県の緯度・経度でクラスタリングを行うと、距離の近さとクラスタリングの図上の近さが対応しているのがわかるかと思います。\n\n::: {.panel-tabset}\n\n## 下揃えなし\n\n\n::: {.cell filename='階層ありクラスタリング'}\n\n```{.r .cell-code}\nJPll <- read.csv(\"./data/pref_lat_lon.csv\", header = T, row.names = 1, fileEncoding = \"CP932\")\nhc <- hclust(dist(JPll), method = \"complete\") # 引数は距離行列\nplot(hc) # 樹形図の作図\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## 下揃えあり\n\n\n::: {.cell filename='階層ありクラスタリング：下を揃える'}\n\n```{.r .cell-code}\nplot(hc, hang = -1)\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## 階層なしクラスタリング\n\n階層ありクラスタリングでは、距離の近いデータ同士をつなぐため、各データのクラスタの近さは厳密に計算されています。一方で、この方法では距離行列を必ず計算する必要があり、データが増えると計算回数がどんどん増えていきます。\n\nデータ同士の距離ではなく、「クラスターの中心」を定め、この中心からの距離が近いものを同じクラスターであるとしてグループ分けする方法のことを**階層なしクラスタリング**と呼びます。こちらの方法であれば、計算回数はクラスター数に依存するため、データが増えても大きくは計算回数が増えず、比較的単純な計算でグループ分けを行うことができます。一方で、厳密にデータ間の距離を計算しているわけではないので、階層ありクラスタリングのように細かなデータの類似性を評価することはできません。\n\nこの階層なしクラスタリングの最も代表的なものが、**k-mean法**です。\n\n## k-means\n\n**k-means法**では、あらかじめ乱数に従い「クラスターの中心」を設定します。このクラスターの中心の数は解析する人が設定する必要があります。次に、このクラスターの中心からの距離が近いデータを、そのクラスターのデータであるとします。この仮のクラスターができたら、次にクラスター内のデータの重心を求めます。重心が定まったら、この重心を新しい「クラスターの中心」として、クラスターの中心の位置を更新します。\n\nこのクラスターの中心を重心に更新する試行を、重心が移動しなくなるまで繰り返した時のクラスター内のデータをクラスターのメンバーとします。言葉ではわかりにくいので、以下にk-meansによるクラスタリングの図を示します。また、[こちらのリンク](http://tech.nitoyon.com/ja/blog/2013/11/07/k-means/)、もしくは[このWebアプリケーション](https://www.shinyapps.io/admin/#/application/11051496)を見ていただくと、k-meansをよりイメージしやすいかと思います。WebアプリケーションはRで、`if(!require(shiny)){install.packages(\"shiny\")};runGitHub(\"kmeans_animated\", \"sb8001at\")`を実行することでも利用することができます。\n\n:::{.callout-tip collapse=\"true\"}\n\n## k-mean：下グラフ描画のスクリプト\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0)\n\n# データにはirisのがく片データを使用\ndata <- iris[, 1:2]\ncolnames(data) <- c(\"x\", \"y\")\n\n# クラスターの中心の初期値\ncenter_means <- \n  data.frame(\n    x = rnorm(3, mean(data[ ,1]), sd(data[ ,1])), \n    y = rnorm(3, mean(data[ ,2]), sd(data[ ,2])),\n    clus = 1:3)\n\n# アウトプットを保存する変数\ndata_for_gganimate <- NULL\n\nfor(i in 1:20){ # おそらくi=16ぐらいで収束している\n  \n  # 各中心からの距離の計算\n  dist_d <- data.frame(\n    dist_1 = (data$x - center_means[1, 1]) ^ 2 + (data$y - center_means[1, 2]) ^ 2,\n    dist_2 = (data$x - center_means[2, 1]) ^ 2 + (data$y - center_means[2, 2]) ^ 2,\n    dist_3 = (data$x - center_means[3, 1]) ^ 2 + (data$y - center_means[3, 2]) ^ 2\n  )\n  \n  # 最も近いクラスターを探す\n  min_dist <- apply(dist_d, 1, min)\n  \n  clus <- \n    case_when(\n      dist_d$dist_1 == min_dist ~ 1,\n      dist_d$dist_2 == min_dist ~ 2,\n      dist_d$dist_3 == min_dist ~ 3,\n    )\n  \n  # グラフ用データを準備\n  data_temp <- data.frame(data, clus, xcenter = center_means[clus,]$x, ycenter = center_means[clus,]$y, timestate = 2 * i - 1)\n  \n  data_for_gganimate <- rbind(data_for_gganimate, data_temp)\n  \n  # 重心でクラスターの中心を更新する\n  center_means2 <- data_temp |> group_by(factor(clus)) |> summarise(x = mean(x), y = mean(y))\n  center_means$x <- center_means2$x\n  center_means$y <- center_means2$y\n    \n  # グラフ用データを準備\n  data_temp <- data.frame(data, clus, xcenter = center_means[clus,]$x, ycenter = center_means[clus,]$y, timestate = 2 * i)\n  \n  data_for_gganimate <- rbind(data_for_gganimate, data_temp)\n}\n\npacman::p_load(gganimate)\n\n# gganimateでグラフ化\np <- ggplot()+\n  geom_point(data = data_for_gganimate, aes(x = x, y = y, color = factor(clus), size = 2), alpha = 0.5) +\n  geom_point(data = data_for_gganimate, aes(x = xcenter, y = ycenter, color = factor(clus), size = 3), alpha = 0.7)+\n  geom_segment(data = data_for_gganimate, aes(x = x, y = y, xend = xcenter, yend = ycenter, color = factor(clus)), alpha = 0.5)+\n  theme(legend.position = \"none\")+\n  transition_states(timestate, transition_length = 1, state_length = 1, wrap = TRUE)+\n  ease_aes('linear')\n\nanim_save(\"./image/p_kmeans.gif\", animate(p, renderer = gifski_renderer()))\n```\n:::\n\n\n:::\n\n![](./image/p_kmeans.gif)\n\nRではk-meansでのクラスタリングを`kmeans`関数を用いて行うことができます。`kmeans`関数の引数はデータフレームとクラスターの数（`centers`）です。以下の例では、`iris`のデータを3つのクラスターに分けています。k-meansのクラスター中心の初期値は乱数で決められますので、クラスターの結果は計算のたびに少しずつ変化します。また、初期値を特定の値として`centers`引数に行列で与えることもできます。\n\n\n::: {.cell filename='kmeans関数でクラスタリング'}\n\n```{.r .cell-code}\n## k-means\nset.seed(0) # k-meansは乱数計算なので、シードを設定\nk.cent3 <- kmeans(iris[ ,1:4], centers = 3) # 3つのクラスタに分ける\nk.cent3$cluster # 計算結果\n##   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n##  [75] 3 3 3 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 3 1 1 1 1 3 1 1 1 1\n## [112] 1 1 3 3 1 1 1 1 3 1 3 1 3 1 1 3 3 1 1 1 1 1 3 1 1 1 1 3 1 1 1 3 1 1 1 3 1\n## [149] 1 3\n```\n:::\n\n::: {.cell filename='クラスターの中心を指定'}\n\n```{.r .cell-code}\nk.cents <- kmeans(iris[ ,1:4], centers = iris[c(1, 51, 101), 1:4]) # 初期値を各種の始めの値に設定\nk.cents$cluster\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n##  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n## [112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n## [149] 3 2\n```\n:::\n\n\n以下では、k-meansでクラスター分けしたデータと、`iris`の`Species`の関係を示しています。k-meansでクラスター分けした結果が`Species`とほぼ重なることを確認できます。\n\n\n::: {.cell filename='クラスターとirisの種の比較'}\n\n```{.r .cell-code}\nspvec <- iris$Species |> levels()\n\nk.cent3$cluster <- k.cent3$cluster - 1\nk.cent3$cluster <- if_else(k.cent3$cluster == 0, 3, k.cent3$cluster)\n\ncbind(iris, cluster = spvec[k.cent3$cluster]) |> \n  gather(tag, value, 5:6) |> \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = value))+\n    geom_point(size = 3)+\n    facet_wrap(~ tag)\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## c-means\n\n**c-means法**はfuzzy c-means法とも呼ばれる、クラスターへの所属を確率で求める手法です。c-means法もk-means法と同じく、データとクラスターの距離をもとにクラスタリングを行う手法の一つです。Rでは、c-means法の計算を[`e1071`](https://cran.r-project.org/web/packages/e1071/index.html)パッケージ [@e1071_bib]の`cmeans`関数で行うことができます。`cmeans`関数も`kmeans`関数と同様に、データフレームと中心の数（`centers`）を引数に取ります。クラスターの中心の初期値は行列で与えることもできます。\n\n\n::: {.cell filename='c-means法' warnings='false'}\n\n```{.r .cell-code}\npacman::p_load(e1071)\n# クラスタリングの計算（中心を指定）\niris.c <- cmeans(iris[,1:4], centers = iris[c(1, 51, 101), 1:4])\n\n# クラスターとirisの種の比較\ncbind(iris, cluster = spvec[iris.c$cluster]) |>  \n  gather(tag, value, 5:6) |> \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = value))+\n  geom_point(size = 3)+\n  facet_wrap(~ tag)\n## Warning: attributes are not identical across measure variables; they will be\n## dropped\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## スペクトラルクラスタリング\n\nスペクトラルクラスタリングは、上記のk-meansやc-meansのように、中心からの距離だけでは分離するのが難しいようなクラスタリングを行うときに有効な手法です。スペクトラルクラスタリングでは、近くにあるデータは同じクラスターに分類されやすくするようにアルゴリズムが組まれていて、k-meansやc-meansでは分離不能なクラスタをきれいに分けることができます。\n\nRではスペクトラルクラスタリングを[`kernlab`](https://cran.r-project.org/web/packages/kernlab/index.html)パッケージ [@kernlab_bib1; @kernlab_bib2]の`specc`関数を用いて行うことができます。`specc`関数の使い方は`kmeans`関数や`cmeans`関数とほぼ同じで、データフレームと`centers`を引数に取ります。また、返り値を`plot`関数の引数にすることで、簡単にクラスターをグラフにすることもできます。\n\n\n::: {.cell filename='スペクトラルクラスタリング'}\n\n```{.r .cell-code}\npacman::p_load(kernlab)\n\n# データにはkernlabのspiralsを用いる\ndata(spirals)\nhead(spirals)\n##            [,1]        [,2]\n## [1,]  0.8123568 -0.98712687\n## [2,] -0.2675890 -0.32552004\n## [3,]  0.3739746 -0.01293652\n## [4,]  0.2576481  0.04130805\n## [5,] -0.8472613  0.32939461\n## [6,]  0.4097649  0.03205686\n\nsc <- specc(spirals, centers = 2) # スペクトラルクラスタリング\nplot(spirals, col = sc) # 結果の表示（色がクラスターを示す）\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nただし、このスペクトラルクラスタリングは必ずしも良いクラスタリングの方法ではなく、例えば`iris`のクラスタリングに用いると、3クラスターを指定しても、ほとんど2クラスターしか出てこなくなってしまいます。クラスター同士の距離が近く、接していると正しくクラスタリングできないようです。スペクトラルクラスタリングを用いる時にはデータの構造をよく確認する必要があります。\n\n\n::: {.cell filename='irisでスペクトラルクラスタリング'}\n\n```{.r .cell-code}\n# 3クラスタとなるよう設定\nsc.iris <- specc(iris[,1:4] |> as.matrix(), centers = 3)\n\n# 結果に1がほとんどなく、ほぼ2クラスターになっている\nsc.iris@.Data \n##   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n##  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n##  [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n## [112] 3 3 3 3 3 3 1 3 3 3 3 3 3 3 3 3 3 3 3 3 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n## [149] 3 3\n```\n:::\n\n\n## 主成分分析\n\n**主成分分析**は、多次元のデータを第一主成分・第二主成分…という主成分にデータ変換する手法です。この**第一主成分**というのは、データを空間に配置したときに、ばらつきが最も大きくなる軸に沿った値を指します。このようにばらつきが最も大きくなる軸を選んで主成分とすることで、多次元のデータからデータの損失を抑えつつ、そのデータの特徴を残したようなパラメータに変換することができます。要は、多次元のデータだと特徴を捉えにくい場合においても、主成分に変換することでデータの特徴を捉えやすくすることができます。\n\n第二主成分は、第一主成分を定めた軸に垂直な面において、最もばらつきが多い軸に沿った値となります。第一主成分の軸と第二主成分の軸は互いに直行している、90度に交わっているので、**第一主成分と第二主成分の相関はほぼゼロ**になります。この特徴のため、[26章](./chapter26.html)で説明した主成分回帰では説明変数同士が相関しているときに起こる問題、多重共線性を避けることができます。\n\n以下に、主成分分析の軸のイメージを示します。軸は互いに垂直に交わっているのがわかると思います。PC1を横に、PC2を縦になるように回転させたのが、下の第一主成分と第二主成分でのプロットのイメージとなります。\n\n:::{.callout-tip collapse=\"true\"}\n\n## 主成分分析における主成分の軸のイメージ（スクリプト）\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_temp <- iris |> filter(Species != \"setosa\") |> _[ ,1:3]\niris.pc2 <- prcomp(iris_temp)\n\npc1 <- iris.pc2$x[ ,1]\npc2 <- iris.pc2$x[ ,2]\npc3 <- iris.pc2$x[ ,2]\ncenter1 <- iris.pc2$center[1]\ncenter2 <- iris.pc2$center[2]\ncenter3 <- iris.pc2$center[3]\n\niris_temp$pc1_Sepal.Length <- pc1 * iris.pc2$rotation[1, 1] + center1\niris_temp$pc1_Sepal.Width <- pc1 * iris.pc2$rotation[2, 1] + center2\niris_temp$pc1_Petal.Length <- pc1 * iris.pc2$rotation[3, 1] + center3\niris_temp$pc2_Sepal.Length <- pc2 * iris.pc2$rotation[1, 2] + center1\niris_temp$pc2_Sepal.Width <- pc2 * iris.pc2$rotation[2, 2] + center2\niris_temp$pc2_Petal.Length <- pc2 * iris.pc2$rotation[3, 2] + center3\niris_temp$pc3_Sepal.Length <- pc3 * iris.pc2$rotation[1, 3] + center1\niris_temp$pc3_Sepal.Width <- pc3 * iris.pc2$rotation[2, 3] + center2\niris_temp$pc3_Petal.Length <- pc3 * iris.pc2$rotation[3, 3] + center3\n\npacman::p_load(plotly)\n\nfig <- \n  plot_ly(\n    iris_temp, \n    x =~ Sepal.Length, \n    y =~ Sepal.Width, \n    z =~ Petal.Length, \n    type = \"scatter3d\",\n    mode = \"markers\",\n    name = 'data',  \n    marker = list(size = 2)) |> \n  add_trace(\n    x =~ pc1_Sepal.Length, \n    y =~ pc1_Sepal.Width, \n    z =~ pc1_Petal.Length, \n    type = \"scatter3d\", \n    mode = \"markers+lines\",\n    name = 'PC1', \n    marker = list(color = \"red\", size = 0.1),\n    line = list(color = \"red\", width = 5)) |> \n  add_trace(\n    x =~ pc2_Sepal.Length, \n    y =~ pc2_Sepal.Width, \n    z =~ pc2_Petal.Length, \n    type = \"scatter3d\",\n    mode = \"markers+lines\",\n    name = 'PC2',\n    marker = list(color = \"red\", size = 0.1),\n    line = list(color = \"blue\", width = 5)) |> \n  add_trace(\n    x =~ pc3_Sepal.Length, \n    y =~ pc3_Sepal.Width, \n    z =~ pc3_Petal.Length, \n    type = \"scatter3d\", \n    mode = \"markers+lines\",\n    name = 'PC3',\n    marker = list(color=\"red\", size=0.1),\n    line = list(color=\"green\", width=5))\n\nfig\n```\n:::\n\n\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-3b7556e142bb8041d275\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3b7556e142bb8041d275\">{\"x\":{\"visdat\":{\"79ac2cda41fe\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"79ac2cda41fe\",\"attrs\":{\"79ac2cda41fe\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"marker\":{\"color\":\"orange\",\"size\":3},\"name\":\"data\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"},\"79ac2cda41fe.1\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers+lines\",\"marker\":{\"color\":\"red\",\"size\":0.10000000000000001},\"name\":\"PC1\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\",\"line\":{\"color\":\"red\",\"width\":5},\"inherit\":true},\"79ac2cda41fe.2\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers+lines\",\"marker\":{\"color\":\"red\",\"size\":0.10000000000000001},\"name\":\"PC2\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\",\"line\":{\"color\":\"blue\",\"width\":5},\"inherit\":true},\"79ac2cda41fe.3\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers+lines\",\"marker\":{\"color\":\"red\",\"size\":0.10000000000000001},\"name\":\"PC3\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\",\"line\":{\"color\":\"green\",\"width\":5},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"Sepal.Length\"},\"yaxis\":{\"title\":\"Sepal.Width\"},\"zaxis\":{\"title\":\"Petal.Length\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[7,6.4000000000000004,6.9000000000000004,5.5,6.5,5.7000000000000002,6.2999999999999998,4.9000000000000004,6.5999999999999996,5.2000000000000002,5,5.9000000000000004,6,6.0999999999999996,5.5999999999999996,6.7000000000000002,5.5999999999999996,5.7999999999999998,6.2000000000000002,5.5999999999999996,5.9000000000000004,6.0999999999999996,6.2999999999999998,6.0999999999999996,6.4000000000000004,6.5999999999999996,6.7999999999999998,6.7000000000000002,6,5.7000000000000002,5.5,5.5,5.7999999999999998,6,5.4000000000000004,6,6.7000000000000002,6.2999999999999998,5.5999999999999996,5.5,5.5,6.0999999999999996,5.7999999999999998,5,5.5999999999999996,5.7000000000000002,5.7000000000000002,6.2000000000000002,5.0999999999999996,5.7000000000000002,6.2999999999999998,5.7999999999999998,7.0999999999999996,6.2999999999999998,6.5,7.5999999999999996,4.9000000000000004,7.2999999999999998,6.7000000000000002,7.2000000000000002,6.5,6.4000000000000004,6.7999999999999998,5.7000000000000002,5.7999999999999998,6.4000000000000004,6.5,7.7000000000000002,7.7000000000000002,6,6.9000000000000004,5.5999999999999996,7.7000000000000002,6.2999999999999998,6.7000000000000002,7.2000000000000002,6.2000000000000002,6.0999999999999996,6.4000000000000004,7.2000000000000002,7.4000000000000004,7.9000000000000004,6.4000000000000004,6.2999999999999998,6.0999999999999996,7.7000000000000002,6.2999999999999998,6.4000000000000004,6,6.9000000000000004,6.7000000000000002,6.9000000000000004,5.7999999999999998,6.7999999999999998,6.7000000000000002,6.7000000000000002,6.2999999999999998,6.5,6.2000000000000002,5.9000000000000004],\"y\":[3.2000000000000002,3.2000000000000002,3.1000000000000001,2.2999999999999998,2.7999999999999998,2.7999999999999998,3.2999999999999998,2.3999999999999999,2.8999999999999999,2.7000000000000002,2,3,2.2000000000000002,2.8999999999999999,2.8999999999999999,3.1000000000000001,3,2.7000000000000002,2.2000000000000002,2.5,3.2000000000000002,2.7999999999999998,2.5,2.7999999999999998,2.8999999999999999,3,2.7999999999999998,3,2.8999999999999999,2.6000000000000001,2.3999999999999999,2.3999999999999999,2.7000000000000002,2.7000000000000002,3,3.3999999999999999,3.1000000000000001,2.2999999999999998,3,2.5,2.6000000000000001,3,2.6000000000000001,2.2999999999999998,2.7000000000000002,3,2.8999999999999999,2.8999999999999999,2.5,2.7999999999999998,3.2999999999999998,2.7000000000000002,3,2.8999999999999999,3,3,2.5,2.8999999999999999,2.5,3.6000000000000001,3.2000000000000002,2.7000000000000002,3,2.5,2.7999999999999998,3.2000000000000002,3,3.7999999999999998,2.6000000000000001,2.2000000000000002,3.2000000000000002,2.7999999999999998,2.7999999999999998,2.7000000000000002,3.2999999999999998,3.2000000000000002,2.7999999999999998,3,2.7999999999999998,3,2.7999999999999998,3.7999999999999998,2.7999999999999998,2.7999999999999998,2.6000000000000001,3,3.3999999999999999,3.1000000000000001,3,3.1000000000000001,3.1000000000000001,3.1000000000000001,2.7000000000000002,3.2000000000000002,3.2999999999999998,3,2.5,3,3.3999999999999999,3],\"z\":[4.7000000000000002,4.5,4.9000000000000004,4,4.5999999999999996,4.5,4.7000000000000002,3.2999999999999998,4.5999999999999996,3.8999999999999999,3.5,4.2000000000000002,4,4.7000000000000002,3.6000000000000001,4.4000000000000004,4.5,4.0999999999999996,4.5,3.8999999999999999,4.7999999999999998,4,4.9000000000000004,4.7000000000000002,4.2999999999999998,4.4000000000000004,4.7999999999999998,5,4.5,3.5,3.7999999999999998,3.7000000000000002,3.8999999999999999,5.0999999999999996,4.5,4.5,4.7000000000000002,4.4000000000000004,4.0999999999999996,4,4.4000000000000004,4.5999999999999996,4,3.2999999999999998,4.2000000000000002,4.2000000000000002,4.2000000000000002,4.2999999999999998,3,4.0999999999999996,6,5.0999999999999996,5.9000000000000004,5.5999999999999996,5.7999999999999998,6.5999999999999996,4.5,6.2999999999999998,5.7999999999999998,6.0999999999999996,5.0999999999999996,5.2999999999999998,5.5,5,5.0999999999999996,5.2999999999999998,5.5,6.7000000000000002,6.9000000000000004,5,5.7000000000000002,4.9000000000000004,6.7000000000000002,4.9000000000000004,5.7000000000000002,6,4.7999999999999998,4.9000000000000004,5.5999999999999996,5.7999999999999998,6.0999999999999996,6.4000000000000004,5.5999999999999996,5.0999999999999996,5.5999999999999996,6.0999999999999996,5.5999999999999996,5.5,4.7999999999999998,5.4000000000000004,5.5999999999999996,5.0999999999999996,5.0999999999999996,5.9000000000000004,5.7000000000000002,5.2000000000000002,5,5.2000000000000002,5.4000000000000004,5.0999999999999996],\"mode\":\"markers\",\"marker\":{\"color\":\"orange\",\"size\":3,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"name\":\"data\",\"type\":\"scatter3d\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null},{\"x\":[6.4689190917043273,6.1603715340110314,6.5145947477934616,5.5005253677012771,6.196659386171242,5.8628660535303219,6.2291362426845289,4.9707121034497375,6.2441078232222784,5.3924296940233569,5.0535620021800343,5.8180767879221396,5.6685003952033677,6.111150315998092,5.4194482499328833,6.2099766934253271,5.8500511953558316,5.7009772517166537,5.9731184495715022,5.5129562844744111,6.1205381199270148,5.7736714637153135,6.2299041254872431,6.0996057897059099,6.0326138619943146,6.1625282563742907,6.3974952115879757,6.4778044465536562,5.982122312099067,5.3741565352451071,5.4189458008532894,5.372383754283204,5.6078531585764839,6.238405538935214,5.7782433738381229,6.0398449435599773,6.3496628331355822,5.9740048400524532,5.6638030090754912,5.5236144202856412,5.7214071328581646,6.0761327957201887,5.6428706788543863,4.9950714879164098,5.6757314767690303,5.7462689664044309,5.7347244401122488,5.9608060404766059,4.9143783115493722,5.6766178672499814,6.8344428480956356,6.1665977174175053,7.0404785087198398,6.6020165566465669,6.7784929975966275,7.5459323885047072,5.5410011885829409,7.286989990225706,6.7925781876534268,7.2387736703719563,6.475647724190396,6.4751452751108021,6.7465185901629354,6.0610427075042015,6.1781422437096873,6.5328679065717123,6.6388068578863724,7.7207545561711033,7.6753443338050893,6.1341208609042184,6.8986356466463246,6.013210329051808,7.6053092932492827,6.2529931780716073,6.8383723514207979,7.1460335186331427,6.1820717470348496,6.2158189354304438,6.6263759411132392,7.0298203729086088,7.2182252815522085,7.6528762379785569,6.6263759411132392,6.3576617975039591,6.4955751562523121,7.3490260664131357,6.6597391881074763,6.6144474734197001,6.1333529781015041,6.7474049806438874,6.7687212522663485,6.6077188409336314,6.1665977174175053,6.9558558290276409,6.8383723514207979,6.570928539693826,6.2764661720573276,6.4991207181761173,6.5307111842084522,6.2371352070529058],\"y\":[2.9385326657750204,2.8393224316558761,2.9532191943867718,2.6271558109520341,2.8509904102826074,2.7436626617621251,2.8614330031918658,2.4567999073798781,2.8662469580369083,2.5923987797409387,2.4834394241896351,2.7292611427216493,2.6811664209508246,2.8234958647590247,2.601086313284827,2.8552724508872767,2.7395421783941813,2.691609013860083,2.7791131644503193,2.6311528419854282,2.8265144147440444,2.7149830760157223,2.8616799078609638,2.8197838432969053,2.798243290903466,2.8400159031329757,2.9155670655252055,2.9413896585233146,2.7820082621007902,2.5865232370076252,2.6009247560481006,2.5859532178650748,2.661665937494031,2.8644134482747083,2.7164531258098172,2.8005683694113865,2.9001870654363553,2.7793981740215945,2.6796560256620769,2.6345798538762724,2.6981780280704961,2.8122363480381174,2.6729254542149379,2.4646324122099408,2.6834914994587451,2.7061720901372852,2.7024600686751659,2.7751542383191019,2.4386863668772829,2.6837765090300203,3.0560629995712052,2.8413243956903447,3.1223116073392778,2.9813287609906238,3.0380729114031593,3.2848350060813707,2.6401703870383111,3.201574791193627,3.0426018566769271,3.1860713387702275,2.9406961870462149,2.940534629809489,3.0277918757306272,2.8073842882908977,2.8450364171524636,2.9590947371200853,2.9931582968540811,3.3410472422535329,3.3264460610741544,2.8308818027810863,3.0767035213131,2.7920042882020475,3.3039270276323407,2.8691039507852025,3.0573264901908552,3.1562517147387243,2.8462999077721136,2.857150962587196,2.9891612658206865,3.1188845954484337,3.1794642196576377,3.3192216802888188,2.9891612658206865,2.9027590486133739,2.9471036440199021,3.2215218414584221,2.9998888683012201,2.9853257920240184,2.8306348981119878,3.0280768853019024,3.0349309090835903,2.9831622707528238,2.8413243956903447,3.0951020713869704,3.0573264901908552,2.9713327348893666,2.87665144604399,2.9482436823050024,2.9584012656429861,2.8640049863688843],\"z\":[5.1743433693027594,4.7742029543241964,5.2335779201077015,3.9184803526510628,4.8212629159412028,4.388382475601496,4.86338058149519,3.231391136960394,4.8827965006943135,3.7782962978938857,3.3388351663564277,4.3302974417706395,4.1363190473184623,4.7103703356229145,3.8133353572031994,4.8385334880723994,4.3717635053974622,4.1784367128724487,4.5313634793537645,3.9346014078081737,4.7225449248108493,4.2727103229867041,4.8643764115890331,4.6953987974398883,4.608520204217065,4.7769999033192878,5.0817171912095107,5.1858663565635306,4.5430401534947773,3.7545987214451801,3.8126837552760362,3.7522996874970103,4.0576685773143968,4.8754014838028823,4.2786394122572924,4.6178978444099075,5.0196856914094781,4.5325129963278492,4.1302272342813566,3.9484234290171152,4.2049312383162469,4.6649578060269139,4.1030811069103965,3.2629816453474527,4.1456966875113057,4.2371733486304688,4.2222018104474426,4.5153961110768943,3.1583345649465113,4.1468462044853904,5.6483734626225317,4.7822773906627125,5.915571152855108,5.3469510387743213,5.575814805655571,6.5710698601587181,3.9709714884917364,6.2352599789283571,5.5940812078806106,6.1727305640814025,5.1830694075684391,5.1824178056412764,5.5343487420287474,4.6453881999475488,4.7972489288457387,5.2572754965564066,5.3946626023184923,6.797788279972039,6.7388979573337782,4.7401597251087253,5.7316220005229379,4.5833567001475162,6.6480728981417778,4.8943194879550855,5.6534694455657934,6.0524603435702717,4.8023449117890005,4.8461100093639935,5.3785415471613813,5.9017491316461665,6.1460823517573644,6.7097601697751301,5.3785415471613813,5.0300591616961636,5.2089123310850729,6.3157115678336719,5.4218087296894524,5.3630720939314331,4.7391638950148822,5.535498259002833,5.5631423014207151,5.3543460556657534,4.7822773906627125,5.8058280895109053,5.6534694455657934,5.3066344921215833,4.9247604793680591,5.2135103989814136,5.2544785475613152,4.8737540517818756],\"mode\":\"markers+lines\",\"marker\":{\"color\":\"red\",\"size\":0.10000000000000001,\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"name\":\"PC1\",\"type\":\"scatter3d\",\"line\":{\"color\":\"red\",\"width\":5},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"frame\":null},{\"x\":[6.7726616452802393,6.5832701027467548,6.6165027262123592,6.1391211364081588,6.4786826530369126,6.1565025307261569,6.481255923958364,6.1857761608127504,6.5512518933854604,6.1527148457003955,6.0393938717432416,6.4270255295022505,6.3395331173124276,6.28197270298178,6.5142315848940937,6.7344831825930846,6.1651504007968434,6.34210638823388,6.2215526609317031,6.2805575862561174,6.2304012336237431,6.5474642083596981,6.1810872841210749,6.2549003328420358,6.5856426710468536,6.6619139422445368,6.5315835849439887,6.456641776295343,6.3200655114923094,6.5203061840433287,6.2497831852672361,6.2915780246269017,6.4256960669532122,6.0151517350548245,6.0741566603792378,6.455427362191033,6.6090986645140859,6.3359167406399166,6.3323297582355078,6.1932658766876481,6.0531588893887278,6.3508399124811907,6.3568288574538006,6.2042006608818081,6.2093178084566079,6.3360317890846449,6.3089594189448999,6.4946489306292481,6.429226789449098,6.3236818881648214,5.9379230122827051,5.9241579946372189,6.2624757028935587,5.9968128891623911,6.0312893210004086,6.1973961784199103,5.7113104586365013,6.1592177157327557,5.9869212107192915,6.3868171152214979,6.377997936797561,6.1135495371707034,6.2931644497058157,5.8663112235085926,5.9512303647769631,6.248911387869426,6.1566738390794074,6.4176771703870035,6.0092190499907359,5.9215847237157666,6.3092163814747755,5.9438263030786898,6.1469534689895573,6.2352320244005641,6.2452950111969141,6.3203224740221851,6.2586023636911721,6.2254553944021929,6.0152373892314497,6.349767412462028,6.2612318945211465,6.6340554288836078,6.0152373892314497,6.178714715820977,5.8246020383255512,6.451867245427044,6.1321747398611137,6.1382493390103496,6.2217533635530566,6.4075285294140292,6.2329451102770914,6.532913047493027,5.9241579946372189,6.1801298325466396,6.2452950111969141,6.3730520975760108,6.1392924447614092,6.2820583571584052,6.1702675483716432,6.0508719752652551],\"y\":[3.175863123193972,3.0631679440031263,3.0829426203500181,2.7988823973551944,3.0009344290927111,2.8092249887985647,3.002465623272347,2.8266439133399914,3.0441158902890426,2.8069711719861208,2.7395408776057648,2.970196473662662,2.9181351569973302,2.8838845187665085,3.0220873971297069,3.1531454841895838,2.8143708007719948,2.9196663511769665,2.8479322931577644,2.8830424704319246,2.8531975308329702,3.0418620734765986,2.8238538531720265,2.8677754277099212,3.0645797124809868,3.1099640229932519,3.0324124978643225,2.9878192681901306,2.9065511902743859,3.025702014923501,2.8647305300594037,2.8896000508832147,2.9694053928245885,2.7251158832183453,2.7602260604925055,2.9870966455573225,3.0785369217181509,2.9159832751779073,2.9138488840672392,2.831100579468369,2.7477315872297119,2.9248631306469068,2.9284267809441902,2.8376071924231487,2.8406520900736658,2.9160517333831724,2.8999426423265855,3.0104349722014976,2.971506307147501,2.9087030720938092,2.6791618525628031,2.6709711429388561,2.8722830613348096,2.7142035716316983,2.7347183613201529,2.8335582662668553,2.5443187545108463,2.8108406272624675,2.708317646316706,2.9462709361664561,2.9410231892000049,2.7836663221297018,2.8905440342108197,2.6365501115097478,2.6870802339954434,2.8642117774126383,2.8093269237915859,2.9646338440354874,2.7215857097088181,2.6694399487592197,2.900095544816117,2.6826745353635757,2.8035429334696147,2.8560720352852011,2.8620598955932151,2.9067040927639178,2.8699782770258548,2.8502545681754734,2.7251668507148561,2.9242249522983652,2.8715429479932468,3.0933871467864096,2.7251668507148561,2.8224420846941665,2.6117315581824476,2.9849782405256553,2.7947490269146349,2.798363644708429,2.8480517188595402,2.9585950162309627,2.8547112343038519,3.0332035787023961,2.6709711429388561,2.8232841330287504,2.8620598955932151,2.9380802265425086,2.7989843323482155,2.8839354862630193,2.8174156984225123,2.7463707862483626],\"z\":[4.4368903374302677,4.6108712961190434,4.5803427750829648,5.0188803440972887,4.7069485787892322,5.0029132549319506,4.7045846921241194,4.9760215882892043,4.6402842186057551,5.0063927401464321,5.1104929096940026,4.7544024183611668,4.8347756681227692,4.8876524541386956,4.6742922248563161,4.4719622601292466,4.9949690526439952,4.8324117814576555,4.9431561830764865,4.8889524243553906,4.935027609121204,4.6437637038202366,4.9803289361838274,4.9125219749625071,4.6086917811212569,4.5386266203127246,4.6583521381794535,4.727196013360718,4.8526592160291413,4.6687119092334735,4.9172227458042572,4.8788287070696477,4.7556237039884364,5.1327624900844233,5.0785587313633274,4.7283116119100868,4.587144376333077,4.8380977841583999,4.8413928977055551,4.9691413024496667,5.0978479365642952,4.8243888945802746,4.8188872635468574,4.9590962697533492,4.9543954989115981,4.837992097080499,4.8628616179043096,4.6922814598405891,4.7523802725422311,4.8493370999935106,5.203707195674049,5.2163521688037555,4.9055630045335432,5.149609124030853,5.1179380019569294,4.9653470788774827,5.4118805322807129,5.0004190015764616,5.1586959273566526,4.7913391177002307,4.7994406891670378,5.0423712101149789,4.877371367674102,5.2694920110764336,5.191482647979945,4.9180236059959235,5.0027558857530998,4.7629901116619378,5.1382124390168906,5.2187160554688692,4.8626255641360334,5.1982842492300572,5.0116853199000486,4.9305898945362054,4.9213457220315542,4.8524231622608651,4.9091211743374501,4.9395710107841042,5.1326838054949979,4.8253741264392671,4.9067056055713865,4.564218316738776,5.1326838054949979,4.982508451181614,5.3078073652216187,4.7315820458447657,5.0252615199117976,5.0196812042889549,4.9429718114091603,4.7723129687560144,4.9326907249445666,4.657130852552184,5.2163521688037555,4.9812084809649191,4.9213457220315542,4.803984090829938,5.018722974918437,4.8875737695492703,4.9902682818022441,5.0999487669726564],\"mode\":\"markers+lines\",\"marker\":{\"color\":\"red\",\"size\":0.10000000000000001,\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"name\":\"PC2\",\"type\":\"scatter3d\",\"line\":{\"color\":\"blue\",\"width\":5},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"frame\":null},{\"x\":[5.9354950020484951,6.0565874823208148,6.0353393275849996,6.340565843893212,6.1234582280854113,6.3294525907859063,6.1218129394198089,6.3107357229345702,6.0770591693537881,6.3318743471543497,6.4043291021016069,6.1564865731153375,6.2124271555476316,6.2492299253205648,6.1007290804580467,5.9599054095985284,6.3239233468612621,6.21078186688203,6.2878610735341036,6.2501347175403925,6.2822035050924736,6.0794809257222324,6.3137336799747352,6.2665393595393208,6.0550705181721991,6.0063044683301507,6.0896346213516921,6.137550644231931,6.2248742830285497,6.096845125199005,6.2698111428695738,6.2430885094671327,6.157336600077147,6.4198289518807075,6.3821025958869964,6.138327111934772,6.0400733098058517,6.2147393814000402,6.2170328132514978,6.3059469754557007,6.3955280748467098,6.2051978576993685,6.2013686676983442,6.2989555326404583,6.2956837493102054,6.2146658221410718,6.231975256359827,6.1132497671979333,6.1550791394827566,6.2225620571761411,6.4692071736515446,6.4780082009064417,6.2616958468024331,6.4315543769168011,6.4095109604771947,6.3033061580551868,6.6140978895451088,6.3277165656052192,6.4378788825452373,6.1821948837819161,6.187833658222595,6.356915720634122,6.2420741867312701,6.5149940604543781,6.4606987666876865,6.2703685495403443,6.3293430602698706,6.1624636931947165,6.4236221706246646,6.4796534895720432,6.2318109605857739,6.4654327489085386,6.3355580353822711,6.279114811537224,6.2726807753927529,6.2247099872544966,6.2641723684288948,6.2853657579066917,6.4197741866226901,6.2058835888871249,6.2624911085062251,6.0241165439616591,6.4197741866226901,6.3152506441233509,6.5416619285988018,6.1406033665301134,6.3450072058230242,6.3411232505639825,6.2877327490171178,6.1689524945972058,6.2805770104278222,6.0887845943898817,6.4780082009064417,6.314345851903524,6.2726807753927529,6.1909959110368131,6.3404563133771763,6.2491751600625474,6.3206515635310092,6.3969902737373081],\"y\":[3.5499107052008014,3.2984906987354945,3.3426074860788586,2.7088765348999235,3.1596493495892441,2.7319505867469567,3.1630654038810766,2.7708117532340135,3.2559860636449334,2.7269223802023212,2.5764871515546361,3.0910737724577158,2.9749263323757953,2.8985140515021723,3.2068410697569329,3.4992282449006384,2.7434307590925551,2.9783423866676277,2.818305573554015,2.8966354636225025,2.8300521815264807,3.2509578571002971,2.7645872017447219,2.8625750893684097,3.3016403174004605,3.4028915308449488,3.2298761002887706,3.1303897675681158,2.9490828046464994,3.2149051878106989,2.8557820020999398,2.9112652546330664,3.0893088917338813,2.5443053651802141,2.622635255248702,3.1287776153153124,3.3327784873012587,2.9701255401428304,2.9653637692250623,2.7807544591674489,2.5947604111687044,2.9899362661690621,2.9978866770669916,2.7952705430221774,2.8020636302906472,2.9702782686138622,2.9343393064800996,3.1808448135566065,3.0939959768110095,2.9538835968794639,2.4417831209504288,2.4235098613363606,2.8726315024576814,2.5199602825478857,2.5657282434592483,2.7862374943354284,2.140951684970255,2.7355550340352659,2.5068289366342889,3.0376965221159313,3.0259889354586607,2.6749298678016675,2.9133712568244086,2.3467174376800353,2.4594488234701228,2.8546246784704805,2.7321780010586285,3.0786636907943294,2.5364296401229245,2.4200938070445277,2.9346804279476073,2.4496198246925225,2.7192740694567035,2.8364651260122473,2.849823886237516,2.9494239261140072,2.8674895887572105,2.8234865085696814,2.54441907233605,2.9885125069127358,2.8709803288896838,3.3659089522375627,2.54441907233605,2.7614375830797568,2.2913478923027442,3.1240515089229892,2.6996550932166987,2.7077192112704647,2.8185720091808819,3.0651912234132248,2.8334292145031181,3.2316409810126054,2.4235098613363606,2.7633161709594267,2.849823886237516,3.0194232625018622,2.7091039492115954,2.8986277586580087,2.7502238463610253,2.5917244996595752],\"z\":[4.9896872224455002,4.958649739415816,4.9640959012298431,4.8858626137554984,4.9415099497923523,4.8887110763846131,4.9419316573907324,4.8935084384255783,4.9534025957662182,4.8880903506218036,4.8695193111812189,4.9330443811950326,4.9187061260531078,4.9092731262524261,4.9473357081893807,4.9834305365771625,4.8901282891966078,4.9191278336514879,4.8993714907057884,4.9090412169455471,4.9008215946602327,4.9527818700034079,4.8927400253866464,4.9048365066571398,4.9590385558717465,4.9715378906032957,4.9501793536862984,4.9378978912565019,4.9155157751156384,4.9483312134029953,4.9039979085925758,4.9108472462134714,4.932826508893279,4.8655465101996915,4.8752162364394493,4.9376988730920726,4.9628825237144758,4.9181134743005499,4.9175256396801901,4.8947358529460718,4.8717751220577767,4.9205590834686088,4.9215405516770963,4.8965278452088707,4.8973664432734338,4.9181323284378742,4.913695708842587,4.944126503114588,4.9334051236407097,4.9161084268681954,4.8528902683190909,4.8506344574425331,4.9060779581827596,4.8625411404215253,4.8681911375321798,4.8954127267293872,4.8157530065701186,4.8891560408610495,4.8609200923129041,4.9264550268912695,4.9250097400690223,4.8816719404722173,4.9111072295306037,4.8411545294942755,4.8550710770378194,4.9038550384486514,4.8887391503948665,4.9315123722493661,4.8645742618641323,4.8502127498441521,4.9137378198579658,4.8538576995224521,4.8871461762964969,4.9016132645772199,4.9032623866960945,4.9155578861310172,4.905443195414823,4.9000110706059221,4.8655605472048178,4.920383322182234,4.9058741228861322,4.9669724378692113,4.8655605472048178,4.892351208930716,4.8343192288785062,4.9371154412124438,4.8847242383979594,4.885719743611574,4.899404381848238,4.9298492131253653,4.9012384851264157,4.950397225988052,4.8506344574425331,4.8925831182375958,4.9032623866960945,4.9241992160147108,4.8858906877657509,4.9092871632575523,4.8909668872611709,4.8714003426069725],\"mode\":\"markers+lines\",\"marker\":{\"color\":\"red\",\"size\":0.10000000000000001,\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"name\":\"PC3\",\"type\":\"scatter3d\",\"line\":{\"color\":\"green\",\"width\":5},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n主成分分析は、主成分回帰のようなデータの前処理の他に、次元を圧縮することでデータの類似性や違いを分かりやすく示す場合に用いられています。\n\n例えば、ヒトのDNAには無数のSNP（Single Nucleotide polymorphism、一塩基多型）があります。このSNPというのは、DNAの塩基が置き換わっているもの（例えば、AがCに代わっている）を指し、置き換わりが各個々人によって異なることを意味しています。私のDNAのある位置の塩基がAで、別の方ではCになっている、というように、多型を示すことがSNPです。ヒトのDNAの長さは大体3×10^9^塩基あります。この長いDNAには、SNPが6000万個ぐらいあります。\n\nヒトを含め、分子系統樹と呼ばれる祖先からの遺伝子変化の流れを調べる場合には、近年ではこのSNPを指標に系統樹を書きます（以前はミトコンドリアDNAやリボソーム蛋白のDNAのSNPや反復配列の長さが使われていたような気がします）。もちろんこの6000万個のすべてのSNPを用いるわけではありませんが、通常取り扱うSNPは非常に多くなります。このたくさんあるSNPを用いて、例えば日本人と韓国人の違いを示すことを考えると、ひとつづつSNPを見て特徴を捉えていては、いつまでたっても違いはわかりません。このように、膨大なデータ（の次元）がある場合に、主成分分析は力を発揮します。膨大なデータを第一主成分と第二主成分に変換してしまえば、2次元のプロットを利用して日本人と韓国人の違いを表すことができます。ヒトの歴史的な移動に関して、このSNPと主成分分析を用いて[論文](https://www.nature.com/articles/jhg2012114#citeas)が発表されています[@1523106605673180672]。この論文を見ていただければわかる通り、主成分分析を用いれば膨大なSNPのデータを2次元に集約し、わかりやすい表現で説明することができます。\n\nただし、この第一主成分や第二主成分などの主成分が何を意味しているのかは、その時々によって異なりますし、理解が難しいことも多いです。「主成分が近いものは類似している」ぐらいの意味しかわからない場合もあると考えるとよいでしょう。\n\n### Rで主成分分析\n\nRでは、`prcomp`関数で主成分分析の計算を行うことができます。`prcomp`関数は引数に行列やデータフレームを取ります。`prcomp`関数の返り値は各主成分方向の標準偏差（standard deviations）と、回転（Rotation）です。回転は、データを主成分に変換するときの係数を示します。\n\n\n::: {.cell filename='主成分分析'}\n\n```{.r .cell-code}\niris.pc <- prcomp(iris[ ,1:4])\n\niris.pc\n## Standard deviations (1, .., p=4):\n## [1] 2.0562689 0.4926162 0.2796596 0.1543862\n## \n## Rotation (n x k) = (4 x 4):\n##                      PC1         PC2         PC3        PC4\n## Sepal.Length  0.36138659 -0.65658877  0.58202985  0.3154872\n## Sepal.Width  -0.08452251 -0.73016143 -0.59791083 -0.3197231\n## Petal.Length  0.85667061  0.17337266 -0.07623608 -0.4798390\n## Petal.Width   0.35828920  0.07548102 -0.54583143  0.7536574\n```\n:::\n\n\n`prcomp`関数の返り値を`summary`関数の引数に取ると、標準偏差、分散の配分（Proportion of Variance）、積算の分配の配分（Cumulative Proportion）が示されます。このうち、分散の配分はその主成分によってばらつきをどれだけ説明できているかを示すものです。下の例では、PC1で92.5%程度のばらつきを示すことができている、つまり、PC1でデータの差を十分説明できていることがわかります。\n\n\n::: {.cell filename='summaryの結果'}\n\n```{.r .cell-code}\niris.pc |> summary()\n## Importance of components:\n##                           PC1     PC2    PC3     PC4\n## Standard deviation     2.0563 0.49262 0.2797 0.15439\n## Proportion of Variance 0.9246 0.05307 0.0171 0.00521\n## Cumulative Proportion  0.9246 0.97769 0.9948 1.00000\n```\n:::\n\n\n主成分分析では、Cumulative Proportionにもよりますが、第一主成分（PC1）と第二主成分（PC2）に変換したデータをプロットして、データの類似性などを示すことが一般的です。変換後の主成分は、`$x`で呼び出すことができます。以下のように、`iris`の種が同じ、つまりよく似たデータであれば、比較的近い位置に変換後のデータが集まるのがわかります。\n\n\n::: {.cell filename='第一主成分と第二主成分をプロット'}\n\n```{.r .cell-code}\niris.pc <- prcomp(iris[ ,1:4])\nirispcd <- iris.pc$x |> as.data.frame()\nirispcd$Species <- iris$Species\nggplot(irispcd, aes(x = PC1, y = PC2, color = Species)) + geom_point(size = 2)\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## 因子分析\n\n**因子分析**も主成分分析と同じく、多次元のデータをいくつかの因子に変換することで、データの性質を簡単に理解できるようにするための手法です。主成分分析との違いは、主成分分析では主成分の意味を理解するのが難しいのに対して、因子分析では因子の意味付けが比較的容易であること、因子間の相関は必ずしも0とはならないこと、主成分分析が射影の計算であるのにたいして、因子分析は回転の計算を行うことなどです。\n\nRでは、因子分析を`factanal`関数を用いて行うことができます。以下の例では、鹿児島大学が[成績サンプルデータ](https://estat.sci.kagoshima-u.ac.jp/data/cgi-bin/data/whats_data/data/img/932722923_9821.xls)として提供しているデータを用いて因子分析を行っています。\n\n`factanal`関数はデータフレームまたは行列を第一引数に取り、因子の数（`factors`）、回転の方法（`rotation`）、算出するスコアのタイプ（`scores`）を引数として設定して用います。\n\n`factors`には、出力として得たい因子の数を指定します。以下の例では、理系・文系科目の得意・不得意を評価する因子を作成するため、因子数を`2`としています。\n\n`rotation`には`\"varimax\"`か`\"promax\"`のどちらかを選択するのが一般的です。`varimax`回転はデータをそのまま回転させる方法（直交回転）、`promax`回転はデータの軸の角度を変換させて回転させる方法（斜交回転）です。`promax`回転では因子間に相関が生じるのが特徴です。\n\n`scores`には計算して得られる数値（因子スコア）の計算方法を指定します。方法には`\"none\"`、`\"Bartlett\"`、`\"regression\"`のいずれかを選択します。`\"none\"`を指定するとスコアが算出されないので、`\"Bartlett\"`か`\"regression\"`のいずれかを選択します。\n\n`factanal`関数の返り値のうち、Loadingが各データの寄与率を示す値となります。以下のvarimax変換の例では、Factor1（因子1）では数学、物理、化学、Factor2では国語、英語の値が高いため、Factor1は理系科目の、Factor2は文系科目の評価を反映していることがわかります。\n\n\n::: {.cell filename='因子分析：バリマックス変換'}\n\n```{.r .cell-code}\nm1 <- read.csv(\"./data/testresult.csv\", fileEncoding = \"CP932\")\nm1v <- factanal(m1[ ,2:6], factors = 2, scores = \"Bartlett\") # varimax変換\nm1v\n## \n## Call:\n## factanal(x = m1[, 2:6], factors = 2, scores = \"Bartlett\")\n## \n## Uniquenesses:\n##  国語  英語  数学  物理  化学 \n## 0.005 0.436 0.171 0.191 0.279 \n## \n## Loadings:\n##      Factor1 Factor2\n## 国語         0.994  \n## 英語 0.362   0.658  \n## 数学 0.882   0.226  \n## 物理 0.893   0.109  \n## 化学 0.793   0.302  \n## \n##                Factor1 Factor2\n## SS loadings      2.343   1.575\n## Proportion Var   0.469   0.315\n## Cumulative Var   0.469   0.784\n## \n## Test of the hypothesis that 2 factors are sufficient.\n## The chi square statistic is 1.47 on 1 degree of freedom.\n## The p-value is 0.225\n```\n:::\n\n\n同様にpromax回転での因子分析でも、Factor1が理系科目、Factor2が文系科目の成績を反映していることがわかります。ただし、寄与率はバリマックスとは異なり、Factor1での理系科目の寄与率もFactor2での文系科目の寄与率もvarimax回転より高いため、こちらの方がより理系度・文系度を反映していることがわかります。\n\n\n::: {.cell filename='因子分析：プロマックス変換'}\n\n```{.r .cell-code}\nm1p <- factanal(m1[,2:6], factors = 2, rotation = \"promax\", scores = \"Bartlett\") # promax変換\nm1p\n## \n## Call:\n## factanal(x = m1[, 2:6], factors = 2, scores = \"Bartlett\", rotation = \"promax\")\n## \n## Uniquenesses:\n##  国語  英語  数学  物理  化学 \n## 0.005 0.436 0.171 0.191 0.279 \n## \n## Loadings:\n##      Factor1 Factor2\n## 国語 -0.149   1.060 \n## 英語  0.239   0.607 \n## 数学  0.923         \n## 物理  0.964  -0.158 \n## 化学  0.806         \n## \n##                Factor1 Factor2\n## SS loadings      2.509   1.524\n## Proportion Var   0.502   0.305\n## Cumulative Var   0.502   0.807\n## \n## Factor Correlations:\n##         Factor1 Factor2\n## Factor1   1.000  -0.475\n## Factor2  -0.475   1.000\n## \n## Test of the hypothesis that 2 factors are sufficient.\n## The chi square statistic is 1.47 on 1 degree of freedom.\n## The p-value is 0.225\n```\n:::\n\n\n以下に、varimax回転、promax回転それぞれでの因子のスコアをプロットした結果を示します。スコアは`$scores`で呼び出すことができます。varimax回転でもpromax回転でも、概ね理系・文系科目の得意さを因子で評価できています。\n\n::: {.panel-tabset}\n\n## varimax回転\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1vs <- m1v$scores |> as.data.frame() # 計算したスコアをデータフレームに変換\nm1vs$student <- 1:nrow(m1vs) # 生徒のIDを追加\n\nggplot(m1vs, aes(x = Factor1, y = Factor2, color = student, label = student))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")+\n  labs(title = \"バリマックス回転\", x = \"理系度\", y = \"文系度\")\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## promax回転\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1ps <- m1p$scores |> as.data.frame()\nm1ps$student <- 1:nrow(m1ps)\n\nggplot(m1ps, aes(x = Factor1, y = Factor2, color = student, label = student))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")+\n  labs(title = \"プロマックス回転\", x = \"理系度\", y = \"文系度\")\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## 多次元尺度法\n\n多次元尺度法は主成分分析や因子分析とは少し異なる次元圧縮の方法です。多次元尺度法は、距離行列から互いの点の位置を求める、距離行列演算の逆のような変換を行う手法です。\n\n以下の例では、都道府県の県庁所在地の緯度・経度を`dist`関数で距離行列に変換し、距離行列を多次元尺度法で位置の情報に変換しています。\n\n\n::: {.cell filename='緯度・経度を距離行列に変換'}\n\n```{.r .cell-code}\nJPD <- read.csv(\"./data/pref_lat_lon.csv\", header = T, fileEncoding = \"CP932\")\n\nprefecture <- JPD[,1] %>% unlist()\nJPD <- JPD[,-1] %>% dist() # 距離行列を計算\n```\n:::\n\n\nRでは多次元尺度法の計算を`MASS`パッケージの`sammon`関数を用いて行うことができます。`sammon`関数の引数は距離行列です。距離行列を`sammon`関数で変換すると、`x`と`y`という、位置を示す2つの変数が求まります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(MASS)\nJPpos <- JPD |> sammon() |> _$points\n## Initial stress        : 0.00000\n## stress after  10 iters: 0.00000, magic = 0.500\nhead(JPpos)\n##           [,1]         [,2]\n## [1,] -8.669485 -3.467358210\n## [2,] -6.924994 -1.936485347\n## [3,] -6.649247 -0.774450379\n## [4,] -5.622341  0.266109548\n## [5,] -5.782950 -1.366731569\n## [6,] -5.181832  0.008206893\n```\n:::\n\n\n以下に、`sammon`関数の返り値をプロットしたものを示します。`x`と`y`の単位はありませんが、都道府県の位置関係を正確に反映していることが見て取れると思います。ただし、距離行列には方角のデータが含まれていないため、東西南北の方向は回転したり反転したりすることになります。\n\n\n::: {.cell filename='多次元尺度法の結果をプロットする'}\n\n```{.r .cell-code}\nJPpos <- as.data.frame(JPpos)\ncolnames(JPpos) <- c(\"x\", \"y\")\nJPpos$prefecture <- prefecture\n\nggplot(JPpos, aes(x = -x, y = -y, label = prefecture, color = prefecture))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n`cmdscale`関数を用いても多次元尺度法の計算を行うことができます。\n\n\n::: {.cell filename='cmdscale関数で多次元尺度法'}\n\n```{.r .cell-code}\nJPpos2 <- JPD %>% cmdscale %>% as.data.frame\ncolnames(JPpos2) <-  c(\"x\", \"y\")\nJPpos2$prefecture <- prefecture\n\nggplot(JPpos2, aes(x = x, y = y, label = prefecture, color = prefecture))+\n  geom_text(size = 3)+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter28_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "chapter28_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}