{
  "hash": "e2ae851b3f99679533f13ddafdb33c0a",
  "result": {
    "engine": "knitr",
    "markdown": "# 繰り返し文（Looping）\n\n\n\n\n\nコンピューターのいいところは、同じことを何度繰り返しても疲れないことです。Excelで表を作るときに、コピーアンドペーストを何百回も繰り返し、何時間も費やしたことがある方は多いかと思います。このような繰り返しがあっても、すべてをコンピューターに任せることができれば、コンピューターは疲れることなく、一瞬で繰り返し作業を終えてくれます。\n\nただし、コンピューターに繰り返し作業をしてもらいたければ、具体的に繰り返し作業を指示しないといけません。プログラミングでコンピューターに繰り返し作業を指示するためのものが、**繰り返し文**です。Rには繰り返し文として、**`for`**文、**`while`**文、**`repeat`**文の3つが設定されています。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：Rで使える繰り返し文\n\n|繰り返し文 |繰り返し文の形式                      |\n|:----------|:-------------------------------------|\n|for文      |for(i in ベクター){繰り返す処理}      |\n|while文    |while(条件式){TRUEの時に繰り返す処理} |\n|repeat文   |repeat{breakまで繰り返す処理}         |\n\n\n:::\n:::\n\n\n## for文\n\n`for`文はRで、そして他の言語でもよく設定されている、最も典型的な繰り返し文の一つです。Rでは、`for`文は、\n\n**for(繰り返しの条件){繰り返す処理}**\n\nという形で表記します。このうち、繰り返しの条件に関しては、\n\n**`for(i in c(1, 2, 3, 4, 5))`**\n\nといった形で、**「変数 in ベクター」**という形で書きます。これは、ベクターの要素を前から順番に変数に入れていく、ということを意味しています。\n\n\n::: {.cell filename='for文での繰り返し処理'}\n\n```{.r .cell-code}\nfor(i in c(1, 2, 3, 4, 5)){print(i)} # ベクターの要素をiに入れて、iを表示する\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n\nfor(i in c(\"dog\", \"cat\", \"pig\", \"horse\")){print(i)} # 文字列のベクターでも同じ\n## [1] \"dog\"\n## [1] \"cat\"\n## [1] \"pig\"\n## [1] \"horse\"\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## print関数とイテレーターのアルファベット\n\n上の`for`文で用いている`print`関数は、オブジェクトを表示させるための関数です。`for`文の処理中でオブジェクトを表示させる場合には`print`関数を明示的に用いる必要があります。また、`for`文で用いる変数名には`i`を用いるのが普通です。この`i`はイテレーター（iterator、繰り返すもの）の略だと思いますが、よくわかりません。`for`文の中で`for`文を呼び出す、つまり入れ子（ネスト）にする場合には、`i`以降の変数として、`j`、`k`...とアルファベット順に使っていくことが多いです。\n\n`for`文を入れ子にする場合には、Rでは以下のような表現を用いることができます。\n\n\n::: {.cell filename='for文を入れ子（ネスト）にする'}\n\n```{.r .cell-code}\nfor(i in c(1, 2)) for(j in c(4, 5)){\n  print(paste0(\"i=\", i, \", \", \"j=\", j))\n}\n## [1] \"i=1, j=4\"\n## [1] \"i=1, j=5\"\n## [1] \"i=2, j=4\"\n## [1] \"i=2, j=5\"\n\n# 以下も同じ内容のスクリプト\nfor(i in c(1, 2)){\n  for(j in c(4, 5)){\n    print(paste0(\"i=\", i, \", \", \"j=\", j))\n  }\n}\n## [1] \"i=1, j=4\"\n## [1] \"i=1, j=5\"\n## [1] \"i=2, j=4\"\n## [1] \"i=2, j=5\"\n```\n:::\n\n\n:::\n\n上の例では、`i`にベクターの要素が前から順番に代入されているのがわかると思います。`for`文では、この`in`の後のベクターとして連続した整数を用いる場合が多いのですが、整数の数が多かったり、繰り返したい回数がとても多いと、いちいち`c`関数でベクターを作るのは大変です。Rでは、連続した数値のベクターを作る場合、「`:`（コロン）」を用いることができます。コロンを用いたベクターの作り方は以下の通りです。\n\n\n::: {.cell filename=':（コロン）を用いたベクターの作成'}\n\n```{.r .cell-code}\n1:5\n## [1] 1 2 3 4 5\n\n10:20\n##  [1] 10 11 12 13 14 15 16 17 18 19 20\n\n0.5:5.5\n## [1] 0.5 1.5 2.5 3.5 4.5 5.5\n```\n:::\n\n\n`for`文はコロンを使用して、以下のような形で書くことができます。\n\n\n::: {.cell filename='コロンを使ったfor文'}\n\n```{.r .cell-code}\nfor(i in 1:5){\n  print(i - 1)\n}\n## [1] 0\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n```\n:::\n\n\nベクターを変数としてあらかじめ準備しておけば、ベクターの要素に対して同じ処理を繰り返す事もできます。\n\n\n::: {.cell filename='変数を使ったfor文'}\n\n```{.r .cell-code}\nvec <- c(\"dog\", \"cat\", \"pig\", \"horse\")\nfor(i in vec){\n  isanimal <- paste(i, \"is animal.\") # iに文字列をつなぐ\n  print(isanimal) # 文字列を繋いだものを表示する\n}\n## [1] \"dog is animal.\"\n## [1] \"cat is animal.\"\n## [1] \"pig is animal.\"\n## [1] \"horse is animal.\"\n```\n:::\n\n\n`for`文を用いれば。様々な繰り返し作業をRに行ってもらうことができます。`for`文と`if`文の組み合わせで、繰り返しの中で条件判断を行い、ベクターの要素ごとに異なる処理を行うこともできます。\n\n`for`文を途中で止める場合には`break`を、繰り返しをスキップするときには`next`を用います。\n\n\n::: {.cell filename='for文でのnextとbreak'}\n\n```{.r .cell-code}\nfor(i in 1:5){\n  if(i == 2){next} # iが2のときには繰り返しをスキップする\n  if(i == 4){break} # iが4のときには繰り返し自体を止める\n  print(i)\n}\n## [1] 1\n## [1] 3\n```\n:::\n\n\n## while文\n\n`while`文は、条件式に定めた条件が`TRUE`（真）である場合は繰り返し、`FALSE`（偽）になったら繰り返しを中止する、繰り返し文の一つです。`while`文は以下のように記述して用います。\n\n**while(条件式){TRUEのときに繰り返す処理}**\n\n`while`文では、`for`文のように繰り返し処理でベクターの要素を引き出すようなことはできないので、処理の中で要素を呼び出すような形を取ることが多いです。\n\n\n::: {.cell filename='while文'}\n\n```{.r .cell-code}\nx <- 1 # xは1\nwhile(x < 5){ # xが5以下の時、以下の処理を繰り返す\n  print(x) # xを表示する\n  x <- x + 1 # xに1を足す\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## 変数を自身に代入する\n\nこの、「`x <- x + 1`」のような表現はプログラミング初心者には変に感じるかもしれませんが、繰り返し文中で変数を1ずつ足して更新していく、プログラミング言語ではよく見る表現です。他の言語でも同じような書き方をすることが多く、変数に1を足すための演算子（インクリメント演算子）や1を引くための演算子（デクリメント演算子）を持つプログラミング言語も多いです（Rにはありません）。\n\n:::\n\n`while`文では条件が`TRUE`であれば繰り返しが続くため、条件が`FALSE`にならないような場合には、永遠に繰り返し処理を行うことになります（**無限ループ**）。Rで無限ループにハマったときには、慌てず騒がず、「stopボタン」を押しましょう。また、コンソールを選択し、Escキーを押すことでも無限ループを停止することができます。\n\n\n::: {.cell filename='whileを使ったときの無限ループ'}\n\n```{.r .cell-code}\nwhile(TRUE){ # 無限ループ\n  print(\"I`m looping infinitely.\")\n}\n```\n:::\n\n\n![図1：RstudioのStopボタン](./image/stop_button.png)\n\n## repeat文\n\n**`repeat`**文は、同じ処理を繰り返すときに使います。`repeat`文から抜けるときには、`break`を実行します。`break`は条件判断（`if`文など）を用いて実行することになります。`break`がない場合には、無限ループすることになります。\n\n\n::: {.cell filename='repeat文による繰り返しと、breakによる中断'}\n\n```{.r .cell-code}\nx <- 1\nrepeat{\n  x <- x + 1 # printより前にxを1増やす\n  print(x)\n  if(x >= 5){break} # xが5以上ならrepeatをやめる\n}\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## 無限ループ\n\nRでは繰り返し処理を行うこと自体が割と少ないので、無限ループに陥ることは稀です。無限ループはこの`while`/`repeat`文を使った時ぐらいにしか発生しませんし、他の言語と異なり`while`文や`repeat`文自体使う機会が少なめです。どのようなプログラミング言語でも無限ループを起こすことは普通にあり、無限ループを止める方法は必ずありますので、無限ループでコンピュータが壊れるようなことはありません。\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}