{
  "hash": "0699d92dd97d8bc74e82044bc994c98b",
  "result": {
    "markdown": "# 繰り返し文（Looping）\n\nコンピューターのいいところは，**同じことを繰り返しても疲れないこと**です．Excelで表を作るときに，コピーアンドペーストを何百回も繰り返し，何時間も費やしたことがある方は多いかと思います．このような繰り返しがあっても，すべてをコンピューターに任せることができれば，コンピューターは疲れることなく，一瞬で繰り返し作業を終えてくれます．\n\nただし，コンピューターに繰り返し作業をしてもらいたければ，具体的に繰り返し作業を指示しないといけません．プログラミングでコンピューターに繰り返し作業を指示するためのものが，<font color=\"red\">**繰り返し文**</font>です．Rでは繰り返し文として，<font color=\"red\">**for文，while文，repeat文**</font>の3つが登録されています．\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表1：Rで使える繰り返し文</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 繰り返し文 </th>\n   <th style=\"text-align:left;\"> 繰り返し文の形式 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> for文 </td>\n   <td style=\"text-align:left;\"> for(i in ベクター){繰り返す処理} </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> while文 </td>\n   <td style=\"text-align:left;\"> while(条件式){TRUEの時に繰り返す処理} </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> repeat文 </td>\n   <td style=\"text-align:left;\"> repeat{breakまで繰り返す処理} </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## for文\n\n<font color=\"red\">**for文**</font>はRで，そして他の言語でもよく設定されている，最も典型的な繰り返し文の一つです．Rでは，for文は，\n\n**for(繰り返しの条件){繰り返す処理}**\n\nという形で表記します．このうち，繰り返しの条件に関しては，\n\n**for(i in c(1, 2, 3, 4, 5))**\n\nといった形で，**「変数 in ベクター」**という形で書きます．これは，ベクターの要素を前から順番に変数に入れていく，ということを意味しています．少し実際に試してみましょう．\n\n> 下のfor文で用いている**print関数**は，オブジェクトを表示させるための関数です．for文の処理では，オブジェクトの表示にはprint関数を用いる必要があります．また，for文で用いる変数名にはiを用いるのが普通です．このiはイテレーター（iterator，繰り返すもの）の略だと思いますが，よくわかりません．i以降の変数として，j，k...とアルファベット順に使っていくことが多いです．\n\n\n::: {.cell filename='for文での繰り返し処理'}\n\n```{.r .cell-code}\nfor(i in c(1, 2, 3, 4, 5)){print(i)} # ベクターの要素をiに入れて，iを表示する\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n\nfor(i in c(\"dog\", \"cat\", \"pig\", \"horse\")){print(i)} # 文字列のベクターでも同じ\n## [1] \"dog\"\n## [1] \"cat\"\n## [1] \"pig\"\n## [1] \"horse\"\n```\n:::\n\n\niにベクターの要素が前から順番に代入されているのがわかると思います．for文では，このinの後のベクターとして連続した整数を用いる場合が多いのですが，整数の数が多かったり，繰り返したい回数がとても多いと，いちいちc関数でベクターを作るのは大変です．Rでは，このような連続した数値のベクターを作るために，<font color=\"red\">**「:（コロン）」**</font>を用いることができます．コロンを用いたベクターの作り方は以下の通りです．\n\n\n::: {.cell filename=':（コロン）を用いたベクターの作成'}\n\n```{.r .cell-code}\n1:5\n## [1] 1 2 3 4 5\n10:20\n##  [1] 10 11 12 13 14 15 16 17 18 19 20\n0.5:5.5\n## [1] 0.5 1.5 2.5 3.5 4.5 5.5\n```\n:::\n\n\nfor文をコロンを使用して，以下のような形で書くことができます．\n\n\n::: {.cell filename='コロンを使ったfor文'}\n\n```{.r .cell-code}\nfor(i in 1:5){\n  print(i - 1)\n}\n## [1] 0\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n```\n:::\n\n\nベクターを変数としてあらかじめ準備しておけば，ベクターの要素に対して同じ処理を繰り返す事もできます．\n\n\n::: {.cell filename='変数を使ったfor文'}\n\n```{.r .cell-code}\nvec <- c(\"dog\", \"cat\", \"pig\", \"horse\")\nfor(i in vec){\n  isanimal <- paste(i, \"is animal.\") # iに文字列をつなぐ\n  print(isanimal) # 文字列を繋いだものを表示する\n}\n## [1] \"dog is animal.\"\n## [1] \"cat is animal.\"\n## [1] \"pig is animal.\"\n## [1] \"horse is animal.\"\n```\n:::\n\n\nfor文を用いれば．様々な繰り返し作業をRにやってもらうことができます．for文とif文の組み合わせで，繰り返しの中で条件判断を行い，ベクターの要素ごとに異なる処理を行うこともできます．\n\nfor文を途中で止める場合には，**break**を，繰り返しをスキップするときには**next**を用います．\n\n\n::: {.cell filename='for文でのnextとbreak'}\n\n```{.r .cell-code}\nfor(i in 1:5){\n  if(i == 2){next} # iが2のときには繰り返しをスキップする\n  if(i == 4){break} # iが4のときには繰り返し自体を止める\n  print(i)\n}\n## [1] 1\n## [1] 3\n```\n:::\n\n\n## while文\n\n<font color=\"red\">**while文**</font>は，条件式に定めた条件がTRUE（真）である場合は繰り返し，FALSE（偽）になったら繰り返しを中止する，繰り返し文の一つです．while文は以下のように記述して用います．\n\n**while(条件式){TRUEのときに繰り返す処理}**\n\nwhile文では，for文のように繰り返し処理でベクターの要素を引き出すようなことはできないので，処理の中で要素を呼び出すような形を取ることが多いです．\n\n\n::: {.cell filename='while文'}\n\n```{.r .cell-code}\nx <- 1 # xは1\nwhile(x < 5){ # xが5以下の時，以下の処理を繰り返す\n  print(x) # xを表示する\n  x <- x + 1 # xに1を足す\n}\n## [1] 1\n## [1] 2\n## [1] 3\n## [1] 4\n```\n:::\n\n\n> この，「x \\<- x + 1」のような表現はプログラミング初心者には変に感じるかもしれませんが，プログラミング言語では繰り返し処理中で変数を少しずつ変えていく処理を行うことが普通です．他の言語でも同じような書き方をすることは多く，変数に1を足すための演算子（インクリメント演算子）を持つものも多いです（Rにはありません）．\n\nwhile文では条件がTRUEであれば繰り返しが続くため，条件がFALSEにならないような場合には，永遠に繰り返し処理を行うことになります（**無限ループ**）．Rで無限ループにハマったときには，慌てず騒がず，「stopボタン」を押しましょう．\n\n\n::: {.cell filename='whileを使ったときの無限ループ'}\n\n```{.r .cell-code}\nwhile(TRUE){ # 無限ループ\n  print(\"I`m looping infinitely.\")\n}\n```\n:::\n\n\n![図1：RstudioのStopボタン](./image/stop_button.png)\n\n## repeat文\n\n<font color=\"red\">**repeat文**</font>は，同じ処理を繰り返すときに使います．repeat文から抜けるときには，<font color=\"red\">**break**</font>を実行します．breakは条件判断（if文など）を用いて実行することになります．breakがない場合には，無限ループすることになります．\n\n\n::: {.cell filename='repeat文による繰り返しと，breakによる中断'}\n\n```{.r .cell-code}\nx <- 1\nrepeat{\n  x <- x + 1 # printより前にxを1増やす\n  print(x)\n  if(x >= 5){break} # xが5以上ならrepeatをやめる\n}\n## [1] 2\n## [1] 3\n## [1] 4\n## [1] 5\n```\n:::\n\n\n> Rでは繰り返し処理を行うこと自体が割と少ないので，無限ループに陥ることは稀です．無限ループはこのwhile/repeat文を使った時ぐらいにしか発生しませんし，他の言語と異なりwhile文やrepeat文自体使う機会が少なめです．どのようなプログラミング言語でも無限ループを起こすことは普通にあり，無限ループを止める方法は必ずありますので，無限ループでコンピュータが壊れるようなことはありません．\n",
    "supporting": [
      "chapter5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}