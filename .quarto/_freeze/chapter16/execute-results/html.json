{
  "hash": "e15e25960226ca2be15d3b19dbca76df",
  "result": {
    "engine": "knitr",
    "markdown": "# tidyr・dplyr\n\n\n\n\n\nデータを取得し、そのデータをそのまま統計に用いることは稀です。データ解析では、**データの整理整頓（data wrangling、data cleaning）**に多くの時間が割かれています。データの整理整頓には様々なツールが用いられます。前述の`apply`関数群もデータの要約等の整理整頓に用いることができます。\n\nただし、[前章](./chapter15.html)で説明した通り、`apply`関数群は関数ごとに引数の順序や引数に与えるデータ型、返り値のデータ型などが異なっており、使い勝手がよいとは言えません。同様の機能を持つ[plyrパッケージ](https://cran.r-project.org/web/packages/plyr/index.html) [@plyr_bib]というライブラリもありますが、やはり使い勝手が良くなかったため、それほど用いられていません。\n\n現在では、これらの関数・ライブラリに代わり、データの整理整頓には[`tidyr`](https://tidyr.tidyverse.org/) [@tidyr_bib]・[`dplyr`](https://dplyr.tidyverse.org/) [@dplyr_bib]を用いるのがRでは事実上のデフォルトとなっています。`tidyr`・`dplyr`の特徴は以下の通りです。\n\n- **パイプ演算子**を用いることを前提として関数が設計されている\n- 第一引数にはデータフレームを取り、データフレームを加工する\n- 出力もデータフレーム（正確には`tibble`）で統一されている\n\n`tidyr`・`dplyr`を用いることで、パイプ演算子を活用し、余計な変数を作ることなく、データフレームを自由自在に取り扱うことができます。`tidyr`・`dplyr`は共に`tidyverse` [@tidyverse_bib]に含まれるライブラリですので、`tidyverse`をロードすることで使用できます。\n\n\n::: {.cell filename='dplyr・tidyrのロード'}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n## メソッドチェーン\n\n`tidyr`・`dplyr`について説明する前に、R以外の言語で用いられている、**メソッドチェーン**について簡単に説明します。\n\nR以外の言語では、オブジェクトに対して演算を行う時、関数以外に**メソッド**を利用することがあります。メソッドは、オブジェクトの後にピリオドで繋いで、オブジェクトに何らかの演算を行うものです。例えばRubyでは文字列に対して、「`.upcase`」というメソッドが設定されています。`.upcase`は文字列を大文字にするメソッドです。例えば「`\"Hello world\".upcase`」とすると、`\"Hello world\"`の小文字が大文字に変換され、`\"HELLO WORLD\"`が返ってきます。\n\nメソッドは2つ以上繋げて用いることができます。例えば、`.reverse`は文字列を逆順にするメソッドですが、「`\"Hello world\".reverse.upcase`」とすると、`\"Hello world\"`を逆順にし、続いて大文字に変換することができます。このように、メソッドを繋いで使用することをメソッドチェーンと呼びます。\n\n以下に、Rubyとjavascriptでのメソッドチェーンの例を示します。\n\n\n::: {.cell filename='Rubyでのメソッドチェーン'}\n\n```{.ruby .cell-code}\nstring = \"dlrow olleH\"\nstring.reverse.upcase # 文字列を逆順にし、大文字に変換する\n#>  \"HELLO WORLD\"\n```\n:::\n\n::: {.cell filename='JavaScriptでのメソッドチェーン'}\n\n```{.javascript .cell-code}\nvar firstName = \" Rajat \"; // firstNameは \" Rajat \"\nconsole.log(firstName); \n#> \" Rajat \"\n\nvar modifiedName = \n  firstName \n    .toUpperCase() // 大文字にして\n\t\t.trim(); // 前後のスペースを削除する\n\nconsole.log(modifiedName)\n#> \"RAJAT\"\n```\n:::\n\n\nメソッドチェーンのよいところは、**演算の過程を左から右へ、文章を読むように追いかけることができる**ことです。上記のメソッドチェーンと同じような演算をRで行うと、以下のようになります。\n\n\n::: {.cell filename='文字列に2つの処理を行う'}\n\n```{.r .cell-code}\npacman::p_load(tidyverse) # stringrを使うためtidyverseをロードする\nfirstname <- \" Rajat \"\n\n# 例1\nstr_to_upper(str_trim(firstname)) # スペースを取り除いて大文字にする\n## [1] \"RAJAT\"\n\n# 例2\nfirstname1 <- str_trim(firstname) # スペースを取り除く\nstr_to_upper(firstname1) # 大文字にする\n## [1] \"RAJAT\"\n```\n:::\n\n\nRではメソッドチェーンは使えないので、複数の演算を行うときには、上の例1のように関数の中に関数を入れる（ネストする）か、例2のように一時的に計算結果を変数に入れておき、その一時的な変数を利用して再度演算（逐次的な演算）をする必要があります。\n\nどちらも実用上大きな問題はないのですが、プログラムとしては理解しにくく、メソッドチェーンのように簡単に複数の処理を行えるものではありません。\n\nこのような問題を解決する演算子が、**パイプ演算子**です。\n\n## パイプ演算子（pipe operator）\n\nパイプ演算子とは、**「演算子の前のオブジェクトを、演算子の後ろの関数の引数にする」**演算子です。Rのパイプ演算子には以下の2種類があります。\n\n- `|>`：Rのデフォルトのパイプ演算子\n- `%>%`：`magrittr`パッケージ [@magrittr_bib]に登録されているパイプ演算子\n\nパイプ演算子を用いると、以下の演算は同じ意味を持ちます。\n\n\n::: {.cell filename='パイプ演算子'}\n\n```{.r .cell-code}\nvec <- c(1, 2, 3)\nmean(vec) # 通常の演算\n## [1] 2\n\nvec |> mean() # パイプ演算子\n## [1] 2\n```\n:::\n\n\nこれだけ見てもパイプ演算子を用いる利点はよくわかりませんが、パイプ演算子を用いることで、上記のメソッドチェーンのような機能をRに与えることができます。\n\n上のjavascriptでのメソッドチェーンと同じ演算をパイプ演算子を用いて行うと、以下のようになります。パイプ演算子を用いることで、「文字列からスペースを取り除き、大文字にする」という、文章と同じ順序でデータを処理することができます。このように順序が変わることで、一度にたくさんの演算を行っても、理解しやすいプログラムを書くことができます。\n\n\n::: {.cell filename='パイプ演算子を用いて文字列を処理する'}\n\n```{.r .cell-code}\nfirstname <- \" Rajat \"\nfirstname |> str_trim() |> str_to_upper() # スペースを取り除き、大文字にする\n## [1] \"RAJAT\"\n```\n:::\n\n\n### デフォルトとmagrittrパッケージのパイプ演算子\n\nでは、まず2種類のパイプ演算子について見ていきましょう。Rで先に実装されたのは[`magrittr`](https://cran.r-project.org/web/packages/magrittr/index.html)で、2014年にライブラリが公開されています。Rのデフォルトのパイプ演算子はずっと後になって、2021年にR version 4.1.0で実装されました。\n\nRstudioでは、パイプ演算子を「**Ctrl+Shift+M**」のショートカットで入力することができます。RStudioはRのデフォルトのパイプ演算子が実装される前から存在するため、デフォルトのパイプ演算子は`magrittr`の「`%>%`」になっています。デフォルトのパイプ演算子をRのデフォルトのもの（`|>`）に変更する場合には、「Tools→Global Options」から「Code」を選択し、下の図1の赤線で囲った部分にチェックを入れます。\n\n![図2：ショートカットで入力するパイプ演算子を変更する](./image/chapter16_pipe_shortcut.png)\n\n2種類のパイプ演算子は、記号が異なるだけでなく、使い方も少し異なっています。\n\n-   関数の後の`()`の必要性（`|>`は必要、`%>%`は不要）\n-   引数の位置を指定する文字の違い（`|>`は「`_`」（アンダースコア）、`%>%`は「`.`」（ピリオド））\n-   関数の`return`に使えるかどうか（`|>`は使えず、`%>%`は使える）\n\nまた、`%>%`を用いるには`magrittr`パッケージ（`tidyverse`に含まれている）をロードする必要があるのに対し、`|>`はライブラリのロードを必要としません。\n\n### 関数のカッコの有無\n\n`|>`では関数名の後にカッコをつけるのが必須で、カッコが無いとエラーが出ます。\n\n\n::: {.cell filename='デフォルトのパイプ演算子'}\n\n```{.r .cell-code}\npacman::p_load(tidyverse) # magrittrはtidyverseに含まれる\n\nfunc1 <- function(x, y = 1){x + y} # xに1を足す関数\n\nfunc1(1) # 2が帰ってくる\n## [1] 2\n\n1 |> func1() # |>ではカッコが必須\n## [1] 2\n```\n:::\n\n::: {.cell filename='デフォルトのパイプ演算子はカッコ必須'}\n\n```{.r .cell-code}\n1 |> func1 # カッコが無いとエラー\n## Error: The pipe operator requires a function call as RHS (<text>:1:6)\n```\n:::\n\n\n`%>%`では、カッコがあってもなくても計算をしてくれます。\n\n\n::: {.cell filename='magrittrのパイプ演算子はカッコを必須としない'}\n\n```{.r .cell-code}\n1 %>% func1() # %>%はカッコがあってもなくても計算できる\n## [1] 2\n\n1 %>% func1\n## [1] 2\n```\n:::\n\n\n`|>`では、パイプ演算子の前の値を代入する位置をアンダースコア（`_`）で指定できます。`%>%`では、ピリオド（`.`）で指定します。指定しない場合には、パイプ演算子の左辺の値が第一引数となります。\n\n\n::: {.cell filename='引数の位置の指定'}\n\n```{.r .cell-code}\nfunc1(1, 2) # 引数を2個取り、足し算する関数\n## [1] 3\n\n1 |> func1(y = 2) # 第一引数に1が入る（第2引数が2）\n## [1] 3\n\n2 |> func1(x = 1, y = _) # 引数を入る位置を「_」で指定\n## [1] 3\n\n1 %>% func1(y = 2) # 第一引数に1が入る\n## [1] 3\n\n2 %>% func1(x = 1, y = .) # 引数を入る位置を「.」で指定\n## [1] 3\n```\n:::\n\n\n`|>`・`%>%`のどちらでも、ピリオドやアンダースコアにインデックス・列名を付け加えることで、要素を呼び出すことができます。\n\n\n::: {.cell filename='パイプ演算子での要素の呼び出し'}\n\n```{.r .cell-code}\n4:6 |> _[2] # インデックスで呼び出せる\n## [1] 5\n\n4:6 %>% .[2]\n## [1] 5\n\niris |> _$Species |> head() # 列名で呼び出せる\n## [1] setosa setosa setosa setosa setosa setosa\n## Levels: setosa versicolor virginica\n\niris %>% .$Species %>% head\n## [1] setosa setosa setosa setosa setosa setosa\n## Levels: setosa versicolor virginica\n```\n:::\n\n\n`|>`・`%>%`共に、演算子の後に改行を入れることができます。パイプ演算子を用いるときには、以下のように、パイプ演算子ごとに改行を入れる書き方をするのが一般的です。\n\n\n::: {.cell filename='パイプ演算子の後で改行'}\n\n```{.r .cell-code}\n\"Hello world\" |> # 文字列の\n  str_replace(pattern = \"world\", replacement = \"R\") |> # 一部を置き換え、\n  str_to_upper() # 大文字にする\n## [1] \"HELLO R\"\n```\n:::\n\n\n## tidy data\n\n`tidyr`・`dplyr`の説明の前に、データフレームを取り扱う上で重要な概念である、**「tidy data（整然としたデータ）」**について簡単に説明します。\n\n「[tidy data](https://r4ds.hadley.nz/data-tidy.html)」は`ggplot2`や`tidyr`、`dplyr`を開発しているPOSIT SoftwareのチーフサイエンティストであるHadley Wickhamが2014年に示したデータ構造についての考え方です[@tidy_data_bib]。データフレームのような表形式のデータを対象としたもので、**「データの行は各観察結果、データの列は各列が一つの種類のデータであるように整理し、データの各要素には一つの値しか入力しない」**というルールに従い、データは準備されるべきであるとしています。`tidyr`、`dplyr`はこの概念を念頭に設計されています。\n\n![](./image/chapter16_tidy_table.png)\n\ntidyではないデータは世の中にゴロゴロ転がっています。以下の表1はファイザーの[COVID-19ワクチン（コミナティ筋注）の第3相試験に関するNew England Journal of Medicineの論文](https://www.nejm.org/doi/pdf/10.1056/NEJMoa2034577?articleTools=true)の表1の一部を加工したものです[@doi_10_1056_NEJMoa2034577]。\n\n![](./image/chapter16_nontidy.png)\n\n論文の表は人が見やすいように作成されています。ですので、この表を見て、意味が全くわからない、ということはあまりないでしょう。しかし、この表はtidyではありません。\n\nまず、1つのセル（要素）に人数とその割合（%）の2つのデータが記載されています。また、投薬された治験薬（BNT162b2とPlacebo）は処置（Treatment）という同じカテゴリのデータですので、列名として2つに分けていることで、同じカテゴリのデータを2列に表示していることになっています。\n\n上の2行は性別に関するデータ、下の3行は人種に関するデータですので、2つの別のデータが同じ表に乗っています。したがって、この表は人にとってはわかりやすくても、tidyなデータではありません。\n\n上の表をtidyなデータにしたものが、以下の表2です。人数のデータ、割合のデータは各1列に、治験薬はTreatmentとして1列に表記しています。性別と人種ではデータのカテゴリが異なりますので、表を2つに分けています。Ratioはそのまま変換すると足し合わせて200%となるため、2で割って調整しています。\n\nこれが完全にtidyなデータであるかと言われるとやや難しいところもありますが、少なくとも上の表1よりはRで取り扱いしやすいデータとなっています。\n\n![](./image/chapter16_tidy.png)\n\nRでは、グラフ作成・統計共に、元の表より下のtidyなデータの方が取り扱いやすいです。多くのデータは人が見やすいように収集・準備されており、tidyではありません。R上でデータをtidyに加工・整形するためのツールが、`tidyr`と`dplyr`です。\n\n## tidyr\n\n`tidyr`はデータを**縦持ち・横持ち**に変換するためのライブラリです。この縦持ち・横持ちというのは、以下の図のように、縦長・横長のデータのことを指します。\n\n![縦持ちと横持ちの図](./image/long_wide_data.png)\n\n人が見る分には、横持ちのデータはわかりやすいと思います。しかし、Rで取り扱う場合には、圧倒的に縦持ちのデータの方が取り扱いが簡単です。ですので、人が作ったデータをRで取り扱うために縦持ちに変換する、Rで生成したデータを人が理解しやすいように横持ちに変換する時に、`tidyr`の関数を用いることになります。以下の表3に`tidyr`の関数の一覧を示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：tidyrの関数群\n\n|関数名       |適用する演算                               |\n|:------------|:------------------------------------------|\n|pivot_longer |データフレームを縦持ちデータにする         |\n|gather       |データフレームを縦持ちデータにする（旧版） |\n|pivot_wider  |データフレームを横持ちデータにする         |\n|spread       |データフレームを横持ちデータにする（旧版） |\n|group_by     |データを列でグループ化する                 |\n|nest         |データをネストする                         |\n|unnest       |ネストを解除する                           |\n|drop_na      |NAを含む行を取り除く（na.omitと同じ）      |\n|expand       |各列の組み合わせを作成する                 |\n|fill         |NAに上の要素を埋める                       |\n|replace_na   |NAに引数で指定した要素を埋める             |\n\n\n:::\n:::\n\n\n### pivot_longerとpivot_wider\n\nデータフレームを縦持ちに変換する関数が`pivot_longer`関数、横持ちに変換する関数が`pivot_wider`関数です。共に第一引数がデータフレームで、パイプ演算子を用いて演算を行います。\n\n`pivot_longer`関数も`pivot_wider`関数も、Rでのデータ解析ではとても重要となりますが、共に変換がやや複雑で、挙動がわかりにくい関数でもあります。下の例を参考に、どのようにデータが変換されるのか、よく理解した上で用いるのがよいでしょう。\n\n### 縦持ちへの変換：pivot_longer\n\n`pivot_longer`関数はデータフレームと列番号を引数に取り、列番号で指定した列の名前を`name`という列の要素に変換し、列番号で指定した列の要素を`value`という名前の列として、1列のデータに変換します。このような変換により、データは縦長の構造を取ります。\n\n変換後の列名は引数で指定でき、列の名前に関する列名は「`names_to`」、列の要素に関する列名は「`values_to`」引数に指定します。この`pivot_longer`関数は特に統計・グラフ作成の際によく用います。\n\n`tidyr`が開発されるまでは、`reshape` [@rephape_bib]や`reshape2` [@rephape2_bib]という関数で縦持ち変換を行うのが一般的でした。また、`pivot_longer`関数は`tidyr`開発初期には`gather`という名前で、引数の順番も少し異なっていました。今でも`reshape`や`reshape2`、`gather`を用いて縦持ちへの変換を行うことはできます。\n\n\n::: {.cell filename='pivot_longerで縦持ちデータに変換'}\n\n```{.r .cell-code}\nhead(iris)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n## 6          5.4         3.9          1.7         0.4  setosa\n\n# pivot_longer 縦持ちデータへの変換（返り値はtibble）\niris |> pivot_longer(cols = 1:4) \n## # A tibble: 600 × 3\n##    Species name         value\n##    <fct>   <chr>        <dbl>\n##  1 setosa  Sepal.Length   5.1\n##  2 setosa  Sepal.Width    3.5\n##  3 setosa  Petal.Length   1.4\n##  4 setosa  Petal.Width    0.2\n##  5 setosa  Sepal.Length   4.9\n##  6 setosa  Sepal.Width    3  \n##  7 setosa  Petal.Length   1.4\n##  8 setosa  Petal.Width    0.2\n##  9 setosa  Sepal.Length   4.7\n## 10 setosa  Sepal.Width    3.2\n## # ℹ 590 more rows\n\n# 上と同じ（列名を設定）\niris |> pivot_longer(cols = 1:4, names_to = \"category\", values_to = \"value\") \n## # A tibble: 600 × 3\n##    Species category     value\n##    <fct>   <chr>        <dbl>\n##  1 setosa  Sepal.Length   5.1\n##  2 setosa  Sepal.Width    3.5\n##  3 setosa  Petal.Length   1.4\n##  4 setosa  Petal.Width    0.2\n##  5 setosa  Sepal.Length   4.9\n##  6 setosa  Sepal.Width    3  \n##  7 setosa  Petal.Length   1.4\n##  8 setosa  Petal.Width    0.2\n##  9 setosa  Sepal.Length   4.7\n## 10 setosa  Sepal.Width    3.2\n## # ℹ 590 more rows\n\n# gather（返り値はデータフレーム）\niris |> gather(category, value, 1:4) |> head()\n##   Species     category value\n## 1  setosa Sepal.Length   5.1\n## 2  setosa Sepal.Length   4.9\n## 3  setosa Sepal.Length   4.7\n## 4  setosa Sepal.Length   4.6\n## 5  setosa Sepal.Length   5.0\n## 6  setosa Sepal.Length   5.4\n\n# 上と同じ\niris |> gather(category, value, -Species) |> head() \n##   Species     category value\n## 1  setosa Sepal.Length   5.1\n## 2  setosa Sepal.Length   4.9\n## 3  setosa Sepal.Length   4.7\n## 4  setosa Sepal.Length   4.6\n## 5  setosa Sepal.Length   5.0\n## 6  setosa Sepal.Length   5.4\n```\n:::\n\n\n### 横持ちへの変換：pivot_wider\n\n`pivot_wider`関数は、データを横持ちに変換する関数です。`pivot_wider`関数は列名となる列を`names_from`引数に、要素となる列を`values_from`引数に指定します。指定しなかった列はそのまま維持されます。`names_from`で指定した列の要素は各列名となり、`values_from`で指定した列の要素が`names_from`で新しく作られた列の値となります。この変換により、データは横長の、幅の広い構造を取ることになります。\n\n横持ちへの変換も`reshape`を用いて行うことができます。また、`pivot_wider`は以前は`spread`という名前であったため、この`spread`関数を用いて横持ちデータへの変換を行うこともできます。\n\n\n::: {.cell filename='pivot_widerで横持ちデータに変換'}\n\n```{.r .cell-code}\n# pivot_wider 横持ちデータへの変換\nus_rent_income\n## # A tibble: 104 × 5\n##    GEOID NAME       variable estimate   moe\n##    <chr> <chr>      <chr>       <dbl> <dbl>\n##  1 01    Alabama    income      24476   136\n##  2 01    Alabama    rent          747     3\n##  3 02    Alaska     income      32940   508\n##  4 02    Alaska     rent         1200    13\n##  5 04    Arizona    income      27517   148\n##  6 04    Arizona    rent          972     4\n##  7 05    Arkansas   income      23789   165\n##  8 05    Arkansas   rent          709     5\n##  9 06    California income      29454   109\n## 10 06    California rent         1358     3\n## # ℹ 94 more rows\n\nus_rent_income |> pivot_wider(names_from = variable, values_from = c(estimate, moe)) \n## # A tibble: 52 × 6\n##    GEOID NAME                 estimate_income estimate_rent moe_income moe_rent\n##    <chr> <chr>                          <dbl>         <dbl>      <dbl>    <dbl>\n##  1 01    Alabama                        24476           747        136        3\n##  2 02    Alaska                         32940          1200        508       13\n##  3 04    Arizona                        27517           972        148        4\n##  4 05    Arkansas                       23789           709        165        5\n##  5 06    California                     29454          1358        109        3\n##  6 08    Colorado                       32401          1125        109        5\n##  7 09    Connecticut                    35326          1123        195        5\n##  8 10    Delaware                       31560          1076        247       10\n##  9 11    District of Columbia           43198          1424        681       17\n## 10 12    Florida                        25952          1077         70        3\n## # ℹ 42 more rows\n\n# spread（valueは1つしか値を取れない）\nus_rent_income |> spread(variable, estimate)\n## # A tibble: 104 × 5\n##    GEOID NAME         moe income  rent\n##    <chr> <chr>      <dbl>  <dbl> <dbl>\n##  1 01    Alabama        3     NA   747\n##  2 01    Alabama      136  24476    NA\n##  3 02    Alaska        13     NA  1200\n##  4 02    Alaska       508  32940    NA\n##  5 04    Arizona        4     NA   972\n##  6 04    Arizona      148  27517    NA\n##  7 05    Arkansas       5     NA   709\n##  8 05    Arkansas     165  23789    NA\n##  9 06    California     3     NA  1358\n## 10 06    California   109  29454    NA\n## # ℹ 94 more rows\n```\n:::\n\n\n### tidyrのその他の関数\n\n`tidyr`には、`pivot_longer`、`pivot_wider`以外にも、データの全組み合わせを作成したり、データフレーム上の`NA`を置き換えるような関数が備わっています。`pivot_longer`/`pivot_wider`ほどには使用頻度は高くありませんが、覚えておくと役に立つ場面もあるかもしれません。\n\n\n::: {.cell filename='その他のtidyrの関数'}\n\n```{.r .cell-code}\nd <- data.frame(x = c(1, 2, NA, 4), y = c(NA, \"b\", \"c\", \"d\"))\nd\n##    x    y\n## 1  1 <NA>\n## 2  2    b\n## 3 NA    c\n## 4  4    d\n# d |> expand.grid()と同じく、総当たりのデータフレームを作成（tibbleが返ってくる）\nd |> expand(x, y) \n## # A tibble: 16 × 2\n##        x y    \n##    <dbl> <chr>\n##  1     1 b    \n##  2     1 c    \n##  3     1 d    \n##  4     1 <NA> \n##  5     2 b    \n##  6     2 c    \n##  7     2 d    \n##  8     2 <NA> \n##  9     4 b    \n## 10     4 c    \n## 11     4 d    \n## 12     4 <NA> \n## 13    NA b    \n## 14    NA c    \n## 15    NA d    \n## 16    NA <NA>\n\nd |> replace_na(list(x = 1, y = \"nodata\")) # NAの置き換え\n##   x      y\n## 1 1 nodata\n## 2 2      b\n## 3 1      c\n## 4 4      d\n\nd |> fill(x, y) # 一つ上の値でNAを埋める（1番上はNAのまま）\n##   x    y\n## 1 1 <NA>\n## 2 2    b\n## 3 2    c\n## 4 4    d\n```\n:::\n\n\nデータのグループ化（`group_by`）、ネスト（`nest`）については後ほど説明します。\n\n## dplyr\n\n`tidyr`によって縦持ちに変換したデータフレームを加工し、データの抽出・演算・集計等を行うためのライブラリが、`dplyr`です。`dplyr`の関数群も、基本的にパイプ演算子を用いて使用することが想定されています。`dplyr`と同様の加工ができる関数や方法はたくさんあるのですが、**パイプ演算子で繋いだ演算の中で加工がすべて完了する**のが`dplyr`の特徴になっています。\n\n`dplyr`には非常に沢山の関数が設定されていますが、特に使用頻度が高く、重要な関数は、**`filter`、`select`、`arrange`、`mutate`、`summarise`**の5つです。\n\n以下の表に`dplyr`の関数の一覧を示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表2：dplyrの関数群\n\n|関数名     |適用する演算                                 |\n|:----------|:--------------------------------------------|\n|filter     |条件で行を選択する（subsetと類似）           |\n|select     |列を選択する                                 |\n|arrange    |列で並べ替える                               |\n|desc       |並べ替えを降順にする                         |\n|mutate     |新しい列を追加する                           |\n|group_by   |データを列でグループ化する                   |\n|rowwise    |行ごとに演算できるようにする                 |\n|summarise  |列ごとに関数を適用する                       |\n|distinct   |重複した行を削除                             |\n|slice      |一部の行を取り出す                           |\n|rename     |列名を変更する                               |\n|inner_join |データフレームを結合する（NAのある行を削除） |\n|full_join  |データフレームを結合する（すべての行を残す） |\n|left_join  |データフレームを左から結合する               |\n|right_join |データフレームを右から結合する               |\n|case_when  |switch文と類似した条件分岐                   |\n|case_match |switch文と類似した条件分岐                   |\n|if_else    |ifelse文の取り扱いを良くした関数             |\n\n\n:::\n:::\n\n\n### filter関数\n\n`filter`関数は、データフレームから条件に従い行を選択するための関数です。Rにはよく似た`subset`という関数がありますが、他の`tidyverse`の関数と共に用いる場合は`filter`関数を用いたほうが良いでしょう。\n\n`filter`関数はデータフレームを第一引数、条件式を第二引数に取る関数です。第二引数に指定した条件に合致した行のみを選択することができます。下の例では、`Species`の列の要素が`setosa`である行を選択しています。\n\n\n::: {.cell filename='filter関数で行を選択'}\n\n```{.r .cell-code}\niris |> tibble() |> filter(Species == \"setosa\")\n## # A tibble: 50 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 40 more rows\n```\n:::\n\n\n### select関数\n\n`select`関数は、データフレームから列を選択するための関数です。`select`関数もデータフレームを第一引数にとり、それ以降に列名を引数に取ります。`select`関数を用いると、引数で指定した列のみを含むデータフレームが返ってきます。また、マイナスで列名を指定すると、その列を取り除いたデータフレームが返ってきます。\n\n\n::: {.cell filename='select関数で列を選択'}\n\n```{.r .cell-code}\niris |> tibble() |> select(Sepal.Length, Sepal.Width, Species)\n## # A tibble: 150 × 3\n##    Sepal.Length Sepal.Width Species\n##           <dbl>       <dbl> <fct>  \n##  1          5.1         3.5 setosa \n##  2          4.9         3   setosa \n##  3          4.7         3.2 setosa \n##  4          4.6         3.1 setosa \n##  5          5           3.6 setosa \n##  6          5.4         3.9 setosa \n##  7          4.6         3.4 setosa \n##  8          5           3.4 setosa \n##  9          4.4         2.9 setosa \n## 10          4.9         3.1 setosa \n## # ℹ 140 more rows\n\niris |> tibble() |> select(-Sepal.Length, -Sepal.Width, -Species)\n## # A tibble: 150 × 2\n##    Petal.Length Petal.Width\n##           <dbl>       <dbl>\n##  1          1.4         0.2\n##  2          1.4         0.2\n##  3          1.3         0.2\n##  4          1.5         0.2\n##  5          1.4         0.2\n##  6          1.7         0.4\n##  7          1.4         0.3\n##  8          1.5         0.2\n##  9          1.4         0.2\n## 10          1.5         0.1\n## # ℹ 140 more rows\n```\n:::\n\n\n`select`関数では、列を選択するための関数を引数に取ることもできます。\n\n\n::: {.cell filename='列選択の関数群'}\n::: {.cell-output-display}\n\n\nTable: 表3：selectに用いる列選択の関数\n\n|関数名                   |適用する演算                                 |\n|:------------------------|:--------------------------------------------|\n|everything()             |すべての列を選択する                         |\n|last_col(n)              |後ろからn番目の列を選択する                  |\n|group_cols()             |グループ化に用いた列を選択する               |\n|starts_with(\"文字列\")    |指定した文字列から始まる列名を選択する       |\n|ends_with(\"文字列\")      |指定した文字列で終わる列名を選択する         |\n|contains(\"文字列\")       |指定した文字列を含む列名を選択する           |\n|matches(\"正規表現\")      |正規表現に従い列名を選択する                 |\n|num_range(\"文字列\", n:m) |文字列で始まる列名のn～m番目を選択する       |\n|all_of(\"文字列\")         |列名を文字列で選択する（列名がないとエラー） |\n|any_of(\"文字列\")         |列名を文字列で選択する                       |\n|where(関数)              |論理型を返す関数に従い選択する               |\n\n\n:::\n:::\n\n\n### arrange関数\n\n`arrange`関数は、データフレームを指定した列に従い、昇順（小さいものが上）に並べ替える関数です。`order`関数を用いてもデータフレームの並べ替えはできますが、`arrange`関数を用いるとより簡単に並べ替えを行うことができます。\n\n`arrange`関数のヘルパーとして、`desc`関数が設定されています。`desc`関数はデータフレームを降順（大きいものが上）に並べ替える場合に用います。\n\n\n::: {.cell filename='arrange関数で並べ替え'}\n\n```{.r .cell-code}\niris |> tibble() |> arrange(Sepal.Length) # 昇順に並べ替え\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          4.3         3            1.1         0.1 setosa \n##  2          4.4         2.9          1.4         0.2 setosa \n##  3          4.4         3            1.3         0.2 setosa \n##  4          4.4         3.2          1.3         0.2 setosa \n##  5          4.5         2.3          1.3         0.3 setosa \n##  6          4.6         3.1          1.5         0.2 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          4.6         3.6          1           0.2 setosa \n##  9          4.6         3.2          1.4         0.2 setosa \n## 10          4.7         3.2          1.3         0.2 setosa \n## # ℹ 140 more rows\n\niris |> tibble() |> arrange(desc(Sepal.Length)) # 降順に並べ替え\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species  \n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>    \n##  1          7.9         3.8          6.4         2   virginica\n##  2          7.7         3.8          6.7         2.2 virginica\n##  3          7.7         2.6          6.9         2.3 virginica\n##  4          7.7         2.8          6.7         2   virginica\n##  5          7.7         3            6.1         2.3 virginica\n##  6          7.6         3            6.6         2.1 virginica\n##  7          7.4         2.8          6.1         1.9 virginica\n##  8          7.3         2.9          6.3         1.8 virginica\n##  9          7.2         3.6          6.1         2.5 virginica\n## 10          7.2         3.2          6           1.8 virginica\n## # ℹ 140 more rows\n```\n:::\n\n\n### mutate関数\n\n`mutate`関数は、データフレームに新しい列を追加する関数です。`mutate`は第一引数にデータフレーム、第二引数に「新しい列の名前 = 値」という形で、追加したい列の名前と値を指定します。値の計算には、すでにデータフレームに存在する列名を用いることができます。したがって、「列のデータを加工・演算して新しい列を作る」場合に`mutate`関数を用いることになります。\n\nデータフレームの列のインデックスに値を代入しても同様の列の追加を行うことができますが、パイプ演算子の途中で代入を行うことはできません。`mutate`関数を用いれば、パイプ演算子中で列を追加し、以降の演算に用いることができます。\n\n\n::: {.cell filename='mutate関数で列を追加'}\n\n```{.r .cell-code}\niris |> tibble() |> mutate(Sepal.ratio = Sepal.Length / Sepal.Width) # Sepal.ratioを列として追加\n## # A tibble: 150 × 6\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.ratio\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>         <dbl>\n##  1          5.1         3.5          1.4         0.2 setosa         1.46\n##  2          4.9         3            1.4         0.2 setosa         1.63\n##  3          4.7         3.2          1.3         0.2 setosa         1.47\n##  4          4.6         3.1          1.5         0.2 setosa         1.48\n##  5          5           3.6          1.4         0.2 setosa         1.39\n##  6          5.4         3.9          1.7         0.4 setosa         1.38\n##  7          4.6         3.4          1.4         0.3 setosa         1.35\n##  8          5           3.4          1.5         0.2 setosa         1.47\n##  9          4.4         2.9          1.4         0.2 setosa         1.52\n## 10          4.9         3.1          1.5         0.1 setosa         1.58\n## # ℹ 140 more rows\n```\n:::\n\n\n### summarise関数\n\n`summarise`関数（`summarize`でも可）は、データフレームの列に演算を適用し、結果をデータフレームとして返す関数です。`summarise`関数も第一引数にはデータフレームを取り、以降の引数に「計算結果の列名 = 演算」という形で、適用したい演算を記載します。下の例では、`Sepal.Length`の平均値と標準偏差を返しています。\n\n\n::: {.cell filename='summarise関数で列を要約'}\n\n```{.r .cell-code}\niris |> summarise(m = mean(Sepal.Length), s=sd(Sepal.Length))\n##          m         s\n## 1 5.843333 0.8280661\n```\n:::\n\n\nこれだけでは`apply`関数より不便ですし、意味が無いように見えます。`summarise`関数が本領を発揮するのは、`group_by`関数により、データをグループ化した後になります。\n\n### group_by関数\n\n`group_by`関数は、文字列か因子の列に従い、データフレームの行をグループ化するための関数です。\n\n`tidyr`・`dplyr`でデータフレームを取り扱うと、データフレームは自動的に**`tibble`に変換**されます。`group_by`関数でデータフレームをグループ化すると、`tibble`に`group`というものが追加され、クラスに「`grouped_df`」というものが追加されます。`group_by`関数の機能はこれだけです。\n\nグループ化した`tibble`は、`ungroup`関数でグループ解除できます。\n\n\n::: {.cell filename='group_by関数でグループ化'}\n\n```{.r .cell-code}\niris |> group_by(Species) # tibbleの左上にGroups: Species[3]と表示される\n## # A tibble: 150 × 5\n## # Groups:   Species [3]\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n\niris |> group_by(Species) |> class() # クラスにgrouped_dfが追加\n## [1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nd <- iris |> group_by(Species)\nungroup(d) # グループの解除\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n```\n:::\n\n\n### group_by関数とsummarise関数を同時に用いる\n\n上記のように、`summarise`関数も`group_by`関数も、どちらも単独ではいまいちよく分からない関数ですが、組み合わせて使用することで、[15章](./chapter15.html)で解説した`aggregate`関数と同じように、**カテゴリごとの集計計算**を行うことができます。\n\nまずはデータフレームを`group_by`関数でグループ化します。このグループ化したデータフレームに`summarise`関数で計算を適用すると、計算をグループごとに実行してくれます。下の例では、`Species`でグループ化した後に、`Sepal.Length`の平均を`summarise`関数で計算しています。結果として、`Species`ごとに`Sepal.Length`の平均値を計算したデータフレームが返ってきます。グループ化した場合は、グループ化に用いた列を結果のデータフレームに残してくれます。\n\nこの`group_by`と`summarise`を用いると、カテゴリごとに平均値や標準偏差などを求め、その結果をデータフレームとしたものを返り値として得ることができます。\n\n`summarise`には`.by`という引数を指定することができ、この`.by`にグループ化するための列を設定することもできます。ただし、`dplyr`では、`group_by`で明示的にグループ化した後に`summarise`を用いることを推奨しているようです。\n\n`tidyr`の`pivot_longer`関数と組み合わせて用いれば、複数列の要約データを一度に計算することもできます。\n\n\n::: {.cell filename='group_byとsummariseでデータを要約する'}\n\n```{.r .cell-code}\niris |> group_by(Species) |> summarise(m = mean(Sepal.Length))\n## # A tibble: 3 × 2\n##   Species        m\n##   <fct>      <dbl>\n## 1 setosa      5.01\n## 2 versicolor  5.94\n## 3 virginica   6.59\n\niris |> summarise(m = mean(Sepal.Length), .by = Species) # 上と同じ\n##      Species     m\n## 1     setosa 5.006\n## 2 versicolor 5.936\n## 3  virginica 6.588\n\n# 複数列の結果に対して、一度に平均値と標準偏差を求める\niris |> \n  pivot_longer(1:4) |> \n  group_by(Species, name) |> \n  summarise(m=mean(value), s=sd(value))\n## `summarise()` has grouped output by 'Species'. You can override using the\n## `.groups` argument.\n## # A tibble: 12 × 4\n## # Groups:   Species [3]\n##    Species    name             m     s\n##    <fct>      <chr>        <dbl> <dbl>\n##  1 setosa     Petal.Length 1.46  0.174\n##  2 setosa     Petal.Width  0.246 0.105\n##  3 setosa     Sepal.Length 5.01  0.352\n##  4 setosa     Sepal.Width  3.43  0.379\n##  5 versicolor Petal.Length 4.26  0.470\n##  6 versicolor Petal.Width  1.33  0.198\n##  7 versicolor Sepal.Length 5.94  0.516\n##  8 versicolor Sepal.Width  2.77  0.314\n##  9 virginica  Petal.Length 5.55  0.552\n## 10 virginica  Petal.Width  2.03  0.275\n## 11 virginica  Sepal.Length 6.59  0.636\n## 12 virginica  Sepal.Width  2.97  0.322\n```\n:::\n\n\n### rowwise関数\n\n`rowwise`関数は、`mutate`や`summarise`での演算を行方向に変更してくれる関数で、`apply`関数を`MARGIN = 1`と設定した場合とよく似た計算を行うことができる関数です。`group_by`関数の行方向版と言えるかもしれません。`rowwise`関数をデータフレームに適用すると、`tibble`に「`Rowwise:`」の印がつき、クラスに「`rowwise_df`」が追加されます。`rowwise`関数も`group_by`関数と同じく、`ungroup`関数で解除することができます。\n\n`rowwise`関数を用いることで、例えば`min`や`max`のような関数を、列方向ではなく行方向に対して適用することができます。\n\n\n::: {.cell filename='rowwise関数で行方向に演算'}\n\n```{.r .cell-code}\niris |> rowwise() # Rowwiseのラベルが付く\n## # A tibble: 150 × 5\n## # Rowwise: \n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n\niris |> rowwise() |> ungroup() # ungroupでRowwiseが消える\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n\niris |> rowwise() |> mutate(minr = min(c(Sepal.Length, Sepal.Width))) # 横（行）方向への演算\n## # A tibble: 150 × 6\n## # Rowwise: \n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species  minr\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>   <dbl>\n##  1          5.1         3.5          1.4         0.2 setosa    3.5\n##  2          4.9         3            1.4         0.2 setosa    3  \n##  3          4.7         3.2          1.3         0.2 setosa    3.2\n##  4          4.6         3.1          1.5         0.2 setosa    3.1\n##  5          5           3.6          1.4         0.2 setosa    3.6\n##  6          5.4         3.9          1.7         0.4 setosa    3.9\n##  7          4.6         3.4          1.4         0.3 setosa    3.4\n##  8          5           3.4          1.5         0.2 setosa    3.4\n##  9          4.4         2.9          1.4         0.2 setosa    2.9\n## 10          4.9         3.1          1.5         0.1 setosa    3.1\n## # ℹ 140 more rows\n\niris |> tibble() |> mutate(minr = min(c(Sepal.Length, Sepal.Width))) # 縦の最小値が出てくる\n## # A tibble: 150 × 6\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species  minr\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>   <dbl>\n##  1          5.1         3.5          1.4         0.2 setosa      2\n##  2          4.9         3            1.4         0.2 setosa      2\n##  3          4.7         3.2          1.3         0.2 setosa      2\n##  4          4.6         3.1          1.5         0.2 setosa      2\n##  5          5           3.6          1.4         0.2 setosa      2\n##  6          5.4         3.9          1.7         0.4 setosa      2\n##  7          4.6         3.4          1.4         0.3 setosa      2\n##  8          5           3.4          1.5         0.2 setosa      2\n##  9          4.4         2.9          1.4         0.2 setosa      2\n## 10          4.9         3.1          1.5         0.1 setosa      2\n## # ℹ 140 more rows\n```\n:::\n\n\n### データフレームの結合\n\n2つのデータフレームを横に結合する時に用いる関数が、`_join`関数です。`_join`関数には複数の種類があり、それぞれ結合の仕方が少しずつ異なります。\n\n結合する際には、基本的には以下のルールに従います。\n\n- 列名が同じ要素があれば、1つの列とする\n- 列名が異なる要素は、新しく付け加える\n- 行（レコード）に列の要素がなければ、NAで埋める\n\n結合する際に、`NA`の要素を含む行を取り除くのが`inner_join`関数、`NA`の要素を含む行を全て残すのが`full_join`関数です。\n\n`left_join`関数と`right_join`関数は引数の順番により残す行が変わる関数で、`left_join`関数はパイプ演算子の左のデータフレームの行は全て残し、付け加えたデータフレームの行のうち`NA`を含むものを取り除く関数です。`right_join`関数は逆に、付け加えたデータフレームの行をすべて残し、パイプ演算子の左のデータフレームの行のうち`NA`を含むものを削除します。\n\nこの他に、2つのデータフレームの要素のすべての組み合わせにデータフレームを作成する`cross_join`、列を指定して両方のデータフレームにその列の要素があるものを残す`semi_join`、逆に片方にのみ存在する要素を残す`anti_join`、後に説明する`nest`されたデータフレームを作成する`nest_join`などがあります。\n\n\n::: {.cell filename='join関数でデータフレームを結合する'}\n\n```{.r .cell-code}\nband_members\n## # A tibble: 3 × 2\n##   name  band   \n##   <chr> <chr>  \n## 1 Mick  Stones \n## 2 John  Beatles\n## 3 Paul  Beatles\n\nband_instruments\n## # A tibble: 3 × 2\n##   name  plays \n##   <chr> <chr> \n## 1 John  guitar\n## 2 Paul  bass  \n## 3 Keith guitar\n\nband_members |> inner_join(band_instruments) # NAのデータがあると取り除かれる\n## Joining with `by = join_by(name)`\n## # A tibble: 2 × 3\n##   name  band    plays \n##   <chr> <chr>   <chr> \n## 1 John  Beatles guitar\n## 2 Paul  Beatles bass\n\nband_members |> full_join(band_instruments) # すべてのレコードを残す\n## Joining with `by = join_by(name)`\n## # A tibble: 4 × 3\n##   name  band    plays \n##   <chr> <chr>   <chr> \n## 1 Mick  Stones  <NA>  \n## 2 John  Beatles guitar\n## 3 Paul  Beatles bass  \n## 4 Keith <NA>    guitar\n\nband_members |> left_join(band_instruments) # 左の要素を元に、右の要素を付け加える\n## Joining with `by = join_by(name)`\n## # A tibble: 3 × 3\n##   name  band    plays \n##   <chr> <chr>   <chr> \n## 1 Mick  Stones  <NA>  \n## 2 John  Beatles guitar\n## 3 Paul  Beatles bass\n\nband_members |> right_join(band_instruments) # 右の要素を元に、左の要素を付け加える\n## Joining with `by = join_by(name)`\n## # A tibble: 3 × 3\n##   name  band    plays \n##   <chr> <chr>   <chr> \n## 1 John  Beatles guitar\n## 2 Paul  Beatles bass  \n## 3 Keith <NA>    guitar\n```\n:::\n\n\n### その他のdplyrの関数\n\n`dplyr`には`filter`、`select`、`arrange`、`mutate`、`summarise`以外にも、たくさんの関数が登録されています。`slice`関数は行を一部分選択する関数です。`slice`関数以外にも、「slice_」という名前を持つ複数の関数が`dplyr`には登録されています。\n\n\n::: {.cell filename='slice関数'}\n\n```{.r .cell-code}\niris |> slice(5:10)\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.0         3.6          1.4         0.2  setosa\n## 2          5.4         3.9          1.7         0.4  setosa\n## 3          4.6         3.4          1.4         0.3  setosa\n## 4          5.0         3.4          1.5         0.2  setosa\n## 5          4.4         2.9          1.4         0.2  setosa\n## 6          4.9         3.1          1.5         0.1  setosa\n\niris |> _[5:10, ] # 上と同じ\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n\niris %>% .[5:10, ] # 上と同じ\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 5           5.0         3.6          1.4         0.2  setosa\n## 6           5.4         3.9          1.7         0.4  setosa\n## 7           4.6         3.4          1.4         0.3  setosa\n## 8           5.0         3.4          1.5         0.2  setosa\n## 9           4.4         2.9          1.4         0.2  setosa\n## 10          4.9         3.1          1.5         0.1  setosa\n\niris |> slice_head(n = 5) # head(iris, 5)と同じ\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          5.1         3.5          1.4         0.2  setosa\n## 2          4.9         3.0          1.4         0.2  setosa\n## 3          4.7         3.2          1.3         0.2  setosa\n## 4          4.6         3.1          1.5         0.2  setosa\n## 5          5.0         3.6          1.4         0.2  setosa\n\niris |> slice_tail(n = 5) # tail(iris, 5)と同じ\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 1          6.7         3.0          5.2         2.3 virginica\n## 2          6.3         2.5          5.0         1.9 virginica\n## 3          6.5         3.0          5.2         2.0 virginica\n## 4          6.2         3.4          5.4         2.3 virginica\n## 5          5.9         3.0          5.1         1.8 virginica\n\niris |> slice_min(Sepal.Length, n = 5) # Sepal.Lengthが小さいものから5行\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n## 1          4.3         3.0          1.1         0.1  setosa\n## 2          4.4         2.9          1.4         0.2  setosa\n## 3          4.4         3.0          1.3         0.2  setosa\n## 4          4.4         3.2          1.3         0.2  setosa\n## 5          4.5         2.3          1.3         0.3  setosa\n\niris |> slice_max(Sepal.Length, n = 5) # Sepal.Lengthが大きいものから5行\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n## 1          7.9         3.8          6.4         2.0 virginica\n## 2          7.7         3.8          6.7         2.2 virginica\n## 3          7.7         2.6          6.9         2.3 virginica\n## 4          7.7         2.8          6.7         2.0 virginica\n## 5          7.7         3.0          6.1         2.3 virginica\n \niris |> slice_sample(n = 5) # ランダムに5行抽出\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n## 1          6.4         3.2          4.5         1.5 versicolor\n## 2          4.7         3.2          1.6         0.2     setosa\n## 3          6.5         3.0          5.2         2.0  virginica\n## 4          6.1         3.0          4.6         1.4 versicolor\n## 5          5.1         3.5          1.4         0.3     setosa\n```\n:::\n\n\n`glimpse`関数は`str`関数とよく似た機能を持ち、データフレームの構造を表示してくれます。`pull`関数は列をベクターとして返す関数です。`relocate`関数は列の順番を並べ替えて返してくれます。`rename`関数は列名を付け直す関数です。`count`関数と`tally`関数はそれぞれ要素の数と行数を返す関数です。\n\n`relocate`関数や`rename`関数はパイプ演算子に特化した関数で、用いることでパイプ演算の途中で列の順番や名前を変えることができます。\n\n\n::: {.cell filename='その他のdplyrの関数'}\n\n```{.r .cell-code}\niris |> tibble() |> glimpse()\n## Rows: 150\n## Columns: 5\n## $ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n## $ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n## $ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n## $ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n## $ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n\niris |> head() |> tibble() |> pull(Species) # iris$Speciesと同じ\n## [1] setosa setosa setosa setosa setosa setosa\n## Levels: setosa versicolor virginica\n\n# 列の並べ替え\niris |> tibble() |> relocate(Species, Petal.Width, Petal.Length, Sepal.Width, Sepal.Length)\n## # A tibble: 150 × 5\n##    Species Petal.Width Petal.Length Sepal.Width Sepal.Length\n##    <fct>         <dbl>        <dbl>       <dbl>        <dbl>\n##  1 setosa          0.2          1.4         3.5          5.1\n##  2 setosa          0.2          1.4         3            4.9\n##  3 setosa          0.2          1.3         3.2          4.7\n##  4 setosa          0.2          1.5         3.1          4.6\n##  5 setosa          0.2          1.4         3.6          5  \n##  6 setosa          0.4          1.7         3.9          5.4\n##  7 setosa          0.3          1.4         3.4          4.6\n##  8 setosa          0.2          1.5         3.4          5  \n##  9 setosa          0.2          1.4         2.9          4.4\n## 10 setosa          0.1          1.5         3.1          4.9\n## # ℹ 140 more rows\n\niris |> tibble() |> rename(S = Species) # 列名SpeciesをSに変更\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width S     \n##           <dbl>       <dbl>        <dbl>       <dbl> <fct> \n##  1          5.1         3.5          1.4         0.2 setosa\n##  2          4.9         3            1.4         0.2 setosa\n##  3          4.7         3.2          1.3         0.2 setosa\n##  4          4.6         3.1          1.5         0.2 setosa\n##  5          5           3.6          1.4         0.2 setosa\n##  6          5.4         3.9          1.7         0.4 setosa\n##  7          4.6         3.4          1.4         0.3 setosa\n##  8          5           3.4          1.5         0.2 setosa\n##  9          4.4         2.9          1.4         0.2 setosa\n## 10          4.9         3.1          1.5         0.1 setosa\n## # ℹ 140 more rows\n\n\niris |> count(Species) # 因子や文字列の数を数える関数\n##      Species  n\n## 1     setosa 50\n## 2 versicolor 50\n## 3  virginica 50\n\niris |> tally() # 行数を数える関数\n##     n\n## 1 150\n\niris |> group_by(Species) |> tally() # グループごとに行数を数える関数\n## # A tibble: 3 × 2\n##   Species        n\n##   <fct>      <int>\n## 1 setosa        50\n## 2 versicolor    50\n## 3 virginica     50\n```\n:::\n\n\n## tibble\n\n[データのI/Oの章](./chapter13.html)で説明した通り、`tidyverse`で取り扱う関数は、データフレームを**tibble**というクラスに変換して返り値を返します。tibbleには以下の特徴があります。\n\n- 表示の際に、データフレームの列・行数、各列のデータ型を表示し、上から10行だけ示す\n- クラスにdata.frame、tbl_df、tblを設定する\n- `group_by`や`rowwise`により、グループ化ができる（グループ化したクラスが付け加わる）\n- ネスト（`nest`）したデータを取り扱える\n\ntibbleはデータフレームの作成と同じように、`tibble`関数を用いて作成できます。また、`as_tibble`関数を用いることで、データフレームをtibbleに変換することができます。\n\n\n::: {.cell filename='tibble'}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\nd <- tibble(x = 1:3, y = c(\"a\", \"b\", \"c\"), z = c(T, F, T)) # tibbleを作成\nd\n## # A tibble: 3 × 3\n##       x y     z    \n##   <int> <chr> <lgl>\n## 1     1 a     TRUE \n## 2     2 b     FALSE\n## 3     3 c     TRUE\n\nclass(d) # クラスはtbl_df、tbl、data.frame\n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nas_tibble(iris) # データフレームをtibbleに変換\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n```\n:::\n\n\n`data.frame`関数でデータフレームを作成する場合、列の要素が他の列より短い場合、recycling（繰り返して採用）されてデータフレームが作成されます。tibbleでは、列の要素が1つだけのときのみrecyclingされ、2つ以上であればエラーとなります。不自然なrecyclingは抑制される仕組みになっています。\n\n\n::: {.cell filename='tibbleでのrecycling'}\n\n```{.r .cell-code}\n# サイズが2個以上だとrecycleしない。data.frame関数はrecyclingする\nd <- tibble(x = rep(1:3, 5), y = rep(c(\"a\", \"b\", \"c\"), rep(5, 3)), z = c(T, F, T)) \n## Error in `tibble()`:\n## ! Tibble columns must have compatible sizes.\n## • Size 15: Existing data.\n## • Size 3: Column `z`.\n## ℹ Only values of size one are recycled.\n```\n:::\n\n\n## ネスト（nest）したデータ\n\ntibbleは、**複数のデータを含むもの**を列の要素とする（`nest`、ネストする）ことができます。要は、データフレームやリスト、統計結果のオブジェクトなどを、1つのセルに登録できるということです。「ネストしてしまうとtidyじゃないのでは？」と思わなくは無いのですが、データフレームをコンパクトにして見やすくすることはできます。\n\nこの、「複数のデータを含むもの」を作成する場合には、`nest`関数を用います。グループ化したtibbleに`nest`関数を適用すると、グループごとのデータフレームを1つのセルに詰め込むことができます。`nest`したデータを元に戻すときには、`unnest`関数を用います。\n\n\n::: {.cell filename='nest関数でネストする'}\n\n```{.r .cell-code}\niris |> group_by(Species) # データのグループ化（tibbleに変換される）\n## # A tibble: 150 × 5\n## # Groups:   Species [3]\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n\niris_nested <- iris |> as_tibble() |> group_by(Species) |> nest() # ネストしたデータ\n\niris_nested\n## # A tibble: 3 × 2\n## # Groups:   Species [3]\n##   Species    data             \n##   <fct>      <list>           \n## 1 setosa     <tibble [50 × 4]>\n## 2 versicolor <tibble [50 × 4]>\n## 3 virginica  <tibble [50 × 4]>\n\niris_nested[1, 2] |> unnest() # ネストを解除\n## Warning: `cols` is now required when using `unnest()`.\n## ℹ Please use `cols = c(data)`.\n## # A tibble: 50 × 4\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width\n##           <dbl>       <dbl>        <dbl>       <dbl>\n##  1          5.1         3.5          1.4         0.2\n##  2          4.9         3            1.4         0.2\n##  3          4.7         3.2          1.3         0.2\n##  4          4.6         3.1          1.5         0.2\n##  5          5           3.6          1.4         0.2\n##  6          5.4         3.9          1.7         0.4\n##  7          4.6         3.4          1.4         0.3\n##  8          5           3.4          1.5         0.2\n##  9          4.4         2.9          1.4         0.2\n## 10          4.9         3.1          1.5         0.1\n## # ℹ 40 more rows\n```\n:::\n\n\nこれだけでは`nest`する意味があまりわかりませんが、この`nest`と共に、リストに関数を適用するためのライブラリである、`purrr`パッケージ [@purrr_bib]を用いると、統計計算の効率を高めることができます。`purrr`パッケージの`map`関数は、リスト（データフレームはリスト）の要素に対して、関数を適用する関数です。これだけだと`apply`関数群で説明した`lapply`・`sapply`関数と同じなのですが、`map`関数はパイプ演算子の中で、`mutate`関数の引数として用いることができます。\n\nグループ化したtibbleに対して`mutate`関数内でネストした要素に対して`map`関数を用いると、**統計結果をネストしたtibble**が返ってきます。\n\n下の例では、`iris`を種別にあらかじめグループ化・ネストしておき、`iris`の`Sepal.Length`と`Sepal.Width`について線形回帰を行った結果を、`mutate`関数でtibbleに追加しています。このような計算を行うと、追加された列には`<lm>`という要素が登録されます。`<lm>`は線形回帰の結果のオブジェクトですので、グループごと、つまり種ごとに`Sepal.Length`と`Sepal.Width`の線形回帰を行った結果が記録され、保存されていることを示しています。このような形でプログラムを書くことで、3回線形回帰を繰り返すことなく、1行のパイプ演算子の演算により3回の線形回帰結果を得ることができます。\n\n\n::: {.cell filename='purrr::mapでネストしたデータを統計解析する'}\n\n```{.r .cell-code}\niris |> group_by(Species) |> nest() # nestするとdataの行が追加される\n## # A tibble: 3 × 2\n## # Groups:   Species [3]\n##   Species    data             \n##   <fct>      <list>           \n## 1 setosa     <tibble [50 × 4]>\n## 2 versicolor <tibble [50 × 4]>\n## 3 virginica  <tibble [50 × 4]>\n\n# tibbleは統計結果もnestできる\n(d <- \n    iris |> \n    group_by(Species) |> \n    nest() |> \n    mutate(lmcalc = map(data, ~lm(Sepal.Length ~ Sepal.Width, data = .))))\n## # A tibble: 3 × 3\n## # Groups:   Species [3]\n##   Species    data              lmcalc\n##   <fct>      <list>            <list>\n## 1 setosa     <tibble [50 × 4]> <lm>  \n## 2 versicolor <tibble [50 × 4]> <lm>  \n## 3 virginica  <tibble [50 × 4]> <lm>\n\nd$lmcalc[1] # 線形回帰の結果\n## [[1]]\n## \n## Call:\n## lm(formula = Sepal.Length ~ Sepal.Width, data = .)\n## \n## Coefficients:\n## (Intercept)  Sepal.Width  \n##      2.6390       0.6905\n```\n:::\n\n\n## dplyrの条件分岐\n\n### if_else関数\n\n`dplyr`には、データフレームを取り扱う関数の他に、条件分岐に関する機能を提供しています。\n\n`ifelse`関数はデフォルトのRで利用できる関数ですが、`dplyr`には、`if_else`関数という、ほとんど同じ機能を持つ関数が設定されています。`ifelse`と`if_else`の違いは、\n\n- 条件式に`NA`が含まれた時に`missing`引数に設定した値を返す\n- 返り値のデータ型を維持する\n- `TRUE`と`FALSE`の返り値の型が違うとエラー\n\nの3点です。通常の`ifelse`関数では型変換等のトラブルが起こりやすいため、なるべく`if_else`関数を利用したほうがよいでしょう。\n\n\n::: {.cell filename='if_else関数'}\n\n```{.r .cell-code}\nv <- c(1, 2, NA, 3)\nifelse(v > 2, \"large\", \"small\")\n## [1] \"small\" \"small\" NA      \"large\"\n\nif_else(v > 2, \"large\", \"small\") # ifelseと同じ\n## [1] \"small\" \"small\" NA      \"large\"\n\nif_else(v > 2, \"large\", \"small\", missing = \"missing\") # NAだと\"missing\"が返ってくる\n## [1] \"small\"   \"small\"   \"missing\" \"large\"\n\n\nifelse(TRUE, as.Date(\"2023-10-10\"), as.Date(\"2023-10-11\")) # 数値が返ってくる\n## [1] 19640\n\nifelse(TRUE, as.Date(\"2023-10-10\"), FALSE) # 型が違っても数値が返ってくる\n## [1] 19640\n\nif_else(TRUE, as.Date(\"2023-10-10\"), as.Date(\"2023-10-11\")) # 日時が返ってくる\n## [1] \"2023-10-10\"\n\nif_else(TRUE, as.Date(\"2023-10-10\"), FALSE) # 型が違うとエラーが返ってくる\n## Error in `if_else()`:\n## ! Can't combine `true` <date> and `false` <logical>.\n```\n:::\n\n\n### case_matchとcase_when\n\n`dplyr`には、条件分岐を取り扱う文（関数）として、`case_match`と`case_when`が設定されています。どちらもチルダ（`~`）を返り値の設定に用いるもので、`else if`文や`switch`文を用いなくても、比較的簡単に3つ以上の条件分岐を行うことができます。\n\n`case_match`は第一引数にベクター、それ以降に「`評価する値 ~ 返り値`」という形で引数を取り、ベクターの要素が「評価する値」と一致する場合に、対応する返り値を返す関数です。「評価する値」はベクターで設定することもできます。\n\n\n::: {.cell filename='case_matchで条件分岐'}\n\n```{.r .cell-code}\nc(1, 2, 1, 2) |> \n  case_match( # ベクターの要素が1ならone、2ならtwoを返す\n    1 ~ \"one\",\n    2 ~ \"two\"\n  )\n## [1] \"one\" \"two\" \"one\" \"two\"\n\n1:10 |> \n  case_match( # 「評価する値」はベクターでも設定できる\n    c(1, 3, 5, 7, 9) ~ \"odd\",\n    c(2, 4, 6, 8, 10) ~ \"even\"\n  )\n##  [1] \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\" \"odd\"  \"even\"\n```\n:::\n\n\n`case_when`は、引数に「`条件式 ~ 返り値`」を取り、条件式が`TRUE`のときに対応する返り値を返します。`case_match`、`case_when`のいずれもパイプ演算子中で他の`dplyr`の関数と共に用いることを想定して設計されています。`if_else`、`case_match`、`case_when`を用いれば、`mutate`関数内で条件分岐を行うこともできます。また、どの条件にも合わないとき（`if`文における`else`に当たるもの）の返り値を設定する場合には、`default`引数を設定します。\n\n\n::: {.cell filename='case_when関数で条件分岐'}\n\n```{.r .cell-code}\niris_s <- iris |> slice_sample(n = 5) |> select(Species) |> unlist() |> as.character()\niris_s\n## [1] \"virginica\"  \"virginica\"  \"virginica\"  \"virginica\"  \"versicolor\"\n\ncase_when(\n  iris_s == \"setosa\" ~ 1, # 条件がTRUEなら、~の後ろの値を返す\n  iris_s == \"versicolor\" ~ 2,\n  iris_s == \"virginica\" ~ 3\n)\n## [1] 3 3 3 3 2\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}