{
  "hash": "213f82e508a82b3474689f0ece96e371",
  "result": {
    "engine": "knitr",
    "markdown": "# ライブラリ\n\n\n\n\n\n## ライブラリとは？\n\nRは統計のプログラミング言語であり、インストールしてすぐに統計の計算を行うことができるよう設計されています。例えば、代表的な統計処理である、平均値や標準偏差の計算、t検定や分散分析、グラフの作図等は、Rをインストールし、起動した次の瞬間から実行することができます。\n\nしかし、この素の（nativeな）Rでは、近年開発された現代的な統計手法や、優れたデザインやインタラクティブ性を持つグラフの作成、複雑なデータの効率的な整理、Webページの作成など、現代のプログラミング言語に備わる機能のすべてを用いることはできません。\n\nRを含めた多くのプログラミング言語では、nativeな言語ではできない機能を後から追加することができます。この追加する機能のセットのことを、**ライブラリ**と呼びます（**パッケージ**と呼ぶこともあります）。\n\nRのライブラリは（基本的には）[**CRAN**](https://cran.r-project.org/)で管理されており、審査が行われた上で登録されています。ライブラリはCRANのリポジトリ（データを格納する場所のこと）に保存されており、RのユーザーはこのCRANのリポジトリから、必要なライブラリを**インストール**して用いることになります。\n\nライブラリは、インストールしただけでは用いることができません。ライブラリを**読み込み（ロード、load）**、メモリ上に展開しておくことでライブラリの機能を用いることができるようになります。この読み込みはRを起動するたびに行います。ライブラリの機能は関連する関数群として実装されていますので、ロードすることでライブラリに登録されている関数を用いることができるようになります。\n\n:::{.callout-tip collapse=\"true\"}\n\n## ライブラリを毎回読み込む\n\nライブラリをいちいち読み込むのは面倒ではありますが、必要ないライブラリを読み込んでしまうと、その分メモリを食うことになります。必要ないライブラリは読み込まないことで、メモリを節約し、プログラムの動作を軽くすることができます。他の言語にも同様の機能が備わっており、必要なライブラリのみを読み込んで用いるのが一般的です。\n\nRでは、デフォルトのワーキングディレクトリに.Rprofileというファイルを保存しておけば、この中身のプログラムをR起動時に実行してくれるという仕組みがあります。.Rprofileにいつも使うライブラリをロードするように、スクリプトを準備しておいてもよいかもしれません。\n\n:::\n\n## ライブラリのインストール\n\n### CRANからのインストール\n\n上記のように、ライブラリはまず**インストール**しないと用いることはできません。Rでライブラリをインストールする時には、`install.packages`関数を用います。`install.packages`関数の引数は**文字列のライブラリ名**です。ですので、ライブラリ名をダブルクオーテーションで囲う必要があります。ライブラリは自動的にダウンロードされ、`.libPaths`関数で表示されるフォルダにインストールされます。\n\n\n::: {.cell filename='ライブラリのインストール'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\") # tidyverseというライブラリをインストールする\ninstall.packages(c(\"tidyverse\", \"pacman\")) # 複数のパッケージ名をベクターで与えることもできる\n\ninstall.packages(tidyverse) # エラーが出る。ライブラリ名は文字列でないとダメ\n\n.libPaths() # ライブラリのインストール先を表示\n```\n:::\n\n\n## ライブラリをロードする\n\nライブラリをロードするときには、`library`関数を用います。`library`関数の引数は、**文字列ではない**ライブラリ名です。文字列のライブラリ名でも読み込みはできますが、ダブルクオーテーションで囲う必要はありません。\n\n同様に`require`関数でもライブラリを読み込むことができます。`require`関数では、ライブラリの読み込みに成功すると`TRUE`が、失敗すると`FALSE`が返り値として返ってくるという特徴があります。\n\n`library`関数を引数なしで実行すると、インストールされているライブラリの一覧が表示されます。\n\n\n::: {.cell filename='ライブラリをロードする'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # tidyverseパッケージを読み込む\nlibrary(\"pacman\") # pacmanパッケージを読み込む（文字列）\n\nrequire(pacman) # requireによる読み込み（読み込みができたらTRUEが返ってくる）\n\nlibrary() # ライブラリの一覧を表示する\n```\n:::\n\n\n### ライブラリをロードせずに使用する\n\nライブラリに登録されている関数を用いるには、通常ロードする必要がありますが、ライブラリをロードしなくても個別の機能（関数）を用いることはできます。ライブラリをロードせずにそのライブラリの関数を用いるときには、**「ライブラリ名::関数名」**という形で関数を呼び出します。\n\n\n::: {.cell filename='ライブラリをロードせずに関数を用いる'}\n\n```{.r .cell-code}\n# install.packages(\"lubridate\") であらかじめライブラリのインストールが必要\n\nymd(\"2023-10-10\") # lubridateパッケージの関数はライブラリをロードしないと使えない\n## Error in ymd(\"2023-10-10\"): could not find function \"ymd\"\n\nlubridate::ymd(\"2023-10-10\") # パッケージ名::関数名でロードしなくても関数が使える\n## [1] \"2023-10-10\"\n```\n:::\n\n\n### githubからのインストール\n\n最近では、最新のライブラリはCRANだけでなく、[**GitHub**](https://github.co.jp/)というプログラム開発プラットフォームからインストールすることもあります。ただし、**GitHubのライブラリはCRANによるチェックを受けていない**ものですので、インストールする際には注意が必要です。GitHubからのライブラリのインストールには、`devtools` [@devtools_bib]パッケージの`install_github`関数を用います。引数には、ライブラリの**リポジトリ**というものを文字列で取ります。\n\n例えば、[Displayr](https://www.displayr.com/)という会社が開発している`flipPlots`というライブラリをGitHubからインストールする場合には、GitHubの対象のページのアドレス（https://github.com/Displayr/flipPlots）のうち、後ろの2つの項目（`Displayr/flipPlots`）をリポジトリとして取り扱います。GitHubのページにはリポジトリ名が記載されています。\n\n![図1：GitHubのリポジトリ名](./image/github_reponame.png)\n\n\n\n::: {.cell filename='GitHubからのライブラリのインストール'}\n\n```{.r .cell-code}\n# flipPlotsというライブラリをGitHubからインストールする(インストールは自己責任で)\n# devtools::install_github(\"Displayr/flipPlots\") \n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## GitとGithub\n\nGitHubは、[Git](https://git-scm.com/)（バージョン管理システム）というものと連携して用いる、リモートリポジトリと呼ばれるものです。RstudioからGit及びGitHubを利用することもできます。\n\n:::\n\n### Bioconductorからのインストール\n\n生物系の統計手法（DNAのアライメントやシーケンサーデータの処理、系統樹の計算等）のライブラリを専門的に取り扱っているのが、[**Bioconductor**](https://www.bioconductor.org/)です。Bioconductorに設定されているライブラリはCRANやgithubのものとは取り扱いが少し異なります。\n\nBioconductorのライブラリを利用するには、`BiocManager` [@BiocManager_bib]というライブラリをあらかじめインストールする必要があります。Bioconductorのライブラリのインストールにはこの`BiocManeger`パッケージの`install`関数を用います。`install`関数を引数なしで用いると、Bioconductorのコアライブラリをすべてインストールすることができます。特定のライブラリをインストールするときには、引数に文字列のライブラリ名を入力します。\n\nインストールしたBioconductorライブラリのロードは通常のライブラリと同様に`library`関数で行うことができます。\n\n\n::: {.cell filename='Bioconductorのライブラリをインストール'}\n\n```{.r .cell-code}\ninstall.packages(\"BiocManager\") # BioManagerパッケージのインストール\nBiocManager::install() # Bioconductorのコアライブラリをインストールする\nBiocManager::install(c(\"GenomicFeatures\", \"AnnotationDbi\"))\n```\n:::\n\n\n## ライブラリを簡単に取り扱う：pacman\n\nライブラリはインストールしないとロードすることができません。ですので、インストールしていないライブラリをロードしようとするととエラーが出ます。`if`文を用いると、ライブラリがインストールされていないときにはインストールしてロード、インストールされているときにはロードが実行されるようにすることもできます。\n\n\n::: {.cell filename='pacman::p_load関数によるライブラリのロード'}\n\n```{.r .cell-code}\n# climetricsパッケージ（気候変化に関するライブラリ）は\n# インストールされていないので、エラーが出る\nlibrary(climetrics) \n\nrequire(climetrics) # インストールしないと読み込めないので、FALSEが返ってくる\n\n# require関数でFALSEが返ってきたら、パッケージをインストールする\nif(!require(climetrics)) install.packages(\"climetrics\")\n```\n:::\n\n\nこの`if`文と`require`関数を用いる書き方は長い間使用されてきましたが、やや複雑で覚えにくいものです。このようなライブラリの取り扱いを簡単にしてくれるのが`pacman` [@pacman_bib]パッケージです。近年では、この`pacman`パッケージの`p_load`関数を用いてパッケージをロードすることも増えてきています。`p_load`関数を用いるには、`pacman`パッケージをロードする必要があります。ライブラリのロードのために別途`pacman`だけロードするのは面倒ですので、`pacman::p_load`という形で、ライブラリをロードすることなく関数だけ用いるのが一般的です。この他に、[pak](https://pak.r-lib.org/index.html)[@pak_bib]と呼ばれるパッケージ管理のライブラリも最近では用いられています。\n\n\n::: {.cell filename='pacman::p_load関数を用いたライブラリのロード'}\n\n```{.r .cell-code}\n# ライブラリをロードする（インストールされてなければインストールしてからロードする）\npacman::p_load(tidyverse, lubridate)\n```\n:::\n\n\n## tidyverse\n\n近年のRでは、[**Posit**](https://posit.co/)（旧Rstudio、IDEであるRstudioの開発元）およびPositのチーフサイエンティストである**Hadley Wickham**が中心となって作成された複数のライブラリのセットである、[`tidyverse`](https://www.tidyverse.org/) [@tidyverse_bib]を用いるのがほぼ常識となっています。`tidyverse`のライブラリ群を用いなくてもRを使うことはできますが、このライブラリ群を用いることでデータの整理・グラフ作成・文字列の処理等を簡単に行うことができるようになります。`tidyverse`のライブラリ群は以下のように一度にインストール・ロードすることができます。\n\n\n::: {.cell filename='tidyverseのインストールと読み込み'}\n\n```{.r .cell-code}\npacman::p_load(tidyverse) # tideverseのインストール・ロード(install.packages・library関数でも可)\n```\n:::\n\n\n`tidyverse`に含まれているライブラリを以下に示します。個別の、重要なライブラリに関しては別章で説明します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：tidyverseに含まれるライブラリ群\n\n|ライブラリ名 |ライブラリの主な機能               |\n|:------------|:----------------------------------|\n|dpylr        |データフレームの編集               |\n|tidyr        |データフレームの変形（縦・横持ち） |\n|ggplot2      |現代的なデザインのグラフ作成       |\n|tibble       |使いやすいデータフレームの提供     |\n|stringr      |文字列の処理                       |\n|purrr        |リストへの関数の適用               |\n|readr        |データ読み込み                     |\n|forcats      |因子（factor）の処理               |\n\n\n:::\n:::\n\n\n## その他の便利なライブラリ\n\n`tidyverse`の他にも、データ処理を簡単にしたり、インタラクティブなグラフを作成したり、Rで文書を作成したりするためのライブラリをRは備えています。以下によく用いられるライブラリを示します。統計に関するライブラリも無数に存在します。統計に関するライブラリについては、統計手法の説明の際に紹介します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表2：Rで用いられている便利なライブラリ\n\n|ライブラリ名 |ライブラリの主な機能             |\n|:------------|:--------------------------------|\n|magrittr     |パイプ演算子を提供               |\n|readxl       |Excelファイルの読み込み          |\n|googlesheet4 |Googleスプレッドシートの読み込み |\n|lubridate    |日時データの処理                 |\n|broom        |統計結果の変形                   |\n|DT           |美しい表の作成                   |\n|plotly       |インタラクティブなグラフの作成   |\n|Rmarkdown    |文書の作成                       |\n|shiny        |Webアプリケーションの作成        |\n|pacman       |ライブラリのインストール・ロード |\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}