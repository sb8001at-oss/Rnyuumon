{
  "hash": "10fafeef20cbceb746c7ceebea3441a9",
  "result": {
    "engine": "knitr",
    "markdown": "# グラフ作成：低レベルグラフィック関数とグラフィックパラメータ\n\n[前章](./chapter20.html)で説明した高レベルグラフィック関数は、少数の引数を与えれば軸や点の位置、グラフの種類等をほぼ自動的に設定してくれる関数です。\n\n一方で、**低レベルグラフィック関数**は、グラフ上に点や線、文字などを逐次追加していくための関数です。Rでは基本的には高レベルグラフィック関数を用いて大まかなグラフを作成し、追加で説明などを加えたいときには低レベルグラフィック関数を用います。低レベルグラフィック関数の一覧を以下の表1に示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：低レベルグラフィック関数\n\n|関数名                             |関数の意味                                        |\n|:----------------------------------|:-------------------------------------------------|\n|points(x, y)                       |x, yで指定した場所に点を追加                      |\n|text(x, y, label)                  |x, yで指定した場所にlabelで指定したテキストを追加 |\n|abline(a, b)                       |傾きb，切片aの線を追加                            |\n|abline(h)                          |hで指定したy軸の位置に横線を追加                  |\n|abline(v)                          |vで指定したx軸の位置に縦線を追加                  |\n|polygon(x, y)                      |x, yで指定した点をつなぐ形を追加                  |\n|rect(xleft, ybottom, xright, ytop) |指定したサイズの長方形を追加                      |\n|symbols(x, y, circles)             |x, yで指定した位置に図形（円など）を追加          |\n|arrows(x0, y0, x1, y1)             |x0, y0の位置からx1, y1の位置までの矢印を追加      |\n|legend(x, y, legend)               |凡例を追加                                        |\n|title(main, sub)                   |グラフのタイトルを追加                            |\n|axis(side)                         |sideで指定した位置に軸を追加                      |\n|grid()                             |グリッド線を追加                                  |\n\n\n:::\n:::\n\n\n## points関数\n\n`points`関数は、すでに存在するグラフに点を追加するための関数です。`points`関数は`x`と`y`の2つの引数を取り、その`x`、`y`が示す場所に点を追加します。\n\n\n::: {.cell filename='point関数で点を描画'}\n\n```{.r .cell-code}\nplot(x = 0, y = 0, type = \"n\", xlab = \"\", ylab = \"\") # 軸だけのプロット\npoints(x = 0, y = 0) # x=0, y=0に点を追加\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## text関数\n\n`text`関数は、グラフに文字を追加するための関数です。`text`関数は`x`、`y`と`label`の3つの引数を取り、その`x`、`y`が示す場所に`labels`で指定した文字列を追加します。\n\n\n::: {.cell filename='text関数でテキスト表示'}\n\n```{.r .cell-code}\nplot(x = 0, y = 0, type = \"n\", xlab = \"\", ylab = \"\")\ntext(x = 0, y = 0, labels = \"added text\") # x=0, y=0にテキストを追加\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## abline関数\n\n`abline`関数はグラフに直線を追加するための関数です。`abline`関数の引数の指定方法には以下の4種類があります。\n\n- 切片（引数`a`）と傾き（引数`b`）を指定する\n- 横線のy軸の位置（引数`h`）を指定する\n- 縦線のx軸の位置（引数`v`）を指定する\n- 線形回帰の結果（引数`coef`）を指定する\n\n\n::: {.cell filename='abline関数で直線を引く'}\n\n```{.r .cell-code}\nplot(x = 0, y = 0, type = \"n\", xlab = \"\", ylab = \"\")\nabline(a = -0.5, b = 2, col = \"red\") # y = 2 x - 0.5 の線を追加\nabline(h = 1, col = \"blue\") # y = 1 の水平線を追加\nabline(v = -1, lty = 2, col = \"darkgreen\") # x = -1 の縦線（点線）を追加\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## 多角形・図形・矢印を追加\n\nグラフ上に多角形や長方形、図形、矢印を追加する場合には、それぞれ`polygon`関数、`rect`関数、`symbols`関数、`arrows`関数を用います。\n\n`polygon`関数は、引数`x`と`y`に数値のベクターを取り、そのベクターで指定した`x`、`y`の点を繋げた多角形を追加する関数です。始点と終点が一致していれば閉じた多角形を、一致していなければ閉じていない多角形を描画します。\n\n`rect`関数は長方形を追加するための関数です。`rect`関数では、引数`xleft`、`xright`で長方形の左端、右端、引数`ybottom`、`ytop`で長方形の下端、上端を指定します。\n\n`symbols`関数は引数`x`、`y`に指定した位置に図形を追加するための関数です。`symbols`関数で指定できる図形は、円（`circles`）、正方形（`squares`）、長方形（`rectangles`）、星（`stars`）、温度計（`thirmometers`）、箱ひげ図（`boxplot`）です。図形名を引数に取り、数値で図形の詳細を指定することでそれぞれの図形を描画できます。\n\n`arrows`関数は矢印を追加するための関数です。`arrows`関数の始めの2つの引数（`x0`と`y0`）には矢印の始点の座標を、3つ目と4つ目の引数（`x1`と`y1`）には矢印の終点の座標をそれぞれ指定します。\n\n\n::: {.cell filename='様々な図形の描画'}\n\n```{.r .cell-code}\npar(mai = c(0.1, 0.1, 0.1, 0.1))\nplot(x = 0, y = 0, type = \"n\", xlab = \"\", ylab = \"\", axes = FALSE)\npolygon( # 多角形（星形）を追加\n  x = c(0, 0.2245, 0.9511, 0.3633, 0.5878, 0, -0.5878, -0.3633, -0.9511, -0.2245, 0, 0.2245) * 0.25 - 0.5,\n  y = c(1, 0.309, 0.309, -0.118, -0.809, -0.382, -0.809, -0.118, 0.309, 0.309, 1, 0.309)* 0.25 + 0.5, \n  col = \"#48C9B0\"\n)\n# 長方形を追加\nrect(xleft = 0, xright = 0.5, ybottom = 0.25, ytop = 0.75, col = \"#E74C3C\")\n# 円を追加\nsymbols(x = -0.5, y = -0.5, circles = 0.1, add = TRUE, inches = 0.3, col = \"#5DADE2\")\n# 矢印を追加\narrows(x0 = 0.25, y0 = -0.75, x1 = 0.5, y1 = -0.5, col = \"#A569BD\")\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## 凡例とタイトルの追加\n\n`legend`関数は凡例（legend）を追加するための関数です。`legend`関数は`x`、`y`、`legend`の3つの引数を取り、`x`と`y`には凡例の位置を、`legend`には凡例の説明を示す文字列をそれぞれ引数に取ります。\n\n`title`関数はグラフのタイトルを追加するための関数です。`title`関数では、`main`と`sub`の2つの引数にそれぞれメインタイトル、サブタイトルを文字列で指定することで、それぞれのタイトルをグラフに追加することができます。\n\n\n::: {.cell filename='凡例（legend）とタイトル（title）の表示'}\n\n```{.r .cell-code}\nplot(x = 0, y = 0, type = \"n\", xlab = \"\", ylab = \"\")\n# 凡例（legend）を追加\nlegend(x = 0.5, y = -0.5, legend = \"point\", pch = 1)\n# タイトルを追加\ntitle(main = \"メインタイトル\", sub = \"サブタイトル\")\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 軸とグリッドの操作\n\n`axis`関数はグラフの縦・横軸を追加するための関数です。`axis`関数の引数は数値の1～4で、1からそれぞれ下・左・上・右の軸の追加を意味します。\n\nグリッド線の追加に用いるのが`grid`関数です。`grid`関数を引数無しで指定すれば、すでに記述されている軸ラベルに従いグリッド線を追加してくれます。引数でグリッドの間隔を指定することもできます。\n\n\n::: {.cell filename='軸・グリッドの追加'}\n\n```{.r .cell-code}\n# 軸のないプロットの表示\nplot(x = 0, y = 0, type = \"n\", xlab = \"\", ylab = \"\", axes = FALSE)\naxis(1) # 下に軸を追加\naxis(2) # 左に軸を追加\ngrid() # グリッドを追加\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## グラフィックパラメータ\n\nRのグラフ作成では、**グラフィックパラメータ**と呼ばれる引数を指定し、点や線、色や軸ラベル等を調整することができます。\n\nグラフィックパラメータは`par`関数の引数として用います。`plot`関数などの高レベルグラフィック関数では、引数として一部のグラフィックパラメータを使用することもできます。Rのグラフィックパラメータは60以上あり、うまく利用すれば見やすく、理解しやすいグラフを作成することもできます。グラフィックパラメータの一覧を以下の表2に示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-8e5d4c7c0dffb0286b66\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8e5d4c7c0dffb0286b66\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>表2：グラフィックパラメータの一覧<\\/caption>\",\"data\":[[\"adj\",\"ann\",\"ask\",\"bg\",\"bty\",\"cex\",\"cex.axis\",\"cex.lab\",\"cex.main\",\"cex.sub\",\"col\",\"col.axis\",\"col.lab\",\"col.main\",\"col.sub\",\"crt\",\"family\",\"fg\",\"fig\",\"fin\",\"font\",\"font.axis\",\"font.lab\",\"font.main\",\"font.sub\",\"lab\",\"las\",\"lend\",\"ljoin\",\"lmitre\",\"lty\",\"lwd\",\"mai\",\"mar\",\"mex\",\"mfcol, mfrow\",\"mfg\",\"mgp\",\"new\",\"oma\",\"omd\",\"omi\",\"pch\",\"pin\",\"plt\",\"ps\",\"pty\",\"srt\",\"tck\",\"tcl\",\"usr\",\"xaxp\",\"xaxs\",\"xaxt\",\"xlog\",\"xpd\",\"yaxp\",\"yaxs\",\"yaxt\",\"ylbias\",\"ylog\"],[\"数値\",\"論理型\",\"論理型\",\"文字列\",\"文字列\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"文字列\",\"文字列\",\"文字列\",\"文字列\",\"文字列\",\"数値\",\"文字列\",\"文字列\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"論理型\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"文字列\",\"数値\",\"数値\",\"数値\",\"数値\",\"数値\",\"文字列\",\"文字列\",\"論理型\",\"論理型\",\"数値\",\"文字列\",\"文字列\",\"数値\",\"論理型\"],[\"文字列の揃えの指定\",\"列ラベルの表示\",\"表示前に入力を求める\",\"背景色\",\"軸表示の方法\",\"点の大きさ\",\"軸の数値の大きさ\",\"軸ラベルの大きさ\",\"タイトルの大きさ\",\"サブタイトルの大きさ\",\"点の色\",\"軸の数値の色\",\"軸ラベルの色\",\"タイトルの色\",\"サブタイトルの色\",\"文字の回転角度\",\"フォントファミリーの指定\",\"枠の色\",\"グラフのデバイス上での位置を指定\",\"グラフのサイズ（幅、高さ、単位はインチ）\",\"使用するフォント\",\"軸の数値に使用するフォント\",\"軸ラベルに使用するフォント\",\"タイトルに使用するフォント\",\"サブタイトルに使用するフォント\",\"軸の数値のおおよその数（x軸、y軸、長さ）\",\"軸の数値の方向\",\"線の端の形\",\"線の接続の形\",\"線の接続の形（接続のしかた）\",\"線の種類（実線、点線など）\",\"線の太さ\",\"グラフのマージンの大きさ（インチ）\",\"グラフのマージンの大きさ（ライン）\",\"マージンに依存したフォントサイズの大きさ\",\"デバイスにグラフを複数表示するときの指定\",\"グラフを複数表示するときの表示位置の指定\",\"表題や軸ラベルと軸との間隔\",\"デバイスをクリアせずに描画する\",\"グラフのマージンの大きさ（文字の行）\",\"グラフを複数表示するときのマージンの内側のサイズ（数値は割合）\",\"グラフを複数表示するときのマージンの大きさ（インチ）\",\"グラフの点の大きさ\",\"グラフのサイズ（幅、高さ，単位はインチ）\",\"現在の図の位置の中でのグラフのサイズ（数値は割合）\",\"テキストのサイズ（単位はポイント）\",\"グラフの枠の形\",\"文字列の角度の指定\",\"軸ラベルを示す線の長さ（数値は割合）\",\"軸ラベルを示す線の長さ\",\"軸の境界値\",\"x軸ラベルの位置\",\"x軸ラベルの位置（自動的ラベル付与の設定変更）\",\"x軸の表示方法\",\"x軸を対数変換する\",\"グラフ・図の切り出し\",\"y軸ラベルの位置\",\"y軸ラベルの位置（自動的ラベル付与の設定変更）\",\"y軸の表示方法\",\"軸ラベルの文字の位置\",\"y軸を対数変換する\"],[\"adj=0（左揃え）、adj=1（右揃え）など\",\"ann=FALSE\",\"ask=TRUE\",\"bg=\\\"red\\\"\",\"bty=\\\"l\\\", bty=\\\"c\\\"など\",\"cex=2\",\"cex.axis=2\",\"cex.lab=2\",\"cex.main=2\",\"cex.sub=2\",\"col=\\\"blue\\\"\",\"col.axis=\\\"green\\\"\",\"col.lab=\\\"orange\\\"\",\"col.main=\\\"yellow\\\"\",\"col.sub=\\\"violet\\\"\",\"crt=90\",\"familty=\\\"sans\\\"\",\"fg=\\\"yellowgreen\\\"\",\"fig=c(0, 0.5, 0, 0.5)\",\"fin=c(4, 4)\",\"font=2（太字）, font=3（イタリック）など\",\"font.axis=4（太字イタリック）など\",\"font.lab=2\",\"font.main=2\",\"font.sub=2\",\"lab=c(4, 4, 8)\",\"las=2など\",\"lend=0（丸）, lend=2（角）など\",\"ljoin=0（丸）, ljoin=2（角）など\",\"lmitre=5など\",\"lty=2など\",\"lwd=2\",\"mai=c(1, 1, 1, 1)など\",\"mar=c(3, 3, 3, 1)など\",\"mex=2\",\"mfcol=c(2,2), mfrow=c(3,2)\",\"mfg=c(1, 2)\",\"mgp=c(1, 1, 2) （表題、x軸ラベル、y軸ラベル）\",\"new=T\",\"oma=c(1, 1, 1, 1)\",\"omd=c(0.1, 0.9, 0.1, 0.9)\",\"omi=c(1, 1, 1, 1)\",\"pch=2\",\"pin=c(4, 4)\",\"plt=c(0.3, 0.5, 0.3, 0.5)\",\"ps=16\",\"pty=\\\"s\\\"（正方形）, pty=\\\"m\\\"（最大）\",\"srt=90\",\"tck=0.2\",\"tcl=1\",\"usr=c(0, 10, 0, 15)\",\"xaxp=c(0, 10, 2)（0から10まで2間隔）\",\"xaxs=\\\"r\\\"，xaxs=\\\"I\\\"\",\"xaxt=\\\"n\\\", xaxt=\\\"s\\\"\",\"xlog=T\",\"xpd=TRUE, xpd=NAなど\",\"yaxp=c(0, 10, 2)（0から10まで2間隔）\",\"yaxs=\\\"r\\\"，yaxs=\\\"I\\\"\",\"yaxt=\\\"n\\\", yaxt=\\\"s\\\"\",\"ylbias=0.5\",\"ylog=T\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>グラフィックパラメータ<\\/th>\\n      <th>引数の型<\\/th>\\n      <th>意味<\\/th>\\n      <th>指定の例<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"columnDefs\":[{\"name\":\"グラフィックパラメータ\",\"targets\":0},{\"name\":\"引数の型\",\"targets\":1},{\"name\":\"意味\",\"targets\":2},{\"name\":\"指定の例\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## 重ね書き：new=T\n\n[前章](./chapter20.html)で説明した通り、Rではすでに記述しているグラフに、別のグラフを重ね書きすることができます。この重ね書きに用いるのが、`new=T`というグラフィックパラメータです。`par(new=T)`を宣言すると、宣言前に作図したグラフを消去することなく、同じデバイス上に次のグラフが追加されます。\n\n\n::: {.cell filename='par(new=T)でグラフの重ね書き'}\n\n```{.r .cell-code}\nplot(1:10)\npar(new = T) # デバイス上のグラフを消去しない\nplot(10:1, col = \"red\") # 赤のプロットを追加\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 複数のグラフを1つのデバイスに表示\n\n複数のグラフを1つのデバイス上に描画する場合には、グラフィックパラメータの`mfrow`引数又は`mfcol`引数を用います。いずれも引数に2つの数値からなるベクターを取ります。ベクターの1つ目の要素が行方向にデバイスを分割する数、2つ目の要素が列方向にデバイスを分割する数になります。このとき、`mfrow`と`mfcol`のいずれを用いても、結果は同じになります。\n\nグラフィックパラメータとして`par`関数内で引数`mfrow`又は`mfcol`を宣言した後、`plot`関数などの高レベルグラフィック関数を用いてグラフを描画します。`plot`関数では、引数`mfg`を用いて、グラフを表示する位置を指定します。位置は引数`mfrow`で指定した行、列の中で設定します。例えば、`mfg=c(2, 3)`と指定すると、そのグラフはグラフィックデバイスのうち、2行3列目に描画されます。\n\n\n::: {.cell filename='複数のプロットを表示1'}\n\n```{.r .cell-code}\n# mfcolでもmfrowでも同じ。3行2列にデバイスを分割\npar(mfrow = c(3, 2)) \nplot(1, mfg = c(1, 1)) # 1行1列目のグラフ\nplot(1:10, 1:10, type = \"l\", mfg = c(1, 2)) # 1行2列目のグラフ\nplot(iris$Sepal.Length, iris$Sepal.Width, mfg = c(2, 1)) # 2行1列目のグラフ\nplot(Nile, mfg = c(2, 2))\nhist(iris$Sepal.Length, mfg = c(3, 1))\nboxplot(iris$Petal.Width~iris$Species, mfg = c(3, 2))\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n同様のデバイスの分割には、`layout`関数を用いることもできます。`layout`関数は行列を引数に取ります。行列の要素は数値で、数値の順にグラフが埋められていきます。\n\n\n::: {.cell filename='複数のプロットを表示2'}\n\n```{.r .cell-code}\nlayout(matrix(c(2, 4, 1, 3), nrow=2)) # 2行2列に分割\nplot(1) # 行列の数値の順番にグラフが描画される\nplot(iris$Sepal.Length, iris$Sepal.Width)\nhist(iris$Sepal.Length)\nboxplot(iris$Sepal.Width~iris$Species)\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nグラフの分割には、`split.screen`関数を用いることもできます。`split.screen`関数は引数に数値2つのベクターを取ります。1要素目の数値が行数、2要素目の数値が列数を示します。`split.screen`関数では、`screen`関数によって描画するグラフの位置を指定します。例えば、`screen(n=2)`を指定すると、分割したデバイスの2番目の位置に次のグラフが描画されることになります。\n\n\n::: {.cell filename='split.screen関数でプロットエリアを分割'}\n\n```{.r .cell-code}\nsplit.screen(c(1, 3)) # 1行3列にデバイスを分割\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(1) # 1つ目（一番左）に描画\nscreen(n = 2) # 2つ目に描画することを指定\nplot(iris$Sepal.Length, iris$Sepal.Width)\nscreen(n = 3)\nhist(iris$Sepal.Length)\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## 複数のグラフの表示\n\nRのデフォルトの関数群を用いても、上記のように複数のグラフを1つのデバイスにまとめることはできます。ただし、上の図に見られるように、各グラフのラベルやサイズ、タイトルなどをうまく調節するためには、グラフィックパラメータを駆使する必要があります。複数のグラフを一度に表示したい場合には、[lattice](https://lattice.r-forge.r-project.org/)パッケージや[ggplot2](https://ggplot2.tidyverse.org/index.html)パッケージを用いることで、デフォルトの関数よりも簡単に複数のグラフをまとめて作成することができます。\n\n:::\n\n## マージンの設定\n\nマージン（余白）には、個々のグラフに対するマージンと、デバイスに対するマージンの2つがあります。デバイスにグラフを1つだけ表示する場合には、この2つのマージンは同じ意味を持ちます。\n\n一方で、上で説明した通り、Rではデバイスを分割して複数のグラフを表示することができます。デバイスを分割する場合には、デバイス全体のマージンとは別に、表示する個々のグラフに対するマージンを設定することができます。\n\n個々のグラフに対するマージンを設定するグラフィックパラメータは`mai`、`mar`です。`mar`と`mai`の違いは、`mai`がマージンをインチ単位で設定するのに対し、`mar`は文字の行で設定する点です。いずれも要素が4つの数値ベクターでマージンを設定します。数値ベクターの要素はそれぞれ下、左、上、右のマージンを表したものとなります。\n\n\n::: {.cell filename='デフォルトの余白'}\n\n```{.r .cell-code}\nplot(1)\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell filename='maiで余白の調整'}\n\n```{.r .cell-code}\npar(mai = c(2, 2, 2, 2))\nplot(1)\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nデバイス全体のマージンを設定するグラフィックパラメータが`omi`、`oma`です。`omi`と`oma`の違いは`mai`、`mar`と同じで、`omi`がインチ単位、`oma`が行単位でマージンを設定する引数です。要素が4つの数値ベクターで設定すること、要素がそれぞれ下、左、上、右のマージンを表すのも、`mai`、`mar`と同じです。\n\n\n::: {.cell filename='デフォルトの余白'}\n\n```{.r .cell-code}\n# デフォルトの余白\npar(mfcol = c(1, 2))\nplot(1)\nplot(1:10)\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell filename='omiで余白の調整'}\n\n```{.r .cell-code}\n# omiで余白を調整\npar(omi = c(1, 1, 1, 1), mfcol = c(1, 2))\nplot(1)\nplot(1:10)\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## グラフの色の調整\n\nグラフの色も、グラフィックパラメータを用いることで調整することができます。グラフの色に関わるグラフィックパラメータは、`bg`、`col`、`col.axis`、`col.lab`、`col.main`、`col.sub`、`fg`です。それぞれ、背景色、点の色、軸の色、軸ラベルの色、メインタイトルの色、サブタイトルの色、枠の色を示します。色の設定を用いると、下のようにグラフの要素の色を変えたグラフを作成することもできます。\n\n\n::: {.cell}\n\n:::\n\n::: {.cell filename='グラフの色の調整'}\n\n```{.r .cell-code}\npar(bg = \"lightgray\") # 背景色はpar関数で呼び出し\nplot(\n  1:10, \n  cex=3, \n  col = \"red\", # 点の色は赤\n  col.axis = \"blue\", # 軸の数値は青\n  col.lab = \"purple\", #  軸のラベルは紫\n  col.main = \"pink\", # メインタイトルはピンク\n  col.sub = \"orange\", # サブタイトルはオレンジ\n  fg = \"violet\", # 枠の色はバイオレット\n  main = \"メインタイトル\", \n  sub = \"サブタイトル\"\n  )\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nRで用いることのできる色については、[NCEAS (National Center for Ecological Analysis and Synthesis)が公開しているチートシート](https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf)に詳しくまとめられています。\n\n色はベクターで指定することもできます。\n\n\n::: {.cell filename='ベクターでグラフの色を指定'}\n\n```{.r .cell-code}\n# Speciesがsetosaなら赤、それ以外は青で表示\nplot(\n  x = iris$Sepal.Length,\n  y = iris$Sepal.Width,\n  col = ifelse(iris$Species == \"setosa\", \"red\", \"blue\")\n  )\n```\n\n::: {.cell-output-display}\n![](chapter21_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## インタラクティブグラフィック関数\n\nグラフを描画した後、グラフをクリックすることでその点の値を得る場合には、`locator`関数を用います。`locator`関数は引数に数値を取り、その数値の回数だけグラフをクリックし、クリックした位置の値を得ることができます。得た値はxとyのリストで返ってきます。\n\n\n::: {.cell filename='locator関数でクリックした位置の値を取得する'}\n\n```{.r .cell-code}\nplot(1:10)\nlocator(1) # 1つの点を選ぶ（xとyの値がリストで返ってくる）\n```\n:::\n\n\n同様に描画したグラフにテキストなどでラベルを表示するための関数が、`identify`関数です。`identify`関数は、`x`、`y`、`labels`の3つの引数を取ります。`x`、`y`にはラベルを表示したい位置、`labels`にはそれぞれの点に表示するラベルを文字列で記載します。`identify`関数はRStudioでは正常に機能せず、RGUIでのみ機能します。\n\n\n::: {.cell filename='identify関数で値を取得する'}\n\n```{.r .cell-code}\nx <- 1:7\ny <- 1:7\nplot(x, y)\n# 点をクリックすると1~7のラベルが付く（RGUI）\nidentify(x, y, labels = 1:7) \n```\n:::\n",
    "supporting": [
      "chapter21_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}