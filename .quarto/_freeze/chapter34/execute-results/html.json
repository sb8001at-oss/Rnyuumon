{
  "hash": "8bb244c457d49bb8672754126947fb51",
  "result": {
    "engine": "knitr",
    "markdown": "# R markdown・Quarto\n\n\n\n\n\nRでスクリプトを書いている時には、コードを書き、コードを説明するコメントを挿入し、コードを逐次実行するのが一般的です。小さな規模のスクリプトを書いている場合にはこのような方法でも大きな問題はありません。\n\nしかし、1つのRファイルにあれもこれも分析を加えていくと、どこで何を計算しているのか、把握することが難しくなっていきます。また、たくさんの分析を一度に行うと、少しスクリプトを修正しただけでプログラムが走らなくなる、結果が大きく変わってしまう、ということも珍しくありません。\n\nこのような、スクリプトを書いているときに発生する問題のことを、**再現性の問題**と呼ぶことがあります。Rでは主に統計の計算を行うため、誰が、いつ、どのような場所で計算を行っても、同じ結果が得られる、つまり再現性があることが重要となります。単にスクリプトを書いているだけでは、再現性を維持するのが難しい場合もあります。\n\nまた、Rでの計算結果を他の人に説明する場合には、グラフや表を別途保存し、PowerpointやWordなどに張り付ける必要があります。わざわざファイルを保存し、別のファイルに張り付ける作業は無意味ですし、時間を取ります。\n\nこのような再現性の確保、計算結果の共有のためのライブラリが[**R markdown**](https://rmarkdown.rstudio.com/)です。R markdownでは、マークアップ言語である**Markdown**を用いて、Rのコードとその説明文を同時に文書として作成することができます。\n\n## マークアップ言語とMarkdown\n\nマークアップ言語とは、主に[組版](https://ja.wikipedia.org/wiki/%E7%B5%84%E7%89%88)と呼ばれる、文書や画像を出版・印刷できる形式で出力するために用いられる言語です。組版自体はマークアップ言語が無くても行うことができます（代表的な組版ソフトウェアは[Adobe InDesign](https://ja.wikipedia.org/wiki/Adobe_InDesign)や[QuarkXPress](https://ja.wikipedia.org/wiki/QuarkXPress)）。これらの有料の組版ソフトはGUIを用いて組版を行うソフトウェアです。同様の機能をCUI、つまりテキストファイルで対応できるようにしたものがマークアップ言語です。マークアップ言語は通常無料で使用することができ、機能的には有料の組版ソフトと大きな差はありません。ただし、学習コストが比較的高めです。\n\n代表的なマークアップ言語には、[Tex](https://ja.wikipedia.org/wiki/TeX)や[Markdown](https://ja.wikipedia.org/wiki/Markdown)があります。Texは昔から論文を書く際に用いられてきた言語で、専用のソフトウェアを用いることでTexファイルをPDF等に変換することができます。\n\n一方でMarkdown は主にhtmlへの変換を目的として作られたマークアップ言語です。Markdownとhtmlの表記は対応しており、変換ツールを用いることでMarkdown のファイルからhtmlを簡単に作成することができます。Markdownの記法について以下の表1に示します。[Rmarkdownのcheatsheet](https://rstudio.github.io/cheatsheets/html/rmarkdown.html?_gl=1*yrxqrc*_ga*MzM5MDIyMTc2LjE3MjkzMjE1MTU.*_ga_2C0WZ1JHG0*MTcyOTMyMTUxNS4xLjAuMTcyOTMyMTUxNS4wLjAuMA..)や[Qiitaのチートシート](https://qiita.com/Qiita/items/c686397e4a0f4f11683d)も参考になります。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-c4082bc46681758a0375\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c4082bc46681758a0375\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>表1：Markdownの記法<\\/caption>\",\"data\":[[\"_text_\",\"*text*\",\"**text**\",\"~text~\",\"^text^\",\"`code`\",\"```code```\",\"`r code`\",\"```` ```code``` ````\",\"[text](address)\",\"![text](path_to_image)\",\"^[text]\",\"[@bibtex]\",\"#\",\"##\",\"###\",\"- item\",\"+ item\",\"* item\",\"1. item\",\"&gt; blockquotes\",\"$$ math $$\",\"$ math $\"],[\"イタリック\",\"イタリック\",\"太字\",\"下付き\",\"上付き\",\"スクリプト表記（インライン）\",\"スクリプト表記\",\"Rのスクリプトを実行（インライン）\",\"```を表示（```code```）\",\"リンク\",\"図の挿入\",\"脚注（foot note）\",\"文献の参照\",\"ヘッダー（h1）\",\"ヘッダー（h2）\",\"ヘッダー（h3）\",\"箇条書き\",\"箇条書き\",\"箇条書き\",\"箇条書き（数字）\",\"文の引用\",\"LaTeXの数式\",\"LaTeXの数式（インライン）\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Markdownの記法<\\/th>\\n      <th>意味<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"name\":\"Markdownの記法\",\"targets\":0},{\"name\":\"意味\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## R markdownの発展\n\nRは統計に用いる言語ですので、Texを用いた論文にRの統計結果を加えることは昔から重要とされていました。Rが用いられ始めてすぐに、RのスクリプトとTexを合わせることができるRの機能として、[Sweave](https://stat.ethz.ch/R-manual/R-devel/library/utils/doc/Sweave.pdf)がR Core Teamにより開発されました（[2002年頃](https://cran.r-project.org/doc/Rnews/Rnews_2002-3.pdf#page=28&zoom=100,73,74)のようです）。\n\nまた、このようなRでの流れとは独立に、HTMLを簡単な表記で作成するためのテキスト形式である[Markdown](https://daringfireball.net/projects/markdown/)（2004年）、MarkdownをHTMLやPDFに変換できるファイルコンバータとして[Pandoc](https://pandoc.org/)（2006年）が開発されました。\n\nRでの開発とは別に、PythonではRと同じような対話的実行システムである[IPython](https://ipython.readthedocs.io/en/stable/)（2001年）が開発され、更にPython、Rなどを対話的に実行・結果を表示しつつ、Markdownでの文書と同時に記載できるWebアプリケーションである[Jupyter notebook](https://jupyter.org/)（2014年頃）が開発されました。\n\n上記のような流れの中で、RでLaTex、HTML、Markdownなどの文書とコードを作成し、それをRコードを実行した形でLatexやHTMLとして出力するためのライブラリである[knitr](https://yihui.org/knitr/)が開発されました（2012年頃）。このknitrをさらにPandocと統合し、Rコードから直接PDFやHTML、Microsoft Wordなどのフォーマットの文書を作成できるようにしたものが[R markdown](https://rmarkdown.rstudio.com/)（2016年頃）です。R markdownはすぐにRstudio（[2011年頃](https://posit.co/blog/rstudio-new-open-source-ide-for-r/)に開発）と統合され、RstudioからR markdown方式の文書を作成し、それをPDFやHTMLに変換できるようになりました。R markdownのExtensionsも整備され、例えば[Bookdown](https://bookdown.org/)（R Markdownで本を書くためのツール）が開発されたことでRでHTML形式の本を比較的簡単に作成することができるようになりました。また、[Revealjs](https://revealjs.com/)を\n出力することでHTMLベースのプレゼンテーションを作成することもできるようになっています。R studioにはR markdownのVisual mode（Jupyter notebookと見た目が似た形式）も整備され、R markdownを利用することでJupyter notebook風にRを利用することもできます。\n\n上記のようにRstudioとR markdownは共に発展してきましたが、2010年代には機械学習のライブラリがほとんどPythonで開発されるようになり、RよりもPythonの方がはるかに流行の言語となりました。このPythonユーザーを取り込むためだと思いますが、Rstudio（今は[Posit.io](https://posit.co/)という企業）はR markdownをPythonやJuliaなどの統計学・機械学習で用いられる言語でも使える形とし、Rstudioだけでなく、JupyterやテキストエディタであるVisual Studio Codeでも使えるものとした、[Quarto](https://quarto.org/)を開発し始めました（おそらく2022年頃）。QuartoがRユーザー以外に注目されているかはかなり疑問ですが、RユーザーとしてはR markdownの機能が単にアップグレードされただけですので、用いない理由はほとんどありません。\n\nこのテキストもR markdown、BookdownおよびQuartoを利用して作成しています。\n\n以下ではR markdownについて説明していきますが、RstudioではQuartoもR markdownとほぼ同様に用いることができます。\n\n## ファイルの作成\n\nR markdownで作成するファイルの拡張子は`.rmd`、Quartoで作成するファイルの拡張子は`.qmd`です。Rstudioで.rmd、.qmdファイルを作成する場合、Rstudioの左上のアイコンから、「R markdown...」や「Quarto Document...」を選択します。\n\n![R markdownのファイルを作成する](./image/Rmarkdown_newfile.png)\n\nR markdownを選択すると、まず「New R Markdown」というウインドウが表示されます。ここでタイトル、著者、作成日、出力する形式（HTML、PDF、Word）を選択できます。このウインドウで設定していなくても後ほど設定することもできるため、すべてを入力しないといけない、ということはありません。\n\n![R markdownの初期設定](./image/new_Rmarkdown.png)\n\nR markdownファイルを作成すると、以下のようなR markdownの例が表示されます。この表記法はSourceと呼ばれる、すべてテキストで記載された形です。\n\n![R markdownファイル：Sourceモード](./image/initial_Rmarkdown_source.png)\n\nまた、上の「Visual」を選択すると、Jupyter notebook風のVisualモードを利用することもできます。やや表示に時間がかかり、レスポンスが悪いため、通常はSourceモードを用いる方が使いやすいでしょう。\n\n![R Markdownファイル：Visualモード](./image/initial_Rmarkdown_visual.png)\n\n最終的には上のアイコンに含まれている「Knit」（毛糸を編む、ニット）の下矢印をクリックし、選択肢から出力したいファイル形式（HTML、PDF、Word）を選ぶことでRを実行した結果を表示した出力ファイルを得ることができます。\n\n![R markdownをknitする](./image/knit_Rmarkdown.png)\n\n## yamlとchunk\n\n### yaml\n\n上記の「New R Markdown」ウインドウで設定した内容は、文書の一番始め、`---`に挟まれた領域に記載されています。\n\n```yaml\n---\ntitle: \"Untitled\"\nauthor: \"xjorv\"\ndate: \"2024-06-29\"\noutput: html_document\n---\n```\n\nこの`---`に挟まれた領域には、[YAML](https://ja.wikipedia.org/wiki/YAML)と呼ばれるものが記載されています。YAML自体は名前とデータをコロン（`:`）でつないだだけのデータ形式です。R markdownではこのYAMLを読み込むことで、最終的な出力データに表記する情報・データの出力形式などを設定します。YAMLで設定できる主な要素は以下の表2の通りです。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表2：YAMLの指定\n\n|オプション名   |取りうる値              |意味                         |\n|:--------------|:-----------------------|:----------------------------|\n|title          |文字列                  |文書のタイトル               |\n|author         |文字列                  |著者                         |\n|date           |日付                    |作成日                       |\n|output         |html_documentなど       |出力の形式                   |\n|code_folding   |論理型                  |スクリプトを折りたたむ       |\n|css            |\"style.css\"             |CSSの指定                    |\n|dev            |\"png\"、\"pdf\"            |グラフィックデバイスの指定   |\n|df_print       |\"kable\"、\"tibble\"など   |データフレームの表示方法     |\n|fig_caption    |論理型                  |図のキャプションの有無       |\n|highlight      |\"tango\"、\"pygments\"など |コードハイライトの方法       |\n|latex_engine   |\"lualatex\"など          |PDF作成時のLaTeXエンジン     |\n|reference_docx |\"file.docx\"など         |Wordのテンプレート指定       |\n|theme          |Bootswatchのテーマ名    |Bootswatchのテーマ選択       |\n|toc            |論理型                  |目次の表示                   |\n|toc_depth      |数値                    |目次表示するレベルの指定     |\n|toc_float      |論理型                  |目次をスクロールで移動するか |\n\n\n:::\n:::\n\n\nYAMLの指定では、論理型として`true`/`false`という形で、小文字を用います。\n\n### chunk\n\nR markdown中では、Rのスクリプトは以下のように\\`3つで囲まれた領域に書くことになります。このコードのかたまりのことを**chunk**と呼びます。\n\n````markdown\n```{r}\nplot(cars)\n```\n````\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter34_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n.rmd（.qmd）ファイル中にchunkを書くと、knitするときにchunk内のスクリプトは実行され、上のように評価結果が出力ファイル上に表示されます。chunkに書かれている`{r}`はRのコードであるということを示しています。この`{r}`の部分には、chunkオプションというものを追加し、評価や表示の方法を指定することができます。chunkオプションのリストを以下の表に示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表3：chunk optionの一覧\n\n|オプション名 |意味                     |\n|:------------|:------------------------|\n|echo         |コードを表示するかどうか |\n|error        |エラーで停止するかどうか |\n|eval         |コードを評価するか       |\n|messagee     |メッセージを表示するか   |\n|warning      |warningを表示するか      |\n|results      |結果の表示方法の指定     |\n|fig.align    |図の位置（\"center\"など） |\n|fig.width    |図の幅                   |\n|fig.height   |図の高さ                 |\n|out.width    |図の出力時の幅調整       |\n|collapse     |コードと結果の折り畳み   |\n|filename     |チャンク名の設定         |\n\n\n:::\n:::\n\n\nチャンクオプションは以下のように記載して用います。\n\n````markdown\n```{r, echo = FALSE, eval = FALSE}\nplot(cars) # チャンクオプションはコンマで区切って記述する\n```\n````\n\n## Quarto\n\nQuartoは上記の通り、Rを使う上ではR markdownと大差ないものですが、ファイル名や使い方などが少しずつ異なります。Quartoを使用する場合、まずは[CLIをインストール](https://quarto.org/docs/get-started/)するとよいでしょう。\n\n![Quarto CLIのインストール](./image/quarto_CLI_install.png)\n\nQuartoの使い方はほぼR markdownと同じですが、CLIをインストールしているとTerminalからQmdファイルをknitできるようになります。また、chunk optionの表記法、YAMLの要素などが少しずつ異なります。詳しくは[公式のガイド](https://quarto.org/docs/guide/)や[日本語の教科書](https://www.jaysong.net/RBook/)[@宋財泫20200622]をご参照下さい。\n",
    "supporting": [
      "chapter34_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}