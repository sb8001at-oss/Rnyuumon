{
  "hash": "0cabb3282f140451db414e2902b8a266",
  "result": {
    "engine": "knitr",
    "markdown": "# エラー処理（error handler）\n\n\n\n\n\nRでプログラミングを行うと、大抵の場合**エラー**が発生します。プログラミングにエラーはつきものです。プログラミングの途中でエラーが起こっても、それが本当に重大な影響を及ぼすことはほとんどありません。\n\nRは基本的にad hocな（その場一度限りの）統計処理に用いることを前提としているようなところがあるため、エラーが出たらスクリプトを書き換えて、もう一回実行すればよい、という場合がほとんどです。\n\nしかし、通常のプログラミング言語と同様に、エラーが出たら困る、エラーが出た場合は特殊な処理をしたい、という場合もあります。このような場合に用いられるものが、**エラー処理（error handler）**です。\n\n:::{.callout-tip collapse=\"true\"}\n\n## Rとエラー処理\n\nPythonやRubyなどの汎用プログラミング言語ではエラー処理は非常に重要ですが、Rではそれほど使用頻度は高くありません。エラー処理を今すぐ使いたいという方以外は、この章を飛ばしても問題ありません。\n\n:::\n\n## エラーメッセージの分類\n\nRではエラーメッセージとして3種類の警告が出る仕組みを持っています。3種類とは、**message、warning、error**の3つです。**message**はプログラムを実行しても特に問題はないが、特別に伝えたいことがある場合に、**warning**はプログラムを実行したときに、問題が起こっている可能性が高い場合に、**error**は実行できない場合にそれぞれ表示されます。\n\nこれらのうち、messageはプログラムの実行に影響を与えません。warningはプログラムを実行したときに問題が起こることがあります。errorが起こるとプログラムの実行が止まります。ですので、エラーとして処理が必要となるのは、主にwarningとerrorです。\n\n\n::: {.cell}\n\n:::\n\n::: {.cell filename='message, warning, errorの表示'}\n\n```{.r .cell-code}\n# messageが出る場合\nreadr::read_tsv(\"iris.txt\")\n## Rows: 150 Columns: 5\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \"\\t\"\n## chr (1): Species\n## dbl (4): Sepal.Length, Sepal.Width, Petal.Length, Petal.Width\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n## # A tibble: 150 × 5\n##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##           <dbl>       <dbl>        <dbl>       <dbl> <chr>  \n##  1          5.1         3.5          1.4         0.2 setosa \n##  2          4.9         3            1.4         0.2 setosa \n##  3          4.7         3.2          1.3         0.2 setosa \n##  4          4.6         3.1          1.5         0.2 setosa \n##  5          5           3.6          1.4         0.2 setosa \n##  6          5.4         3.9          1.7         0.4 setosa \n##  7          4.6         3.4          1.4         0.3 setosa \n##  8          5           3.4          1.5         0.2 setosa \n##  9          4.4         2.9          1.4         0.2 setosa \n## 10          4.9         3.1          1.5         0.1 setosa \n## # ℹ 140 more rows\n\n# warning（警告）が出る場合\ntibble::as.tibble(iris[1,])\n## Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n## ℹ Please use `as_tibble()` instead.\n## ℹ The signature and semantics have changed, see `?as_tibble`.\n## # A tibble: 1 × 5\n##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n##          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n## 1          5.1         3.5          1.4         0.2 setosa\n\n# error（エラー）が出る場合\n100 + dog\n## Error in eval(expr, envir, enclos): object 'dog' not found\n```\n:::\n\n\n## エラーメッセージ・エラーを表示させる\n\n自分が作ったプログラムや関数を他人が使う場合には、計算に問題があるときにはエラーメッセージを出す処理を加える時があります。また、errorやwarningが起きたときには特別な処理を行いたいこともあります。このような場合のために、Rにはエラーを表示させるための関数があります。message、warning、errorを表示させるための関数は、それぞれ`message`関数、`warning`関数、`stop`関数です。`stop`関数ではその名の通り、エラーが表示され、プログラムの実行が止まります。エラーは`stopifnot`関数でも表示させることができます。`stopifnot`関数は引数に条件式を取り、**条件式が`FALSE`のとき**にエラーを表示します。\n\n\n::: {.cell filename='エラーを表示させる関数'}\n\n```{.r .cell-code}\nmessage(\"これはメッセージです。実行に問題はありません\")\n## これはメッセージです。実行に問題はありません\n\nwarning(\"これはwarning（警告）です。実行に問題があるかもしれません\")\n## Warning: これはwarning（警告）です。実行に問題があるかもしれません\n\nstop(\"これはerrorです。実行を止めます。\")\n## Error in eval(expr, envir, enclos): これはerrorです。実行を止めます。\n\nstopifnot(FALSE) # 条件がFALSEだとエラーが出る\n## Error: FALSE is not TRUE\n\nstopifnot(\"エラーメッセージはこのように設定する\" = FALSE) # =の後に条件式を書く\n## Error: エラーメッセージはこのように設定する\n```\n:::\n\n\n## tryとtryCatch\n\nRでのエラー処理には、`try`関数と`tryCatch`関数の2つが用いられます。`try`関数はエラーが出る処理を行った場合に、プログラムを止めずにエラーを返す機能を持ちます。`tryCatch`関数はエラーが出る処理に対応して別の処理を行う際に用います。\n\n`try`関数は第一引数を評価し、エラーならエラーを表示し、続けてプログラムを実行します。下の`for`文では、どちらも`\"dog\"`に数値を足す計算でエラーが出ます。`try`がない場合にはエラーが出た時点でプログラムが停止しますが、`try`関数の引数にエラーが出る処理がある場合にはエラーが出た後にも計算が継続します。`try`は返り値として第一引数の演算結果を返しますが、エラーが出た場合にはtry-errorクラスのオブジェクトを返します。\n\n\n::: {.cell filename='try関数とエラー'}\n\n```{.r .cell-code}\nd <- data.frame(a=1, b=2, c=\"dog\", d=4, e=5)\nd # 1行5列のデータフレーム\n##   a b   c d e\n## 1 1 2 dog 4 5\n\nfor(i in 1:5){ # エラーが出るので、評価が中断する\n  print(d[1,i] + 1)\n}\n## [1] 2\n## [1] 3\n## Error in d[1, i] + 1: non-numeric argument to binary operator\n\nfor(i in 1:5){ # エラーが出ても、評価は継続する\n  try(print(d[1,i] + 1))\n}\n## [1] 2\n## [1] 3\n## Error in d[1, i] + 1 : non-numeric argument to binary operator\n## [1] 5\n## [1] 6\n\nerr_ <- try(1+\"dog\") # エラーが出たとき\n## Error in 1 + \"dog\" : non-numeric argument to binary operator\n\nclass(err_) # エラーのクラス（try-error）を返す\n## [1] \"try-error\"\n\nwarning_ <- try(as.numeric(\"dog\")) # warningが出たとき\n## Warning in doTryCatch(return(expr), name, parentenv, handler): NAs introduced\n## by coercion\n\nwarning_ # 演算はできるので、演算結果（NA）が返ってくる\n## [1] NA\n\nclass(warning_) # クラスはnumeric\n## [1] \"numeric\"\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## 返り値のNA\n\n（`try(as.numeric(\"dog\")`) の結果）のクラスがnumericになっています。NAは内部的にはNA_integer\\_（整数のNA）、NA_real\\_（実数のNA）、NA_complex\\_（複素数のNA）、NA_character\\_（文字列のNA）の4種類として扱われており、上記の場合ではNA_real\\_、つまり実数タイプのNAが返ってきています。このようにNAには型が複数あるため、ベクター中にNAが埋め込まれていても、ベクター全体の型が変化することはありません。\n\n:::\n\n`try`関数では、エラーが出たときにはtry-errorクラスが返ってくるので、try-errorクラスであることを利用してエラー時に行う処理を設定することができます。また、引数に「`silent = TRUE`」を取ると、エラーメッセージが表示されなくなります。\n\n\n::: {.cell filename='try-errorクラスを用いたエラー処理'}\n\n```{.r .cell-code}\n# tryの結果のクラスがtry-errorなら、文字列を返すif文\nif(class(try(1+\"dog\"))==\"try-error\"){\"エラーが起きています。\"}\n## Error in 1 + \"dog\" : non-numeric argument to binary operator\n## [1] \"エラーが起きています。\"\n\ntry(1+\"dog\", silent=T) # 何も表示されない\n```\n:::\n\n\n`try`関数でもエラー処理はできますが、通常エラー処理で用いられるのは**`tryCatch`**関数です。`tryCatch`関数では、`error`が起きたときの処理、`warning`が起きたときの処理、最終的に行う処理（`finally`）をそれぞれ設定できます。この時、`error`、`warning`の処理は**関数**で、`finally`は**そのまま**書きます。`warning`や`error`に用いる関数は別途作成しておくこともできますが、下のように`tryCatch`関数内で関数として定義する形でも書くこともできます。\n\n\n::: {.cell filename=''}\n\n```{.r .cell-code}\nerrorCatcher <- function(x){ # 対数計算のエラーを捉える関数\n  tryCatch(\n    log(x), # 対数計算を評価する\n    warning = \\(w){\"警告あり\"}, # warningが出たときの処理\n    error = \\(e){\"エラーあり\"}, # errorが出たときの処理\n    finally = print(\"エラーがあってもなくても表示される\") # エラーの有無に関わらず行う処理\n  )\n}\n\nerrorCatcher(0) # エラーなし\n## [1] \"エラーがあってもなくても表示される\"\n## [1] -Inf\nerrorCatcher(-1) # warning\n## [1] \"エラーがあってもなくても表示される\"\n## [1] \"警告あり\"\nerrorCatcher(\"dog\") # error\n## [1] \"エラーがあってもなくても表示される\"\n## [1] \"エラーあり\"\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## 無名関数\n\n warningやerrorで記載している関数（`\\(e)`や`\\(w)`）は名前を決めずに用いる関数で、無名関数と呼ばれるものです。用途によってはこのような無名関数を用いて処理を書くことがあります。\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}