{
  "hash": "09c3465d4951b59754025b7f74298967",
  "result": {
    "engine": "knitr",
    "markdown": "# 生存時間解析\n\n\n\n\n\n**生存時間解析**とは、ある集団について、**イベントが起きた回数とイベントが起きた時間**について解析する手法のことです。生存時間解析は、部品の故障や、医薬品の効果などの分析に用いられています。\n\n生存時間解析におけるイベントとは、部品における故障や、医薬品における治療の成功・失敗（特に失敗）を指します。\n\n例えば、同じ大きな力をかけた100個のボルトがあった時に、時間とともにボルトが破断していく様子を測定すると、ある経過時間では5個、さらに時間が経つと合計10個という風に、破断していく数（イベント）が時間と共に増えていきます。\n\n医薬品の例では、がん患者100名に抗がん剤を処方した時に、投与後1ヶ月では5名が亡くなり、更に1ヶ月経つと合計10名が亡くなるというふうに、死亡していく数（イベント）が時間と共に増えていきます。このような、イベントと時間の関係を取り扱うのが生存時間解析です。\n\n生存時間解析では、ある瞬間にイベントが起こる確率である**ハザード（hazard）**、その時間までにイベントが起こる確率である**累積ハザード（cumulative hazard）**、その集団でイベントが起こらなかったものの割合である**生存時間（survival time）**の3つを主に取り扱います。\n\n## ハザードと累積ハザード\n\n**ハザード**とは、ある時間にイベントが起きる確率を指します。ある時間tにおけるハザードは以下の式で表されるものです。\n\n$$h(t)=\\lim_{\\delta \\to 0} \\frac{P(t < T < t + \\delta | T > t)}{\\delta}$$\n\nこの式で、h(t)はある時間tにおけるハザード、δは微小な時間、P(t<T<t+δ|T>t)はある微小時間t～t+δにイベントが起きる確率です。このハザードを積分したものが**累積ハザード**と呼ばれます。\n\n$$H(t)=\\int^{t}_{0} h(t)dt$$\n\nH(t)は累積ハザードで、累積ハザードはハザードh(t)を時間0からtまで積分したものとなります。H(t)はその時間までにイベントが起きる確率を示すものとなります。\n\n## 生存時間\n\n**生存時間**とは、ある集団のうち、イベントが起きなかった集団の割合のことです。生存時間は累積ハザードを用いて、以下の式で表されます。\n\n$$S(t)=\\exp(-H(t))$$\n\nですので、ハザードを積分し、マイナスの符号を付けて指数変換したものが生存時間です。生存時間解析で取り扱うものは、ほぼすべてこのハザード、累積ハザード、生存時間の3つに関わっています。\n\n## 確率分布と生存時間\n\n生存時間を取り扱うときに、生存時間をうまく表現できる分布がある方が便利です。生存時間は**指数分布**で取り扱うことができるとされています。\n\n指数分布は以下の式で表される分布です。\n\n$$Exp(x, \\lambda)=\\lambda \\cdot \\exp(-\\lambda x)$$\n\n指数分布に関しては[24章](./chapter24.html)でごく簡単に取り扱っています。指数分布は平均値1/λ、標準偏差も1/λとなる分布です。ただし、この指数分布では、**ハザードが時間に対して一定**である場合のみ生存時間をうまく表現することができます。\n\nハザードが一定とならない場合には、生存時間は**ワイブル分布**や**ガンマ分布**で表現されます。ワイブル分布やガンマ分布を用いると、ハザードが単調増加したり、単調減少したりするような現象を表現することができます。\n\n:::{.callout-tip collapse=\"true\"}\n\n## 実際のハザードについて\n\n分布を用いたハザードの表現では、ハザード一定か、単調増加・単調減少する現象を説明することができます。一方で、実際のハザードは必ずしも一定や単調増加になるわけではありません。例えば、日本人の寿命と死亡率からハザードを求めたものが[e-stat](https://www.e-stat.go.jp/stat-search/files?page=1&layout=datalist&toukei=00450012&bunya_l=02&tstat=000001031336&cycle=7&tclass1=000001060864&tclass2=000001163166&tclass3val=0)で公開されています（出典：「政府統計の総合窓口(e-Stat)」、調査項目を調べる－厚生労働省 人口動態・保健社会統計室 基幹統計「生命表」）。ハザードを図示すると、0歳児のハザードが80歳半ばの人と同じぐらいの値となっており、全体としては両側が高く、真ん中が極端に低いような推移を示し、一定でも単調変化でもない変化を取ります。\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n:::\n\nここで、f(t)を分布関数、F(t)を累積分布関数とすると、F(t)はf(t)の積分ですので、f(t)とF(t)の関係は以下の式で表されます。\n\n$$F(t)=\\int_{0}^{t}f(t)dt$$\n\n要は、F(t)を微分するとf(t)に、f(t)を積分するとF(t)となるわけです。時間tはマイナスの値を取らないため、積分の下限は0です。F(t)は時間tまでにイベントが起きる割合として、以下の式で表されます。\n\n$$F(t)=P(T < t)$$\n\n生存時間S(t)は時間tまでにイベントが起こらない割合となりますので、全体の割合1からイベントが起きる割合F(t)を引いた値となります。\n\n$$S(t)=1-F(t)$$\n\nですので、f(t)は生存時間S(t)を微分した値にマイナスを付けたものとなります。\n\n$$f(t)=\\frac{d}{dt}F(t)dt=\\frac{d}{dt}(1-S(t))dt=-\\frac{d}{dt}S(t)dt$$\n\nまた、ハザードh(t)と分布f(t)、生存時間S(t)の関係は以下の式で表されます。\n\n$$h(t)= \\frac{f(t)}{S(t)}$$\n\n以上のように、確率分布f(t)、累積確率分布F(t)、生存時間S(t)、ハザードh(t)は互いに関連しており、生存時間S(t)が分かればハザードや確率分布が分かりますし、確率分布から生存時間やハザードを決めることもできます。\n\n## 確率分布と生存時間のシミュレーション\n\nRでは、乱数を用いることで比較的簡単に生存時間をシミュレートすることができます。\n\n\n::: {.cell filename='指数分布を仮定した場合の生存時間のシミュレーション'}\n\n```{.r .cell-code}\nrexp(10, rate=0.01) |> round()\n##  [1]  18  15  14  44 289 123  54  96  15 139\n```\n:::\n\n\n以下に、指数分布、ワイブル分布、ガンマ分布を仮定した場合の生存時間、ハザードの形状を示します。f(t)には、この他に対数正規分布や対数ロジスティック分布などを仮定する場合もあるようです[@武冨奈菜美2023]。\n\n:::{.callout-tip collapse=\"true\"}\n\n## 生存時間と分布のシミュレーション\n\n以下のコードを実行することで生存時間と分布のシミュレーションを実行することができます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(shiny)){install.packages(\"shiny\")};runGitHub(\"surv_sim\", \"sb8001at\")\n```\n:::\n\n\n:::\n\n:::{.panel-tabset}\n\n## 指数分布\n\n確率分布の式\n\n$$Exp(x, \\lambda)=\\lambda \\cdot \\exp(-\\lambda x)$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrexp(10, rate = 0.01) |> round() \n##  [1]  76 124 442 105 104 188  65  34  59 236\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## ワイブル分布\n\n確率分布の式\n\n$$Weibull(x, \\lambda, k)=\\frac{k}{\\lambda}(\\frac{x}{\\lambda})^{k-1} \\cdot \\exp(-\\frac{x}{\\lambda})^k$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrweibull(10, shape = 0.8, scale = 100) |> round()\n##  [1]   8  94  32   8  17  27 434  74 169  17\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n## ガンマ分布\n\n確率分布の式\n\n$$Gamma(x, \\gamma, \\beta)=\\frac{(\\frac{x}{\\beta})^{\\gamma-1} \\cdot \\exp(-\\frac{x}{\\beta})}{\\beta \\cdot \\Gamma(\\gamma)}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrgamma(10, shape = 0.8, scale = 100) |> round()\n##  [1]  11 157 104  68  10  27 234 121  20  65\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## survivalパッケージ\n\nRでの生存時間解析は、主に[`survival`](https://cran.r-project.org/web/packages/survival/index.html)パッケージ [@survival-package; @survival-book]を用いて行います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(survival)\n```\n:::\n\n\n### 生存時間解析のデータ\n\n`survival`パッケージには、生存時間解析に用いることができる数多くのデータセットが登録されています。`survival`に含まれているデータセットは生物的（あるいは医学的）なものと工学的な故障に関するもので、以降に紹介する概念や手法を理解するのに便利なものがそろっています。以下にデータセットの一覧を示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|データセット |データの内容                                                       |\n|:------------|:------------------------------------------------------------------|\n|aml          |急性骨髄性白血病患者のデータ                                       |\n|bladder      |膀胱がんの再発に関するデータ（85名分）                             |\n|bladder1     |膀胱がんの再発に関するデータ（118名分）                            |\n|bladder2     |膀胱がんの再発に関するデータ（左側打ち切りあり）                   |\n|cancer       |NCCTG（臨床研究グループ）の肺がん患者のデータ                      |\n|capacitor    |ガラスのコンデンサの寿命に関するデータ                             |\n|cgd          |慢性肉芽腫に対するγインターフェロンの効果に関するプラセボ対照研究 |\n|colon        |結腸がんに対する化学療法に関するデータ                             |\n|cracks       |タービンに生じたクラックに関するデータ                             |\n|diabetic     |糖尿病網膜症のレーザー治療に関するデータ                           |\n|flchain      |血清免疫グロブリン遊離軽鎖と死亡率に関するデータ                   |\n|gbsg         |ドイツで実施された乳がん患者に関する調査のデータ                   |\n|genfan       |ディーゼルエンジンのファンに生じた故障のデータ                     |\n|heart        |スタンフォードで実施された心臓移植のデータ                         |\n|hoel         |オスマウスにガンが生じるまでの日数のデータ                         |\n|ifluid       |絶縁流体の電気的な破損に関するデータ                               |\n|imotor       |モーターの絶縁破壊と温度の関係に関するデータ                       |\n|kidney       |透析患者にカテーテルを挿入し、感染が起こるまでの時間               |\n|logan        |職業カテゴリの移動に関するデータ                                   |\n|mgus         |免疫グロブリン異常症患者のデータ                                   |\n|myeloid      |急性骨髄性白血病のシミュレーションデータ                           |\n|myeloma      |多発性骨髄腫患者のデータ                                           |\n|nafld1       |非アルコール性脂肪肝疾患（NAFLD）のデータ                          |\n|nwtco        |腫瘍の組織学的判定と生存率の関係のデータ                           |\n|ovarian      |卵巣ガンに対し2治療を行ったランダム化比較試験のデータ              |\n|pbc          |原発性硬化性胆管炎に関するランダム化比較試験の結果                 |\n|rats         |ラットでの発がんを評価したデータ                                   |\n|rats2        |ラットに発がん性物質を注射し、治療処理したデータ                   |\n|rhDNase      |嚢胞性線維症へのrhDNaseの効果を評価したデータ                      |\n|rotterdam    |ロッテルダム腫瘍バンクに登録されている原発性乳がん患者のデータ     |\n|solder       |電子部品を基板につける際のはんだ付けの不良のデータ                 |\n|survexp.us   |1940～2012年のアメリカの年齢と性別のデータ                         |\n|tobin        |トービット・モデルの論文で用いられたデータ                         |\n|transplant   |肝移植を待つ患者のデータ                                           |\n|turbine      |タービンのホイールに生じたクラックに関するデータ                   |\n|udca         |原発性胆汁性肝硬変に対するウルソデオキシコール酸投与試験のデータ   |\n|valveSeat    |ディーゼルエンジンのバルブシートの交換時期に関するデータ           |\n|veteran      |退官軍人の肺がんのデータ                                           |\n\n\n:::\n:::\n\n\n## 打ち切り\n\n**打ち切り（censoring）**とは、イベントとは別の理由で治験に参加している患者や耐久性を検査しているボルトの試験が中止してしまうような場合を指します。\n\n治験であれば、副作用によって治験に参加し続けるのをあきらめる場合や、対象となるイベント（ガンの治験であれば死亡など）以外の理由（例えば交通事故など）で患者が亡くなるのが典型的な打ち切りです。ボルトの耐久性試験でも、破断の前にボルトが緩んで抜けてしまったり、繋ぎとめている部材が先に破断してしまうような場合には、打ち切りとして取り扱うことになります。特に治験では打ち切りはほぼ必ず起こります。\n\n![図1：打ち切り（censoring）](./image/censored.png)\n\n### Surv関数\n\nRでのデータセットを見ると、特にガン関連のデータセットではほぼ必ず打ち切りに関する列が登録されています。以下は`cancer`データセットの始めの6行です。各行はそれぞれ一人の患者のデータであり、`time`が観察期間、`status`が打ち切り（`status=1`）または死亡（`status=2`）です。この`status`が打ち切りを表すラベルとなります。\n\n\n::: {.cell filename='ガンのデータセットでの打ち切り'}\n\n```{.r .cell-code}\ncancer |> head()\n##   inst time status age sex ph.ecog ph.karno pat.karno meal.cal wt.loss\n## 1    3  306      2  74   1       1       90       100     1175      NA\n## 2    3  455      2  68   1       0       90        90     1225      15\n## 3    3 1010      1  56   1       0       90        90       NA      15\n## 4    5  210      2  57   1       1       90        60     1150      11\n## 5    1  883      2  60   1       0      100        90       NA       0\n## 6   12 1022      1  74   1       1       50        80      513       0\n```\n:::\n\n\nRで打ち切りを取り扱う場合には、まず`Surv`関数を用いて時間と打ち切りデータを`Surv`クラスのオブジェクトに変換する必要があります。`Surv`関数は時間（上の例の`time`）と打ち切りのデータ（上の例の`status`）を引数にする関数で、返り値では打ち切りのデータに`+`が付くことになります。`survival`パッケージでは、この`+`が付いたデータを打ち切りとして、解析で取り扱います。打ち切りデータは、打ち切り/死亡をそれぞれ`0`/`1`、`FALSE`/`TRUE`、`1`/`2`のいずれかで取り扱うことになります。\n\n\n::: {.cell filename='Surv関数と打ち切り'}\n\n```{.r .cell-code}\n# 生存時間と打ち切りデータを引数にする\nSurv(cancer$time, cancer$status) |> \n  head(20)\n##  [1]  306   455  1010+  210   883  1022+  310   361   218   166   170   654 \n## [13]  728    71   567   144   613   707    61    88\n```\n:::\n\n\n### 左側打ち切りのデータ\n\n打ち切りは通常開始後に起こるのですが、開始時に打ち切りが起こることもあります。時間の軸が左から右に進むと考えて、通常の打ち切りのことを**右側打ち切り（right-censoring）**、開始時の打ち切りを**左側打ち切り（left-censoring）**と呼びます。\n\n左側打ち切りは、例えば病気の進行を調べる際に、診断から時間が空いてから投薬や観察を始める場合などがあります。この場合、診断から観察開始までに亡くなる方は観察できないため、左側打ち切りとして取り扱う必要が生じます。\n\n`Surv`関数で左側打ち切りを取り扱う場合には、`Surv`関数は3つ引数を取ることになります。第一引数に観察開始時間、第二引数に観察終了時間、第三引数は打ち切りデータとなります。左側打ち切りのあるデータの場合、`Surv`関数の返り値は開始時間、終了時間と打ち切りを示す`+`の3つで示される形となります。\n\n\n::: {.cell filename='左側打ち切りありのデータ'}\n\n```{.r .cell-code}\n# startが組み入れ時間、stopが死亡または打ち切り時間、\n# eventが打ち切り（0が打ち切り例）\nhead(survival::heart)\n##   start stop event        age      year surgery transplant id\n## 1     0   50     1 -17.155373 0.1232033       0          0  1\n## 2     0    6     1   3.835729 0.2546201       0          0  2\n## 3     0    1     0   6.297057 0.2655715       0          0  3\n## 4     1   16     1   6.297057 0.2655715       0          1  3\n## 5     0   36     0  -7.737166 0.4900753       0          0  4\n## 6    36   39     1  -7.737166 0.4900753       0          1  4\n\nSurv(heart$start, heart$stop, heart$event) |> head(10)\n##  [1] ( 0, 50]  ( 0,  6]  ( 0,  1+] ( 1, 16]  ( 0, 36+] (36, 39]  ( 0, 18] \n##  [8] ( 0,  3]  ( 0, 51+] (51,675]\n```\n:::\n\n\n## カプランマイヤー曲線\n\n生存時間分析で用いられる統計手法のうち、最もよく用いられているものは、**カプランマイヤー曲線（Kaplan-Meier）**、**ログランク検定（log-rank test）**、**Cox回帰**の3つです。このうち、**カプランマイヤー曲線**は一般的に生存時間曲線として、治験や耐久性試験の結果で示されています。\n\nカプランマイヤー曲線は上記の生存時間S(t)をデータから計算する方法です。q~t~をその時間tにイベントが起きた割合としたとき、カプランマイヤー曲線は以下の式で表されます。要は、イベントが起きる度に、その時間における生存者の割合を計算し、その時点までの生存者の割合をすべて掛け算することで、生存時間を計算します。\n\n$$S(t)=\\prod_{i=1}^{t}1-q_{t}$$\n\nこの表現では分かりにくいため、例を挙げて説明します。以下のようなデータがあり、イベントは`day`に起こり、打ち切りが起こった場合には`censored=0`であるとします。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| subject| day| censored|\n|-------:|---:|--------:|\n|       1|   1|        1|\n|       2|   1|        1|\n|       3|   2|        1|\n|       4|   2|        0|\n|       5|   3|        1|\n|       6|   3|        1|\n|       7|   4|        1|\n|       8|   4|        1|\n\n\n:::\n:::\n\n\n打ち切りを考慮した場合・しない場合のそれぞれについて、以下の表のようにカプランマイヤーの計算を行います。最も右の列である生存時間は、その時間までの生存割合の積となっています。\n\n打ち切りありとなしで異なるのは、day2、つまり打ち切りがある場合には、打ち切りされた例は生存していると換算して計算し、day3ではリスク集団（その時点の事前まで生存しており、イベントが起きる可能性がある集団）が打ち切り+死亡により2人減って4名になる、という変化を取ることです。下に示した通り、表の計算式で計算した左のカプランマイヤー曲線は、右の`survival`パッケージで計算した結果と一致します。\n\n:::{.panel-tabset}\n\n## 打ち切りを考慮しない場合\n\n\n::: {.cell filename='打ち切りを考慮しない場合の生存曲線'}\n::: {.cell-output-display}\n\n\n| day| リスク集団| 生存者数| 時点の生存割合| カプランマイヤーの計算式| 生存割合|\n|---:|----------:|--------:|--------------:|------------------------:|--------:|\n|   0|          8|        8|            8/8|                      8/8|     1.00|\n|   1|          8|        6|            6/8|                 8/8×6/8|     0.75|\n|   2|          6|        4|            4/6|            8/8×6/8×4/6|     0.50|\n|   3|          4|        2|            2/4|       8/8×6/8×4/6×2/4|     0.25|\n|   4|          2|        0|            0/2|  8/8×6/8×4/6×2/4×0/2|     0.00|\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n## 打ち切りを考慮した場合\n\n\n::: {.cell filename='打ち切りを考慮した場合の生存曲線'}\n::: {.cell-output-display}\n\n\n| day| リスク集団| 生存者数| 時点の生存割合| カプランマイヤーの計算式| 生存割合|\n|---:|----------:|--------:|--------------:|------------------------:|--------:|\n|   0|          8|        8|            8/8|                      8/8|   1.0000|\n|   1|          8|        6|            6/8|                 8/8×6/8|   0.7500|\n|   2|          6|        5|            5/6|            8/8×6/8×5/6|   0.6250|\n|   3|          4|        2|            2/4|       8/8×6/8×5/6×2/4|   0.3125|\n|   4|          2|        0|            0/2|  8/8×6/8×5/6×2/4×0/2|   0.0000|\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n:::\n\n### survfit関数\n\nこのように、カプランマイヤー曲線は打ち切りを考慮したリスク集団と生存者数が分かれば計算できます。Rでは、この計算を`survfit`関数で行うことができます。\n\n`survfit`関数は`formula`を引数に取りますが、この`formula`の左辺は上で紹介した`Surv`関数の返り値となります。通常はこの左辺に直接`Surv`関数を書き込んで用います。生存時間に対する説明変数がない場合には、`formula`の右辺は`1`とします。`data`引数にデータフレームを指定するのは線形回帰の`lm`関数と同じです。\n\n`survfit`関数の返り値として、カプランマイヤー曲線で示されているリスク集団の数（`n`）、イベントの起こった回数（`events`）、生存割合が50％となる日数（`median`）、生存割合が50％となる日数の95％信頼区間（`0.95LCL`、`0.95UCL`）が表示されます。\n\n\n::: {.cell filename='survfit関数でカプランマイヤー曲線の計算'}\n\n```{.r .cell-code}\nresult_km <- survfit(Surv(time, status) ~ 1, data = cancer)\n\nresult_km\n## Call: survfit(formula = Surv(time, status) ~ 1, data = cancer)\n## \n##        n events median 0.95LCL 0.95UCL\n## [1,] 228    165    310     285     363\n```\n:::\n\n\nまた、`survfit`関数の返り値を`plot`関数の引数とすると、カプランマイヤー曲線がグラフとして表示されます。点線は生存時間の95％信頼区間を示します。\n\n\n::: {.cell filename='カプランマイヤー曲線の表示'}\n\n```{.r .cell-code}\nplot(result_km)\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### ggsurvfitパッケージ\n\n[`survminer`](https://rpkgs.datanovia.com/survminer/index.html)パッケージ[@survminer_bib]と[`ggsurvfit`](https://www.danieldsjoberg.com/ggsurvfit/)パッケージ [@ggsurvfit_bib]はいずれもカプランマイヤー曲線を表示する`ggplot2`のExtensionです。前者の方が機能が多く、後者はカプランマイヤー曲線の描画に特化したパッケージです。カプランマイヤー曲線をグラフにするためだけであれば後者の`ggsurvfit`を用いるとよいでしょう。\n\n`ggsurvfit`パッケージの`ggsurvfit`関数は、`survfit`関数の返り値を引数に取り、`ggplot2`でグラフを描画する関数です。\n\n\n::: {.cell filename='ggsurvfit::ggsurvfit関数'}\n\n```{.r .cell-code}\npacman::p_load(ggsurvfit)\nresult_km |> ggsurvfit()\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n`ggplot2`のように、`+`で関数を繋ぐと表示する内容を変更することができます。`add_confidence_interval`を用いれば信頼区間、`add_risktable`を用いればリスクテーブル（リスク集団とイベント数の表）、`add_censor_mark`を用いれば打ち切りが起きた点を表示してくれます。\n\n\n::: {.cell filename='ggsurvfitに要素を追加する'}\n\n```{.r .cell-code}\npacman::p_load(ggsurvfit)\nresult_km |> \n  ggsurvfit() +\n  add_confidence_interval() + # 信頼区間の表示\n  add_risktable() + # リスクテーブル（下の表）の表示\n  add_censor_mark() # 打ち切り点（グラフ上のプラス）の表示\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 説明変数がある場合のカプランマイヤー曲線\n\n`survfit`関数を始めとした`survival`パッケージの関数では、`formula`の右辺に説明変数を追加することで、説明変数による生存時間への影響を解析できるようになっています。`survfit`関数では、説明変数で分けて評価した場合のカプランマイヤー曲線の計算が行われます。\n\n\n::: {.cell filename='説明変数を加えた場合のカプランマイヤー曲線'}\n\n```{.r .cell-code}\nresult_km2 <- survfit(Surv(time, status) ~ sex, data = cancer)\nresult_km2\n## Call: survfit(formula = Surv(time, status) ~ sex, data = cancer)\n## \n##         n events median 0.95LCL 0.95UCL\n## sex=1 138    112    270     212     310\n## sex=2  90     53    426     348     550\n```\n:::\n\n::: {.cell filename='説明変数ありのカプランマイヤー曲線の表示'}\n\n```{.r .cell-code}\nresult_km2 |> \n  ggsurvfit() +\n  add_confidence_interval() \n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## log-rank検定\n\n**log-rank検定**は生存時間が説明変数によって異なるかどうかを検定する、ノンパラメトリックな検定手法です。治験の生存時間解析において、p値の計算は主にこのlog-rank検定を用いて行われています。\n\nRでは、`survdiff`関数を用いてlog-rank検定の計算を行うことができます。`survdiff`関数は`survfit`関数と同様に、左辺に`Surv`関数の返り値、右辺に説明変数を取る`formula`を引数に取ります。`data`引数にデータフレームを設定できるのも`survfit`関数と同様です。\n\n\n::: {.cell filename='log-rank検定'}\n\n```{.r .cell-code}\nsurvdiff(Surv(time, status) ~ sex, data = cancer)\n## Call:\n## survdiff(formula = Surv(time, status) ~ sex, data = cancer)\n## \n##         N Observed Expected (O-E)^2/E (O-E)^2/V\n## sex=1 138      112     91.6      4.55      10.3\n## sex=2  90       53     73.4      5.68      10.3\n## \n##  Chisq= 10.3  on 1 degrees of freedom, p= 0.001\n```\n:::\n\n\n### survfit2関数でlog-rank検定\n\n`ggsurvfit`パッケージには、`survfit2`関数という、`survfit`と似た関数が設定されています。この`survfit2`関数は`survfit`と`survdiff`を同時に行うような関数となっており、計算結果にlog-rank検定のp値を含んでいます。この`survfit2`関数の返り値を用いると、`ggsurvfit`関数によるカプランマイヤー曲線の表示に`add_pvalue`関数でlog-rank検定のp値を付け加えることができます。\n\n\n::: {.cell filename='survfit2関数とlog-rank検定'}\n\n```{.r .cell-code}\n# log-rankのp値を含める場合は、survfit2が必要（survfit2はggsurvfitの関数）\nresult_km2 <- survfit2(Surv(time, status) ~ sex, data = cancer)\n\nresult_km2 |> survfit2_p() # log-rankのp値を表示\n## [1] \"p=0.001\"\n\n# survfit関数と同じようにplotでカプランマイヤーを表示できる\nresult_km2 |> plot() \n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\nresult_km2 |> \n  ggsurvfit() +\n  add_confidence_interval() +\n  add_pvalue() # p値を表記\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-27-2.png){width=672}\n:::\n:::\n\n\n## Cox回帰\n\n**Cox回帰**は、説明変数間でハザードの比（**ハザード比**）がどの時間でも一定であるとして、生存時間を回帰する手法です。\n\nCox回帰では、ある条件でのハザードh~1~(t)と対照条件でのハザードh~0~(t)に以下のような関係があるとします。\n\n$$h_{1}(t)=\\psi h_{0}(t)$$\n\nこの関係が成り立つ、つまりハザード比が一定であることを、**比例ハザード性**と呼びます。このψを以下の式で置き換えることで、生存時間を回帰的に分析することができます。\n\n$$\\psi=\\exp(ax)$$\n\nここで、xは説明変数、aは係数となります。例えば性別間での差を知りたい場合には、男性：x=0、女性：x=1として、$h_{F}(t)=\\exp(a) \\cdot h_{M}(t)$という形で、男性のハザードに対して女性のハザードが$\\exp(a)$倍となるとします。\n\nCox回帰では、このψの説明変数を重回帰のように増やすこともできます。\n\n$$\\psi=\\exp(a_{1}x_{1}+a_{2}x_{2}+ \\cdots +a_{p}x_{p})$$\n\nCox回帰では比例ハザード性を仮定しているため、比例ハザード性が成立しない、つまりハザード比が時間とともに変化するような場合には結果が不正確になります。\n\nRでは、Cox回帰の計算を`coxph`関数で行います。引数はカプランマイヤーの`survfit`関数やlog-rank検定の`survdiff`関数と同じく、`formula`と`data`になります。\n\n説明変数が1つである場合には、検定の結果としてLikelihood ratio test（尤度比検定）、Wald test（Wald検定）、Score (logrank) test（スコア検定）の結果が表示されます。一般的にはWald検定の結果を用いることが多いようです。\n\n\n::: {.cell filename='Cox回帰'}\n\n```{.r .cell-code}\nresult_km2_cox <- coxph(Surv(time, status) ~ sex, data = cancer)\nsummary(result_km2_cox)\n## Call:\n## coxph(formula = Surv(time, status) ~ sex, data = cancer)\n## \n##   n= 228, number of events= 165 \n## \n##        coef exp(coef) se(coef)      z Pr(>|z|)   \n## sex -0.5310    0.5880   0.1672 -3.176  0.00149 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n##     exp(coef) exp(-coef) lower .95 upper .95\n## sex     0.588      1.701    0.4237     0.816\n## \n## Concordance= 0.579  (se = 0.021 )\n## Likelihood ratio test= 10.63  on 1 df,   p=0.001\n## Wald test            = 10.09  on 1 df,   p=0.001\n## Score (logrank) test = 10.33  on 1 df,   p=0.001\n```\n:::\n\n\n### Cox回帰のモデル選択\n\nCox回帰では、[26章](./chapter26.html)で説明した**AICによるモデル選択**で、説明変数を選択することができます。Rでモデル選択を行う場合には、まず`coxph`関数の`formula`に説明変数をすべて足した式（フルモデル）を設定します。この式を`step`関数の引数に取ることで、AICによるモデル選択の計算が行われます。\n\n以下の例では、`cancer`データセットのCox回帰に関するモデル選択を行っています。モデル選択の結果、`age`がモデルから外されている、つまり年齢は生存時間に大きな影響がないとして説明変数から取り除かれていることがわかります。\n\n\n::: {.cell filename='Cox回帰のモデル選択'}\n\n```{.r .cell-code}\n\nmodel_All_coxph <- \n  coxph(Surv(time, status) ~ sex + age + ph.ecog + ph.karno, data = cancer |> na.omit())\n\nresult_step <- step(model_All_coxph, trace = 0)\n\nresult_step\n## Call:\n## coxph(formula = Surv(time, status) ~ sex + ph.ecog + ph.karno, \n##     data = na.omit(cancer))\n## \n##              coef exp(coef) se(coef)      z        p\n## sex      -0.53142   0.58777  0.19735 -2.693 0.007085\n## ph.ecog   0.74917   2.11524  0.21182  3.537 0.000405\n## ph.karno  0.01778   1.01794  0.01112  1.598 0.110009\n## \n## Likelihood ratio test=22.16  on 3 df, p=6.038e-05\n## n= 167, number of events= 120\n```\n:::\n\n\n## Cox回帰のモデル評価\n\nCox回帰での計算が正しく行われていることを確認する場合には、残差を調べます。Cox回帰でチェックされる残差は主にマルチンゲール残差（Martingale residuals）とシェーンフェルド残差（Schoenfeld residuals）の2つです。\n\n計算は簡単で、`coxph`関数の返り値を`residuals`関数の引数に取るだけです。マルチンゲール残差を計算する場合には引数に`type=\"martingale\"`を、シェーンフェルド残差を計算する場合には`type=\"schoenfeld\"`を設定します。\n\n\n::: {.cell filename='マルチンゲール残差とシェーンフェルド残差'}\n\n```{.r .cell-code}\n# マルチンゲール残差\nresult_km2_cox |> residuals(type=\"martingale\") |> head()\n##          1          2          3          4          5          6 \n##  0.1719970 -0.3880051 -3.5060567  0.4814561 -2.5060567 -3.5060567\n\n# シェーンフェルド残差\nresult_km2_cox |> residuals(type=\"schoenfeld\") |> head()\n##          5         11         11         11         12         13 \n##  0.7228149 -0.2764095 -0.2764095 -0.2764095 -0.2793553 -0.2816122\n```\n:::\n\n\nマルチンゲール残差やシェーンフェルド残差を確認する場合には、`survminer`パッケージの`ggcoxdiagnostics`関数を用いるのが簡単でよいでしょう。`ggcoxdiagnostics`関数は引数に`coxph`関数の返り値と残差の`type`を取ります。計算結果はグラフで表示され、青の線が概ね一定であれば比例ハザード性が成立しているとします。\n\n\n::: {.cell filename='ggcoxdiagnostics関数でCox回帰を評価する'}\n\n```{.r .cell-code}\npacman::p_load(survminer)\n\nresult_step |> ggcoxdiagnostics(type=\"martingale\")\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\nresult_step |> ggcoxdiagnostics(type=\"schoenfeld\")\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-31-2.png){width=672}\n:::\n:::\n\n\n## ハザード比\n\n治験などでは、**ハザード比**の計算にCox回帰が用いられています。このハザード比は上の式で示したψで、ある条件におけるハザードh~1~(t)と対照のハザードh~0~(t)の比になります。\n\n$$\\psi=\\frac{h_{1}(t)}{h_{0}(t)}$$\n\nハザード比は一般的に**フォレストプロット**と呼ばれる、代表値を点、信頼区間を線で表した図で表記されます。フォレストプロットについては[ggplot2の章](./chapter22.html)で簡単に紹介しています。\n\nRでのハザード比の計算とフォレストプロットの作成には、[survivalAnalysis](https://cran.r-project.org/web/packages/survivalAnalysis/index.html)パッケージ  [@survivalAnalysis_bib]を用いるのが便利です。`cox_as_data_frame`関数を用いると、各説明変数ごとのハザード比（`HR`、hazard ratio）、95%信頼区間（`Lower_CI`、`Upper_CI`）を含むデータフレームを返してくれます。\n\n以下のグラフでは、`sex`と`ph.ecog`のハザード比の信頼区間が1に被っていない形になっています。この図から、`sex`、`ph.ecog`のハザード比は1ではなく、いずれも生存時間に統計的に有意な影響を与えていることがわかります。\n\n\n::: {.cell filename='ハザード比'}\n\n```{.r .cell-code}\npacman::p_load(survivalAnalysis)\n\n# coxph関数の返り値をcox_as_data_frame関数の引数に与える\ndf_step <- \n  survivalAnalysis::cox_as_data_frame(result_step)\n\n# Cox回帰の結果をデータフレームにまとめてくれる\ndf_step\n##   factor.id factor.name factor.value        HR  Lower_CI  Upper_CI    Inv_HR\n## 1       sex         sex <continuous> 0.5877701 0.3992326 0.8653444 1.7013455\n## 2   ph.ecog     ph.ecog <continuous> 2.1152378 1.3965408 3.2037956 0.4727601\n## 3  ph.karno    ph.karno <continuous> 1.0179354 0.9959836 1.0403710 0.9823806\n##   Inv_Lower_CI Inv_Upper_CI            p\n## 1    1.1556092     2.504806 0.0070849192\n## 2    0.3121298     0.716055 0.0004051125\n## 3    0.9611956     1.004033 0.1100091086\n\n# フォレストプロットの表示\ndf_step |> \n  ggplot(aes(x = HR, xmax = Upper_CI, xmin = Lower_CI, y = factor.id, color = factor.id)) +\n  geom_point(size = 3) +\n  geom_linerange(linewidth = 1)+\n  geom_vline(xintercept = 1)\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## パラメトリックな手法\n\nカプランマイヤー曲線、log-rank検定はノンパラメトリックな手法、Cox回帰はセミパラメトリックな手法であるとされています。これは、いずれも明確な確率分布に基づいて計算する統計手法では無いからです。\n\n一方で、明確な確率分布に基づいたパラメトリックな手法、つまり指数分布やワイブル分布を仮定して生存曲線やハザードを直接計算する方法もあります。\n\nRでパラメトリックな手法を用いる場合には、`survreg`関数を用います。`survreg`関数はカプランマイヤーの`survfit`、log-rank検定の`survdiff`、Cox回帰の`coxph`関数と同様に、`Surv`関数を含む`formula`と確率分布（`dist`）を引数に取る関数です。確率分布には、ハザード一定であれば`dist=\"exponential\"`を、ハザードが変化する場合には`dist=\"weibull\"`を指定します。\n\n以下の例では、ハザード一定モデルを用いて`survreg`の計算した結果と、ハザードのグラフを示します。\n\n\n::: {.cell filename='ハザード一定モデルでのsurvreg関数'}\n\n```{.r .cell-code}\n# ハザード一定モデル\nset.seed(0)\ntime_s <- rexp(1000, rate = 0.01) |> round() + 1\n\n# survreg関数でハザード一定モデルを計算する\nts_survreg <- survreg(Surv(time_s, rep(1, 1000)) ~ 1, dist = \"exponential\")\nts_survreg\n## Call:\n## survreg(formula = Surv(time_s, rep(1, 1000)) ~ 1, dist = \"exponential\")\n## \n## Coefficients:\n## (Intercept) \n##    4.644025 \n## \n## Scale fixed at 1 \n## \n## Loglik(model)= -5644   Loglik(intercept only)= -5644\n## n= 1000\n\n# survregから計算したrate\n-ts_survreg$coefficients |> exp() # rate（=1/scale）\n## (Intercept) \n## 0.009618899\n1 / ts_survreg$scale # shape\n## [1] 1\n\n# ハザード（=rate）の計算\nplot(1:100, rep((-ts_survreg$coefficients) |> exp(), 100), type = \"l\")\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nハザード一定モデルを`dist=\"weibull\"`で解析した場合の結果は以下の通りです。ハザードが一定とは少し異なる値を示します。\n\n\n::: {.cell filename='ハザード一定モデルのデータをワイブル分布として計算'}\n\n```{.r .cell-code}\n# ハザード一定モデル（Weibullとしてsurvregで計算）\nts_survreg <- survreg(Surv(time_s, rep(1, 1000)) ~ 1, dist = \"weibull\")\nts_survreg\n## Call:\n## survreg(formula = Surv(time_s, rep(1, 1000)) ~ 1, dist = \"weibull\")\n## \n## Coefficients:\n## (Intercept) \n##    4.668915 \n## \n## Scale= 0.9388375 \n## \n## Loglik(model)= -5640.8   Loglik(intercept only)= -5640.8\n## n= 1000\n\nts_survreg$coefficients |> exp() # scale（=1/rate）\n## (Intercept) \n##     106.582\n1 / ts_survreg$scale # shape\n## [1] 1.065147\n\n# ハザードを計算する関数\nhazard_f <- function(time, intercept, slope){\n  slope * intercept * time ^ (slope - 1)\n}\n\nhazards <- hazard_f(1:100, (-ts_survreg$coefficients |> exp()), 1 / ts_survreg$scale)\nplot(1:100, hazards, type = \"l\", ylim=c(0, 0.014))\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n### ワイブル分布でのハザードの計算\n\n以下は、ワイブル分布から生成した生存時間を`survreg`関数で解析したものです。`survreg`関数から計算したハザードと、生存時間生成に用いたワイブル分布のパラメータからの計算結果がほぼ一致することがわかります。\n\n\n::: {.cell filename='ワイブル分布から生成したデータでのsurvregの計算'}\n\n```{.r .cell-code}\n# ワイブル分布での生存時間解析（scaleは1/rateに当たるもの、shapeは形状パラメータ）\nsv <- rweibull(1000, shape = 0.85, scale = 100) |> round() + 1\n\n# survregで計算する\nts_survreg <- survreg(Surv(sv, rep(1, 1000)) ~ 1, dist = \"weibull\")\nts_survreg\n## Call:\n## survreg(formula = Surv(sv, rep(1, 1000)) ~ 1, dist = \"weibull\")\n## \n## Coefficients:\n## (Intercept) \n##     4.66072 \n## \n## Scale= 1.149131 \n## \n## Loglik(model)= -5714.7   Loglik(intercept only)= -5714.7\n## n= 1000\n\n# 上がscale、下がshape\nts_survreg$coefficients |> exp() # scale（105.7でほぼ合っている）\n## (Intercept) \n##    105.7122\n1 / ts_survreg$scale # shape （0.870でほぼ合っている）\n## [1] 0.8702231\n\nhazards <- hazard_f(1:100, (-ts_survreg$coefficients |> exp()), 1 / ts_survreg$scale)\nplot(1:100, hazards, type = \"l\", ylim = c(0, 0.014))\npar(new = T)\nhazards <- hazard_f(1:100, 1/100, 0.85)\nplot(1:100, hazards, type = \"l\", ylim = c(0, 0.014), col = \"red\")\n```\n\n::: {.cell-output-display}\n![](chapter30_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "chapter30_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}