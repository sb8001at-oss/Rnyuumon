{
  "hash": "df1f7659b03200a9c3f65e24b9b6236b",
  "result": {
    "engine": "knitr",
    "markdown": "# ネットワーク解析\n\n\n\n\n\n## ネットワーク解析とは？\n\n**ネットワーク解析**とは、たくさんの人や都市、ウェブページなどの関係性（ネットワーク）を解析する一連の解析手法のことを指します。ここでのネットワークとは、例えば友人関係やメールの送付、電車の路線での駅同士のつながりや物資のやり取りなど、多岐に渡ります。生物学であれば代謝経路や遺伝子の誘導・抑制の関係性、会社であれば命令系統などもネットワークの例となります。これらのネットワークを表示し、特徴を抽出することでネットワークを評価する手法がネットワーク解析です。\n\nネットワークの基本は、人や都市などの要素と、そのつながりの2つです。ネットワーク解析では、人や都市などの要素のことを**node**や**vertex**、つながりのことを**link**や**edge**と呼びます。また、このネットワーク全体のことを**graph**と呼びます。\n\nlinkやedge、つまりネットワークのつながりには、大きく分けて2つのタイプがあります。一つは友人関係や線路での結合など、方向性が無いもので、もう一つはメールの送付や物資の輸送などの方向性があるものです。方向性のないつながりのことを**無向（undirected）**、方向性のあるつながりのことを**有向（directed）**と呼びます。\n\n![図1：ネットワークの用語](./image/network_graph.png)\n\n主要なネットワーク解析の目的は以下の通りです。\n\n- ネットワークを作成し、取り扱う \n- ネットワークを表示する \n- 重要なnodeを抽出する（中心性） \n- nodeをグループ分けする（クラスター化） \n- グラフの特徴を評価する \n- nodeからnodeへの経路を探索する \n\nこの他にランダムなグラフの作成、グラフの類似性の評価や検定を用いたネットワーク解析もあります。\n\n## Rでのネットワーク解析のライブラリ\n\nRでのネットワーク解析には、[`statnet`](https://statnet.org/)[@statnet_bib1; @statnet_bib2]系ライブラリと[`igraph`](https://r.igraph.org/index.html)[@igraph_bib1; @igraph_bib2]系ライブラリの2系統があります。どちらもネットワーク解析を行うために必要十分な機能を備えていますが、オブジェクトの取り扱いや関数名の特徴が異なります。どちらを使うかは好みで決めてしまってよいですが、`igraph`系の方が情報が多いため比較的使いやすいと思います。\n\n`statnet`は`sna`[@sna_bib]や`network`[@network_bib1; @network_bib2]などの一連のネットワーク解析用ライブラリの総称で、`tidyverse`のように`install.packages(\"statnet\")`で一度にインストールし、`library(statnet)`で一度にロードすることができます。`statnet`はよくできたライブラリ群だと思うのですが、解説文（Documentation）があまり充実しておらず、なかなか手を付けにくい印象があります。\n\n`igraph`はネットワーク解析に必要な関数を一通り備えたライブラリで、RだけでなくpythonやMathematica、Cにも機能を提供しています。ネット上にも`igraph`の情報はたくさん落ちており、`statnet`よりは間口が広く学びやすいかと思います。ただし、`statnet`も`igraph`もたくさんの機能を備えたライブラリであり、学習コストは高めです。\n\nこの`igraph`、非常にたくさんの関数を備えたライブラリではあるのですが、関数の命名規則や引数の形が一定ではなく、そのまま使うとやや使いにくいです。また、`tidyverse`などのRの標準的なパッケージとの相性もあまりよくありません。この命名や`tidyverse`との整合性を取るためのライブラリが`tidygraph`[@tidygraph_bib]です。`tidygraph`はほぼ`igraph`のwrapper（関数名と引数の形を整えたもの）ですが、`igraph`をそのまま使うよりは使いやすく、パイプ演算子との相性も悪くありません。\n\nこの章ではまず`igraph`について説明し、その後に`tidygraph`と`igraph`の関数との対応を説明することにします。\n\n\n::: {.cell filename='ライブラリのロード'}\n\n```{.r .cell-code}\npacman::p_load(igraph, tidygraph, tidyverse)\n```\n:::\n\n\n## igraph\n\n### igraphでの用語\n\n`igraph`では、ネットワーク全体を**graph**、ノードを**vertex**、リンクを**edge**と呼びます。それぞれをnetwork、node、linkと呼ぶことは基本的にありません（ただし、一部の関数の引数としてnodeを使っていたりします）。\n\n![図2：igraphでの呼び方](./image/graph_at_igraph.png)\n\n### グラフを作成する\n\n`igraph`でグラフ、つまりネットワークの全体図を作成する方法はいくつかあります。\n\n- **edge vector**から作成する\n- **edge list**から作成する\n- **adjacent matrix**から作成する\n- **literal**から作成する\n- formulaから作成する\n- **data.frame**から作成する\n\n単純なグラフを作成するのであればedge vectorやedge listから、vertexやnodeに特性（`attribute`）を付けた複雑なグラフを作成するのであれば`data.frame`を用いるのが比較的簡単だと思います。\n\n#### edge vectorから作成する\n\nまずはベクターから作成する方法を説明します。\n\nベクターでネットワークを表現する場合には、ベクターに、edgeで繋ぎたいvertex2つをセットで記載します。例えば、`c(\"A\", \"B\")`であれば、AとBというvertexをedgeで繋いだグラフとなります。edgeでつなぐvertexは必ず2つセットになりますので、もう一つedgeを設定したい場合には、1つ目のedgeを示す2つのvertexの後に、さらに2つのvertexを記載します。つまり、`c(\"A\",\"B\", \"A\",\"C\")`といった形で表現することで、A-B、A-Cのedgeを持つ、A、B、Cのvertexを表現することができます。このようなベクターを`igraph`では**edge vector**と呼びます。\n\nとは言っても、edge vectorはただのベクターですので、このedge vectorからグラフを作成する必要があります。グラフの作成には、`make_graph`関数を用います。edge vectorを`make_graph`関数の引数とすることで、グラフを作成することができます。\n\nedge vectorでは、基本的に1つ目のvertexから2つ目のvertexの方向にedgeを繋ぐ、有向グラフが作成されます。無向グラフを作成する場合には、引数に`directed=FALSE`と指定します。\n\nグラフを作成し表示すると、グラフの情報が示されます。このグラフの情報については後ほど説明します。\n\n\n::: {.cell filenamae='edge vectorからグラフを作成する'}\n\n```{.r .cell-code}\n# 有向グラフ\nmake_graph(\n  c(1, 2,\n    2, 3,\n    3, 1)\n)\n## IGRAPH a881b28 D--- 3 3 -- \n## + edges from a881b28:\n## [1] 1->2 2->3 3->1\n\n# 無向グラフ\nmake_graph(\n  c(1, 2,\n    2, 3,\n    3, 1),\n  directed = FALSE\n)\n## IGRAPH a882a90 U--- 3 3 -- \n## + edges from a882a90:\n## [1] 1--2 2--3 1--3\n```\n:::\n\n\n##### グラフを描画する\n\nグラフを描画するには、先ほど作成したグラフを`plot`関数の引数に取ります。より複雑なグラフの描画方法については後ほど説明します。\n\n\n::: {.cell filename='グラフを表示する'}\n\n```{.r .cell-code}\nmake_graph(\n  c(1, 2,\n    2, 3,\n    3, 1)\n) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n#### edge listからグラフを作成する\n\n**edge list**はedge vectorと似ており、edgeでつなぐvertexを1、2列目にそれぞれ記載した行列（edge list）を用いてグラフを作成する方法です。下の例では、A→B、B→C、C→Aのそれぞれのedgeを2列の行列で表現しています。edge listからグラフを作成する場合には、`graph_from_edgelist`関数を用います。`make_graph`関数と同様に、無向グラフを作成する場合には引数に`directed=FALSE`を指定します。\n\n\n::: {.cell filename='edge listからグラフを作成する'}\n\n```{.r .cell-code}\n# byrow=TRUEを指定すると表記と一致してわかりやすい\nedgelist_matrix <- \n  matrix(\n    c(\"A\",\"B\", \n      \"B\",\"C\", \n      \"C\",\"A\"),\n    ncol = 2,\n    byrow=TRUE\n  )\n\n# edgelistを表示する\nedgelist_matrix\n##      [,1] [,2]\n## [1,] \"A\"  \"B\" \n## [2,] \"B\"  \"C\" \n## [3,] \"C\"  \"A\"\n\ngraph_from_edgelist(edgelist_matrix) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n#### adjacency matrixからグラフを作成する\n\nedge vector、edge listを用いないグラフの作成方法として、**adjacency matrix（隣接行列）**を用いる方法があります。隣接行列は行数と列数が同じ行列（正方行列）で、行名・列名をvertexの名前とした行列です。隣接行列では、行方向に見て0であればedgeなし、1以上であればedgeありとなります。例えば下の例では、Aの行を見ると、A列は0、B列に1、C列に1となっています。これは、AからAはedgeがなく、AからB、AからCへのedgeがあることを示しています。\n\n隣接行列からグラフを作成するための関数が`graph_from_adjacency_matrix`です。`graph_from_adjacency_matrix`関数では、有向グラフ・無向グラフを指定する引数として`directed`ではなく、`mode`が用いられます。デフォルトは`mode=\"directed\"`で、有向グラフが作成されます。無向グラフを作成する場合には`mode=\"undirected\"`を指定します。\n\n隣接行列には1以上の値を設定することができます。1以上の値を設定した場合には、そのedgeが複数、平行なedgeとして設定されます。ただし、`weighted=TRUE`とした場合には、edgeの数ではなく、edgeの`weight`という特性（attribute）の値が指定されることになります。\n\n\n::: {.cell filename='adjacency matrixからグラフを作成する'}\n\n```{.r .cell-code}\nmat <- \n  matrix(\n    c(0, 1, 1,\n      1, 0, 1,\n      1, 1, 0),\n    nrow = 3,\n    byrow = TRUE\n  )\n\n# vertex名は行・列名で設定する\ncolnames(mat) <- c(\"A\", \"B\", \"C\")\nrownames(mat) <- c(\"A\", \"B\", \"C\")\n\n# 隣接行列を表示する\nmat\n##   A B C\n## A 0 1 1\n## B 1 0 1\n## C 1 1 0\n\n# 有向グラフ\ngraph_from_adjacency_matrix(mat) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# 無向グラフ\ngraph_from_adjacency_matrix(mat, mode = \"undirected\") |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n上の例ではA、B、Cを繋ぐすべてのedgeが両方向になっていますが、片方向にする場合には、例えばA行B列を1、B行A列を0とします。このように設定することで、A→Bのみの有向グラフを作成することができます。また、対角成分（A行A列など）が1以上に設定されている場合には、AからAへの**ループ**となるedgeが設定されます。\n\n\n::: {.cell filename='adjacency matrixで方向を設定する'}\n\n```{.r .cell-code}\nmat2 <-\n  matrix(\n    c(0, 1, 0,\n      0, 0, 1,\n      1, 0, 0),\n    nrow = 3,\n    byrow = TRUE\n  )\n\nmat2\n##      [,1] [,2] [,3]\n## [1,]    0    1    0\n## [2,]    0    0    1\n## [3,]    1    0    0\n\n# 有向グラフ\ngraph_from_adjacency_matrix(mat2) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# vertex自身へのedge（ループ）\nmatrix(\n  c(1, 1, 1,\n    1, 1, 1,\n    1, 1, 0),\n  nrow = 3,\n  byrow = TRUE\n) |> \n  graph_from_adjacency_matrix() |> \n  plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n#### literalからグラフを作成する\n\nグラフの表現として、`--`や`-+`などの記号を用いる、literalでもグラフを作成することができます。グラフの表現はそれぞれ以下の通りです。\n\n| literal   | graph              | \n| --------- | ------------------ | \n| A -- B    | A－B（無向グラフ） | \n| A -+ B    | A→B               | \n| A +- B    | A←B               | \n| A ++ B    | A↔B               | \n| A ----+ B | A→B               | \n\n要は、+側が矢印の先になるような記法がliteralです。矢印の反対側は-になります。左端と右端の-、+の間には-を複数挟むこともできます。無向グラフと有向グラフを同じグラフに含めることはできませんので、`--`を用いた場合にはすべてのedgeを`--`で表現する必要があります。\n\nこのliteralからグラフを作成する関数が`graph_from_literal`です。literalは文字列ではなく、そのまま引数として取り、edgeの表現として必要な分だけコンマで繋ぎます。\n\n\n::: {.cell filename='literalからグラフを作成する'}\n\n```{.r .cell-code}\ngraph_from_literal(\n  A-+B, B-+C, C-+D, D++A \n) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n##### formulaでグラフを作成する\n\nまた、このliteralに似た表現を用いてグラフを作成する方法もあります。引数としてベクターではなく、チルダ（`~`）で始まり、edgeとvertexを表現した`―`と`:`から成る式（formula）を用いる方法です。グラフの作成にはedge vectorの際に用いた`make_graph`を用います。`-`がedge、`:`は複数のvertexへの接続を表します。Rでは`:`の表現が数列（`1:3`など）と異なり混乱しやすいので、あまりお勧めできる表記方法ではないように思います。\n\n\n::: {.cell filename='formulaを用いてグラフを作成する'}\n\n```{.r .cell-code}\nmake_graph(~ A-B, B-C, C-A:D) |> plot() # C-A、C-Dを設定\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n#### data.frameからグラフを作成する\n\nRで最も頻繁に用いられるデータ型の一つである、データフレームを用いてもグラフを作成することができます。グラフの作成方法はedge listとよく似ていて、1列目と2列目にedgeで接続するvertexを表記したデータフレームを用います。列名はわかりやすいようにそれぞれ`from`と`to`にしておきます。このデータフレームがグラフ作成の基本となります。\n\nまた、データフレームを用いると、edgeやvertexに特性（`attributes`）を持たせたいときに便利です。例えば人間関係であれば、edgeにはメールのやり取りの回数であったり、交友関係の深さを設定することがあります。また、人間関係におけるvertex、つまり人には性別や年齢、所属する組織などを設定したい場合もあるでしょう。データフレームからグラフを作成すると、このような特性を比較的簡単にグラフに持たせることができます。\n\nedgeに特性を持たせたい場合には、上記の`from`と`to`からなるデータフレームに列を追加します。edgeに設定される主な特性は`weight`です。上記のメールの数や交友関係の深さなどを`weight`として数値で設定します。\n\n同じように、vertexにも特性を持たせることができます。edgeを示したデータフレームとは別に、vertexを表現するためのデータフレームを準備します。このデータフレームの1列目には、edgeのデータフレームに示したvertexをすべて含める必要があります。また、edgeのデータフレームに含まれないvertexを含めることもできます（edgeによる接続のない、独立したvertexが追加されます）。2列目以降には、vertexの特性、例えば人であれば年齢や性別の列を作成しておきます。\n\nこの2つのデータフレームを用いて、グラフを作成します。データフレームからグラフを作成するための関数が`graph_from_data_frame`です。`graph_from_data_frame`では、edgeを表現したデータフレームだけあればグラフを作成することができます。また、`vertices`引数にvertexを表現したデータフレームを設定することで、edgeとは別にvertexやその特性を設定することができます。\n\n\n::: {.cell filename='データフレームからグラフを作成する'}\n\n```{.r .cell-code}\n# edgeのデータフレーム（weightは特性）\nd_edge <- data.frame(\n  from = c(\"A\", \"B\", \"C\"),\n  to = c(\"B\", \"C\", \"A\"),\n  weight = c(1, 2, 3)\n)\n\n# vertexのデータフレーム（age、sexは特性）\nd_vertex <- data.frame(\n  name = c(\"A\", \"B\", \"C\"),\n  age = c(20, 25, 30),\n  sex = c(\"F\", \"M\", \"F\")\n)\n\ng <- graph_from_data_frame(d_edge, vertices = d_vertex)\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## attribute\n\n`attribute`については[3章](./chapter3.html)や[18章](./chapter18.html)で簡単に説明しています。ベクターの名前（`names`）や行列の次元（`dim`）は`attribute`として設定されており、関数から呼び出したり、演算に用いたりすることができます。`igraph`ではこの`attribute`を設定することで、vertexやedgeの性質をリストのように呼び出すことができます。\n\n:::\n\n#### グラフの表示とattributes\n\nここまでで、グラフを作成する方法について述べてきました。作成したグラフは`igraph`クラスのオブジェクトで、表示させるとedgeの一覧と色々な情報が表示されます。\n\n\n::: {.cell filename='igraphクラス'}\n\n```{.r .cell-code}\nclass(g)\n## [1] \"igraph\"\n```\n:::\n\n::: {.cell filename='igraphクラスのオブジェクトを表示する'}\n\n```{.r .cell-code}\ng\n## IGRAPH a8c790f DNW- 3 3 -- \n## + attr: name (v/c), age (v/n), sex (v/c), weight (e/n)\n## + edges from a8c790f (vertex names):\n## [1] A->B B->C C->A\n```\n:::\n\n\nこの表示のうち、1行目の`DNW-`という部分はこのグラフの性質を示しています。始めの`D`はDirected（有向グラフ）の略です。無向グラフの場合には`U`（Undirected）と表示されます。\n\n次の`N`はNamedの略で、vertexに名前（`name`）の特性（`attribute`）がついていることを示しています。その次の`W`はWeightedの略で、edgeに`weight`が設定されていることを示しています。vertexに名前がついていない場合には`N`の位置が`-`に、edgeに`weight`が設定されていない場合には`W`の位置が`―`になります。\n\n最後の`―`は**2部グラフ（Bipartite graph）**であるかどうかを示しており、2部グラフの場合は`B`、2部グラフでない場合には`―`が表示されます。2部グラフについては後ほど説明します。\n\n次の`3 3`の部分はvertexとedgeの数を示しており、前がvertexの数、後ろがedgeの数になります。\n\n次の行の`+ attr`は設定されている`attribute`を示しています。`name`、`sex`には`(v/c)`と表示されています。この`(v/c)`はvertexの`attribute`であり、characterであることを示しています。`age`は`(v/n)`、つまりvertexの`attribute`でnumericであること、`weight`は`(e/n)`、edgeの`attribute`でnumericであることが表示されています。この他にグラフ自体にも`attribute`を設定することができます。グラフの`attribute`は`(g/c)`や`(g/n)`で示されます。\n\n最後の行はedgeのリストです。この場合は有向グラフであり、A→B、B→C、C→Aの3つのedgeがあることが示されています。\n\n#### edge/vertexをgraphから取り出す\n\nグラフからedgeを取り出す場合には`E`関数、vertexを取り出す場合には`V`関数をそれぞれ用います。取り出したedgeやvertexには`attribute`が付いたままになっています。\n\n\n::: {.cell filename='vertex・edgeを取り出す'}\n\n```{.r .cell-code}\nE(g)\n## + 3/3 edges from a8c790f (vertex names):\n## [1] A->B B->C C->A\nV(g)\n## + 3/3 vertices, named, from a8c790f:\n## [1] A B C\n```\n:::\n\n\n上記のように、グラフには`attribute`を設定することができます。`attribute`を設定することができるのは、graph全体と、edge、vertexの3種類です。それぞれの`attribute`は`graph_attr`、`edge_attr`、`vertex_attr`関数でそれぞれリストとして取り出すことができます。\n\n\n::: {.cell filename='attributesを取り出す'}\n\n```{.r .cell-code}\ngraph_attr(g)\n## named list()\nedge_attr(g)\n## $weight\n## [1] 1 2 3\nvertex_attr(g)\n## $name\n## [1] \"A\" \"B\" \"C\"\n## \n## $age\n## [1] 20 25 30\n## \n## $sex\n## [1] \"F\" \"M\" \"F\"\n```\n:::\n\n\n他のRの関数と同様に、`graph_attr`、`edge_attr`、`vertex_attr`関数にベクターやリストを代入することで、グラフに後から`attribute`を設定することもできます。代入により`attribute`を設定する場合には、関数の第一引数にグラフ、第二引数に`attribute`の名前を文字列で設定します。\n\n\n::: {.cell filename='attributeを設定する'}\n\n```{.r .cell-code}\ngraph_attr(g, \"name\") <- \"ABC\"\nedge_attr(g, \"degree\") <- c(3, 4, 5)\nvertex_attr(g, \"height\") <- c(167, 182, 153)\n\n# attributeが増えている\ng\n## IGRAPH a8c790f DNW- 3 3 -- ABC\n## + attr: name (g/c), name (v/c), age (v/n), sex (v/c), height (v/n),\n## | weight (e/n), degree (e/n)\n## + edges from a8c790f (vertex names):\n## [1] A->B B->C C->A\n```\n:::\n\n\n`attribute`の取り出しには、`graph_attr`、`edge_attr`、`vertex_attr`関数だけでなく、上記の`E`関数、`V`関数を用いることもできます。`E`関数、`V`関数の返り値には`attribute`がくっついているので、`E`関数、`V`関数の後に`$ + attribute名`をつけることで`attribute`をリストのように取り出すことができます。`attribute`を用いて演算を行う場合（たとえばネットワークを`plot`関数で表示するときのオプション設定に`attribute`を用いる場合など）には`E`、`V`関数からの`attribute`の呼び出しを用いることになります。\n\n\n::: {.cell filename='edgeのattributeをE関数から呼び出す'}\n\n```{.r .cell-code}\n# edgeに指定したweightを呼び出し\nE(g)$weight\n## [1] 1 2 3\n\n# edgeの太さをweightに従い決める\nplot(g, edge.width = E(g)$weight)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n同じように、vertexの`attribute`もノードの色調整などに用いることができます。\n\n\n::: {.cell filename='vertexのattributeをV関数から呼び出す'}\n\n```{.r .cell-code}\nV(g)$sex\n## [1] \"F\" \"M\" \"F\"\n\nplot(\n  g, \n  edge.width = E(g)$weight, \n  # 男性のvertexはlightblue、女性のvertexはlightpinkで表示する\n  vertex.color = if_else(V(g)$sex == \"M\", \"lightblue\", \"lightpink\"))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### ネットワークを描画する\n\n上記の通り、ネットワークを描画する場合には、`plot`関数の引数にグラフのオブジェクトを取ります。\n\n\n::: {.cell filename='plot関数でネットワークを表示する'}\n\n```{.r .cell-code}\nplot(g)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nただし、これだけではedgeやvertexの特性をグラフに反映することはできませんし、場合によっては表示が見にくく、ネットワークの構造をきちんととらえることができないこともあります。\n\n`igraph`では、`plot`関数の引数や`layout`（vertexの位置を決める要素）を設定する一連の関数により、ネットワークを自由に描画できるようになっています。以下に`plot`関数の引数の一覧を示します。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5b17079694924ade80c4\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5b17079694924ade80c4\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>表1：plot.igraph関数の引数一覧<\\/caption>\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\"],[\"axes\",\"add\",\"xlim\",\"ylim\",\"mark.groups\",\"mark.shape\",\"mark.col\",\"mark.border\",\"mark.expand\",\"loop.size\",\"vertex.size\",\"vertex.color\",\"vertex.frame.color\",\"vertex.frame.width\",\"vertex.shape\",\"vertex.label\",\"vertex.label.family\",\"vertex.label.font\",\"vertex.label.cex\",\"vertex.label.dist\",\"vertex.label.degree\",\"vertex.label.color\",\"edge.color\",\"edge.width\",\"edge.arrow.size\",\"edge.arrow.width\",\"edge.lty\",\"edge.label\",\"edge.label.family\",\"edge.label.font\",\"edge.label.cex\",\"edge.label.color\",\"edge.label.x\",\"edge.label.y\",\"edge.curved\",\"edge.arrow.mode\",\"edge.loop.angle\",\"layout\",\"margin\",\"palette\",\"rescale\",\"asp\",\"frame\",\"main\",\"sub\",\"xlab\",\"ylab\"],[\"論理型\",\"論理型\",\"ベクター\",\"ベクター\",\"vertex idのベクターのリスト\",\"数値ベクター（－1～1）\",\"ベクター\",\"ベクター\",\"ベクター\",\"数値\",\"数値\",\"文字列（\\\"red\\\"など）\",\"文字列（\\\"red\\\"など）\",\"数値\",\"文字列（\\\"circle\\\"、\\\"square\\\"など）\",\"文字列、NA\",\"文字列\",\"数値（2：太字、3：イタリックなど）\",\"数値\",\"数値\",\"数値\",\"文字列（\\\"red\\\"など）\",\"文字列（\\\"red\\\"など）\",\"数値\",\"数値\",\"数値\",\"数値（2：破線、3：点線など）\",\"文字列\",\"文字列\",\"数値（2：太字、3：イタリックなど）\",\"数値\",\"文字列（\\\"red\\\"など）\",\"数値\",\"数値\",\"論理型、数値\",\"数値\",\"数値\",\"関数\",\"数値\",\"文字列\",\"論理型\",\"数値\",\"論理型\",\"文字列\",\"文字列\",\"文字列、論理型\",\"文字列\"],[\"軸を表示するかどうか\",\"デバイスに追加するか\",\"x軸の範囲\",\"y軸の範囲\",\"vertexをグループ化する\",\"vertexグループの表示形\",\"vertexグループの色\",\"vertexグループの周辺の色\",\"vertexグループのサイズ\",\"ループするedgeのサイズ\",\"vertexのサイズ\",\"vertexの色\",\"vertexの周辺の色\",\"vertexの周辺の太さ\",\"vertexの形\",\"vertexの文字ラベル\",\"vertexの文字ラベルのフォント\",\"vertexの文字ラベルの修飾\",\"vertexの文字ラベルのサイズ\",\"vertexの文字ラベルの位置\",\"vertexの文字ラベルの角度\",\"vertexの文字ラベルの色\",\"edgeの色\",\"edgeの太さ\",\"矢印の大きさ\",\"矢印の幅\",\"edgeの線種\",\"edgeの文字ラベル\",\"edgeの文字ラベルのフォント\",\"edgeの文字ラベルの修飾\",\"edgeの文字ラベルのサイズ\",\"edgeの文字ラベルの色\",\"edgeの文字ラベルの位置（x方向）\",\"edgeの文字ラベルの位置（y方向）\",\"edgeを曲線にするかどうか\",\"矢印の形\",\"ループするedgeの角度\",\"指定するlayout\",\"図のマージンのサイズ\",\"vertexの色のカラーパレット\",\"サイズを調整するかどうか\",\"アスペクトレシオ（縦横比）\",\"フレームをつけるかどうか\",\"メインタイトル\",\"サブタイトル\",\"x軸のタイトル\",\"y軸のタイトル\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>引数名<\\/th>\\n      <th>設定する値<\\/th>\\n      <th>意味<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"引数名\",\"targets\":1},{\"name\":\"設定する値\",\"targets\":2},{\"name\":\"意味\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nいくつかの引数を指定した例を以下に示します。いろいろ試してみることで自由にネットワークを表示できるようになるでしょう。\n\n\n::: {.cell filename='vertexのグループ化'}\n\n```{.r .cell-code}\nplot(g, mark.groups=list(c(1, 2), c(3)), mark.col = c(\"red\", \"blue\"))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### layout\n\nネットワークを表示する際には、上記のような引数による細かな表示の変更の他に、ネットワーク自体の形を大きく変える**layout**というものを指定することができます。`plot`関数内の`layout`引数にlayoutを指定するための関数を指定することで、ネットワークの見た目を大きく変えることができます。また、layoutを指定するための関数を前もって宣言しておくことでもlayoutを変更することができます。各`layout`関数にはそれぞれ引数も設定されているので、同じlayout内で見た目を微調整することもできます。\n\n:::{.panel-tabset}\n\n## star\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_as_star(karate))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_as_tree(karate))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## circle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_in_circle(karate))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## nicely\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_nicely(karate)) # plotのデフォルト\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## grid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_on_grid(karate))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## sphere\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_on_sphere(karate))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## randomly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_randomly(karate))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## with_dh\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_dh(karate)) # Davidson-Harel layout algorithm\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## with_fr\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_fr(karate)) # Fruchterman-Reingold layout algorithm\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## with_gem\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_gem(karate)) # GEM layout algorithm\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n## with_graphopt\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_graphopt(karate)) # graphopt layout algorithm\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## with_kk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_kk(karate)) # Kamada-Kawai layout algorithm\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n## with_lgl\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_lgl(karate)) # Large Graph layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## with_mds\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_mds(karate)) # multidimensional scaling\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n## with_sugiyama\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_sugiyama(karate)) # Sugiyama graph layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n## with_drl\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\nplot(karate, layout=layout_with_drl(karate)) # force-directed graph layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n:::\n\n:::{.callout-tip collapse=true}\n\n## ネットワークの表記と情報としての正しさ\n\nネットワークをグラフとしてプロットすると、何となくそのネットワークが分かったような気がします。ですので、ネットワーク解析においてプロットすること、ネットワークの表記は非常に重要です。一方で、上記のようにネットワークの表記の方法は様々であり、どのようなネットワークの表記がネットワークの正確な理解につながるのかは難しい問題です。\n\nネットワークに関する[論文](https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2018.01742/full) [@Jones_2018_f_in_psycho_bib]では、ネットワークの表記において勘違いしやすい点が4点挙げられています。\n\n- vertexの位置が近いとvertexの関係が密接で、遠いと密接ではないように思う\n- vertexの縦横の位置に意味があるように思う\n- ネットワークの中心に表記されているvertexが重要だと思う\n- 2つのネットワークの図が全然違うと、ネットワークは全く異なっていると思う\n\n上記の4点は表記法により正しかったり間違っていたりするため、必ずしも表示されたネットワークがネットワークの正確な情報を伝えているというわけではありません。ネットワークの描画は乱数依存であるため、例えば下図のように同じグラフを2回表示するだけでも、グラフは同じ形には表記されません。\n\n\n::: {.cell filename='同じネットワークを2度表示する'}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\nkarate |> plot()\nkarate |> plot() # seedを指定しないと見た目が変わる\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n上記で紹介した[論文](https://www.frontiersin.org/journals/psychology/articles/10.3389/fpsyg.2018.01742/full)には、ネットワークの情報を正確に伝えるためのプロットの手法について記載されています。ご一読されるとよいでしょう。\n\n:::\n\n## Zachary's karate club\n\n上記のlayoutでは、`karate <- make_graph(\"Zachary\")`という形で`igraph`に登録されているネットワークである、`\"Zachary\"`を読み込んで利用しています。`make_graph`関数では、`igraph`に登録されているネットワーク（[Notable graphs](https://r.igraph.org/reference/make_graph.html)）を文字列で指定することで、`igraph`に保存されているネットワークを呼び出すことができます。\n\nこれらのネットワークの中でも有名なものの一つが上記の[**Zachary's karate club**](https://en.wikipedia.org/wiki/Zachary%27s_karate_club)です。この空手クラブのデータは[Zachary et al. (1976)](https://www.researchgate.net/publication/248519014_An_Information_Flow_Model_for_Conflict_and_Fission_in_Small_Groups1)[@Zachary1976]で人類学的な解析に用いられたもので、アメリカの大学の空手クラブにおけるメンバー間の交友関係をネットワークとしたものです。この空手クラブ、1番と34番のメンバーを中心とした2つのグループに別れたことで有名で、ネットワークについての教科書などで頻出するデータとなっています。\n\n以下のネットワーク図はメンバーが分離した後の2グループを色で示したものになっています。次に説明する中心性の評価、クラスターの評価にはこのデータを用います。\n\n\n::: {.cell filename='Zachary`s karate club'}\n\n```{.r .cell-code}\nkarate <- make_graph(\"Zachary\")\n\n# 2つに分離した後のグループ\nkarate_col <- \n  c(\"A\", \"A\", \"A\", \"A\", \"A\", \n    \"A\", \"A\", \"A\", \"A\", \"B\", \n    \"A\", \"A\", \"A\", \"A\", \"B\", \n    \"B\", \"A\", \"A\", \"B\", \"A\", \n    \"B\", \"A\", \"B\", \"B\", \"B\",\n    \"B\", \"B\", \"B\", \"B\", \"B\", \n    \"B\", \"B\", \"B\", \"B\")\n\nset.seed(1)\nplot(\n  karate, \n  vertex.color=\n    if_else(\n      karate_col == \"A\", \n      \"lightblue\", \n      \"orange\"), \n  vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### 中心性\n\n上記の通り、Zachary's karate clubのネットワークは1と34のメンバーを中心に2つのグループに分離しました。上のネットワーク図を見ると、確かに1と34にはたくさんのedgeが接続しているように見えます。しかし、実際に1と34がネットワークで中心的な役割があるのかと言われると、グラフだけを見ていてもいまいちよくわかりません。\n\nネットワークで中心的でかつ重要なvertexを抽出するための手法の一つが、**中心性（centrality）**の評価です。ネットワーク解析でよく用いられる中心性は以下の4種類です。\n\n- **次数中心性**（degree centrality）\n- **媒介中心性**（betweenness centrality）\n- **近接中心性**（closeness centrality）\n- **固有ベクトル中心性**（eigenvector centrality）\n\n**次数中心性**は最も単純な中心性で、そのvertexに接続しているedgeの数を表します。`igraph`では`degree`関数で次数中心性を計算することができます。\n\n**媒介中心性**はそのvertexが他のvertexの間に存在する頻度を表したものです。`igraph`では`betweenness`関数で媒介中心性を計算することができます。\n\n**近接中心性**はそのvertexから他のvertexまでの距離の和を反映したもので、`igraph`では`closeness`関数で近接中心性を計算することができます。\n\n**固有ベクトル中心性**は隣接行列から演算できる中心性の指標です。`igraph`では`eigen_centrality`関数で固有ベクトル中心性を計算することができます。\n\nこの他にも様々な中心性の指標はありますが、とりあえずこの4つを比較するとある程度は中心的なvertexを特定することができるでしょう。以下はkarate clubのネットワークでのvertexの中心性を評価したものです。いずれの中心性でも、1と34が高い値を示しており、この2人が重要なvertexであったことがわかります。\n\n\n::: {.cell filename='中心性の演算'}\n\n```{.r .cell-code}\n# 次数中心性\ndegree(karate)\n##  [1] 16  9 10  6  3  4  4  4  5  2  3  1  2  5  2  2  2  2  2  3  2  2  2  5  3\n## [26]  3  2  4  3  4  4  6 12 17\n\n# 媒介中心性\nbetweenness(karate)\n##  [1] 231.0714286  28.4785714  75.8507937   6.2880952   0.3333333  15.8333333\n##  [7]  15.8333333   0.0000000  29.5293651   0.4476190   0.3333333   0.0000000\n## [13]   0.0000000  24.2158730   0.0000000   0.0000000   0.0000000   0.0000000\n## [19]   0.0000000  17.1468254   0.0000000   0.0000000   0.0000000   9.3000000\n## [25]   1.1666667   2.0277778   0.0000000  11.7920635   0.9476190   1.5428571\n## [31]   7.6095238  73.0095238  76.6904762 160.5515873\n\n# 近接中心性\ncloseness(karate)\n##  [1] 0.01724138 0.01470588 0.01694915 0.01408451 0.01149425 0.01162791\n##  [7] 0.01162791 0.01333333 0.01562500 0.01315789 0.01149425 0.01111111\n## [13] 0.01123596 0.01562500 0.01123596 0.01123596 0.00862069 0.01136364\n## [19] 0.01123596 0.01515152 0.01123596 0.01136364 0.01123596 0.01190476\n## [25] 0.01136364 0.01136364 0.01098901 0.01388889 0.01369863 0.01162791\n## [31] 0.01388889 0.01639344 0.01562500 0.01666667\n\n# 固有ベクトル中心性\neigen_centrality(karate)$vector\n##  [1] 0.95213237 0.71233514 0.84955420 0.56561431 0.20347148 0.21288383\n##  [7] 0.21288383 0.45789093 0.60906844 0.27499812 0.20347148 0.14156633\n## [13] 0.22566382 0.60657439 0.27159396 0.27159396 0.06330461 0.24747879\n## [19] 0.27159396 0.39616224 0.27159396 0.24747879 0.27159396 0.40207086\n## [25] 0.15280670 0.15857597 0.20242852 0.35749923 0.35107297 0.36147301\n## [31] 0.46806481 0.51165649 0.82665886 1.00000000\n\n# それぞれをプロットする\npar(mfrow = c(2, 2))\ndegree(karate) |> plot()\ntitle(\"次数中心性\")\nbetweenness(karate) |> plot()\ntitle(\"媒介中心性\")\ncloseness(karate) |> plot()\ntitle(\"近接中心性\")\neigen_centrality(karate)$vector |> plot()\ntitle(\"固有ベクトル中心性\")\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-38-1.png){width=960}\n:::\n:::\n\n\n#### PageRank\n\n上記の中心性と似た中心性の評価基準として、**PageRank**があります。PageRankは[Googleが検索エンジンにおいてホームページの順位付けをする](https://ja.wikipedia.org/wiki/%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%A9%E3%83%B3%E3%82%AF)のに用いた評価方法です。`igraph`では`page_rank`関数でPageRankの演算を行うことができます。\n\n\n::: {.cell filename='PageRankによるvertexの評価'}\n\n```{.r .cell-code}\npage_rank(karate)[[1]] |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n#### Edge betweenness\n\nvertexの媒介性ではなく、edgeの媒介性、つまりvertexとvertexの経路の間にあるedgeを評価する方法がedge betweenness（辺の媒介性）です。edge betweennessが高い辺が切れてしまった場合には、ネットワークが大きく分断されることになります。以下の通り、karate clubでは1と32の間のedge betweennessが高く、ココが切れるとネットワークが2つに分離しやすくなります。\n\n\n::: {.cell filename='edge betweenness'}\n\n```{.r .cell-code}\n# edge betweennessを演算\nedge_betweenness(karate)\n##  [1] 14.166667 43.638889 11.500000 29.333333 43.833333 43.833333 12.802381\n##  [8] 41.648413 29.333333 33.000000 26.100000 23.770635 22.509524 25.770635\n## [15] 22.509524 71.392857 13.033333  4.333333  4.164286  6.959524 10.490476\n## [22]  8.209524 10.490476 18.109524 12.583333 14.145238 23.108730 12.780952\n## [29] 38.701587 17.280952  5.147619  4.280952  1.888095  6.900000  8.371429\n## [36]  2.666667  1.666667  1.666667  2.666667 16.500000 16.500000  5.500000\n## [43] 17.077778 22.684921 16.614286 38.049206 13.511111 19.488889 13.511111\n## [50] 19.488889 13.511111 19.488889 33.313492 13.511111 19.488889 13.511111\n## [57] 19.488889 11.094444  5.911111 12.533333 18.327778  3.733333  2.366667\n## [64] 10.466667 22.500000 23.594444  2.542857 30.457143 17.097619  8.333333\n## [71] 13.780952 13.087302 16.722222  9.566667 15.042857 23.244444 29.953968\n## [78]  4.614286\nedge <- karate |> as_edgelist() |> as.data.frame()\n\n# Edge betweennessをグラフで表示\ndata.frame(edge , betweenness = edge_betweenness(karate)) |> \n  mutate(edge = paste0(V1, \"-\", V2)) |> \n  ggplot(aes(x = edge, y = betweenness))+\n  geom_point(size = 3)+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-40-1.png){width=960}\n:::\n:::\n\n\n### ネットワークのクラスター（コミュニティ）\n\nネットワーク解析の目的の一つは、ネットワーク上のクラスター（コミュニティ）を明らかにすることです。karate clubの例であれば、2つのクラスターが存在することがあらかじめ分かっていれば、グループが割れないように対策することができたかもしれません。\n\n[28章](./chapter28.html)で説明したようにクラスター解析には様々な方法があります。同じように、ネットワーク解析におけるクラスター解析にも様々なものがあります。`igraph`に登録されているクラスター解析だけで10種以上あります。どれがいいのかは時と場合によりますが、いずれも`igraph`では名前が`cluster_`から始まる一連の関数で演算することができます。\n\n以下に`igraph`が備えているクラスター解析とkarate clubの分離後の2グループを比較したものを示します（一番左の`karate`が分離後のグループ）。グラフで左側に示したものほど`karate`との一致度が高くなっています。それぞれの関数には解析方法を調整するための引数が多数準備されているので、うまく調整することでより精度の高いクラスター解析を行うこともできます。したがって、必ずしも以下の例のように`cluster_fluid_communities`が優れているというわけではありません。時と場合により手法を使い分けるのが良いでしょう。\n\n\n::: {.cell filename='ネットワークのクラスターの演算'}\n\n```{.r .cell-code}\n# クラスターを計算\nkarate_clus <- data.frame(\n  vertex = as.character(1:34) |> factor(levels=1:34),\n  karate = if_else(karate_col == \"A\", 1, 2),\n  edge_betweenness = cluster_edge_betweenness(karate)$membership,\n  fast_greedy = cluster_fast_greedy(karate)$membership,\n  fluid_communities = cluster_fluid_communities(karate, no.of.communities = 2)$membership,\n  infomap = cluster_infomap(karate)$membership,\n  label_prop = cluster_label_prop(karate)$membership,\n  leading_eigen = cluster_leading_eigen(karate)$membership,\n  optimal = cluster_optimal(karate)$membership,\n  spinglass = cluster_spinglass(karate)$membership,\n  walktrap = cluster_walktrap(karate)$membership\n) \n\n# 同一クラスターのvertexを同じ色で表示する\nkarate_clus|> \n  pivot_longer(2:11, names_to = \"type\", values_to = \"cluster\") |> \n  mutate( # 見やすいように順番を入れ替え\n    type = \n      fct_relevel(\n        type, \n        c(\n          \"karate\", \n          \"fluid_communities\", \n          \"fast_greedy\", \n          \"leading_eigen\", \n          \"edge_betweenness\", \n          \"walktrap\", \"infomap\", \n          \"label_prop\", \n          \"optimal\", \n          \"spinglass\"))) |> \n  ggplot(aes(x = type, y = vertex, color = factor(cluster), fill = factor(cluster))) +\n  geom_tile()+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n#### クリーク（cliques）\n\n類似の解析方法として、クリーク（cliques、小集団）という、サブグループを見つけるための解析方法もあります。こちらはすべてのvertexをクラスターに所属させるようなものではなく、内部に存在する小集団（例えば、会社の一部署のメンバーなど）を求める手法となっています。`clique_num`関数はクリークに含まれる最大のvertex数を返す関数です。この`clique_num`の返り値を`cliques`関数の`min`引数に取ることで、クリークを比較的簡単に見つけることができます。下の例では、5人のクリークを2つ検出しています。\n\n\n::: {.cell filename='クリーク（clique）の演算'}\n\n```{.r .cell-code}\nclique_num(karate)\n## [1] 5\ncliques(karate, min = 5)\n## [[1]]\n## + 5/34 vertices, from a9d918d:\n## [1]  1  2  3  4 14\n## \n## [[2]]\n## + 5/34 vertices, from a9d918d:\n## [1] 1 2 3 4 8\n```\n:::\n\n\n### ネットワークの特徴を評価する\n\n#### edgeの密度（edge density）\n\nネットワーク解析では、ネットワーク全体を評価することもあります。代表的な特徴として、ネットワークの密度（edge density）があります。密度とは、現在のedgeの数の、そのvertex数で実現可能な最大のedgeの数に対する割合を指します。karateの例では、edgeの数は78ですが、34人のネットワークですべての人がedgeでつながっている場合、つまりedgeの最大数は`sum(33:1)`、つまり561となります。この78と561の比、`78/561`がedge densityとなります。\n\n`igraph`ではedge densityを`edge_density`関数で演算することができます。\n\n\n::: {.cell filename='edgeの密度（edge density）'}\n\n```{.r .cell-code}\nedge_density(karate) # edgeの密度\n## [1] 0.1390374\nE(karate) # 78 edge\n## + 78/78 edges from a9d918d:\n##  [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  1-- 7  1-- 8  1-- 9  1--11  1--12\n## [11]  1--13  1--14  1--18  1--20  1--22  1--32  2-- 3  2-- 4  2-- 8  2--14\n## [21]  2--18  2--20  2--22  2--31  3-- 4  3-- 8  3--28  3--29  3--33  3--10\n## [31]  3-- 9  3--14  4-- 8  4--13  4--14  5-- 7  5--11  6-- 7  6--11  6--17\n## [41]  7--17  9--31  9--33  9--34 10--34 14--34 15--33 15--34 16--33 16--34\n## [51] 19--33 19--34 20--34 21--33 21--34 23--33 23--34 24--26 24--28 24--33\n## [61] 24--34 24--30 25--26 25--28 25--32 26--32 27--30 27--34 28--34 29--32\n## [71] 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34\nE(make_full_graph(n=34)) # full graph(すべてのvertexがedgeでつながっている場合)：561 edge\n## + 561/561 edges from aaa4694:\n##   [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--10 1--11 1--12 1--13\n##  [13] 1--14 1--15 1--16 1--17 1--18 1--19 1--20 1--21 1--22 1--23 1--24 1--25\n##  [25] 1--26 1--27 1--28 1--29 1--30 1--31 1--32 1--33 1--34 2-- 3 2-- 4 2-- 5\n##  [37] 2-- 6 2-- 7 2-- 8 2-- 9 2--10 2--11 2--12 2--13 2--14 2--15 2--16 2--17\n##  [49] 2--18 2--19 2--20 2--21 2--22 2--23 2--24 2--25 2--26 2--27 2--28 2--29\n##  [61] 2--30 2--31 2--32 2--33 2--34 3-- 4 3-- 5 3-- 6 3-- 7 3-- 8 3-- 9 3--10\n##  [73] 3--11 3--12 3--13 3--14 3--15 3--16 3--17 3--18 3--19 3--20 3--21 3--22\n##  [85] 3--23 3--24 3--25 3--26 3--27 3--28 3--29 3--30 3--31 3--32 3--33 3--34\n##  [97] 4-- 5 4-- 6 4-- 7 4-- 8 4-- 9 4--10 4--11 4--12 4--13 4--14 4--15 4--16\n## [109] 4--17 4--18 4--19 4--20 4--21 4--22 4--23 4--24 4--25 4--26 4--27 4--28\n## + ... omitted several edges\n\n78 / 561 # edge_densityの結果と同じ\n## [1] 0.1390374\n```\n:::\n\n\n#### 次数の分布\n\n次数（degree）、つまりそれぞれのvertexから出ているedgeの数もネットワークの構造を反映するパラメータとなります。次数をヒストグラムとして表示すれば、edgeの分布やその偏りを図示することができます。`igraph`では、`degree_distribution`関数で次数の頻度を計算することができます。また、この関数の返り値を`hist`関数の引数とすることで、次数のヒストグラムを表示することができます。\n\n\n::: {.cell filename='次数の分布'}\n\n```{.r .cell-code}\ndegree_distribution(karate) |> hist() # 次数の分布\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n#### その他の評価尺度：vertexの距離・ネットワークの直径\n\n上記のedgeの密度や次数の分布に加えて、vertex間の平均距離や距離の分布、ネットワークの直径もネットワークの性質を表すパラメータとして用いられています。vertex間の距離の分布は`distance_table`関数で、ネットワークの直径は`girth`関数で計算することができます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_distance(karate) # vertex間の平均距離\n## [1] 2.4082\ndistance_table(karate) # vertex間の距離の要約\n## $res\n## [1]  78 265 137  73   8\n## \n## $unconnected\n## [1] 0\ngirth(karate) # ネットワークの直径\n## $girth\n## [1] 3\n## \n## $circle\n## + 3/34 vertices, from a9d918d:\n## [1] 2 1 3\n```\n:::\n\n\n\n### 経路を探索する\n\nネットワーク解析では、上記のような中心性やクラスター以外に、vertexからvertexまでの経路を探索することも目的となります。karate clubでは経路を調べる意味はあまりありませんが、例えば鉄道の路線図や飛行機の航路であれば、最短経路や複数の経路を求める必要があるでしょう。\n\n経路の探索の例として、路線図のデータを利用します。以下は奈良の鉄道（近鉄・JR）の路線のネットワーク（路線図）です。この路線図を利用して経路の探索を説明します。\n\n\n::: {.cell filename='奈良の路線図'}\n\n```{.r .cell-code}\n# 駅同士の接続（d）と駅（vt）のデータを読み込む\nd <- read.csv(\"./data/chapter33_nara_stations.csv\")\nvt <- read.csv(\"./data/chapter33_nara_stations_vertex_list.csv\")\n\n# dとvtからネットワークを作成\nnara_stations <- graph_from_data_frame(d, vertices = vt, directed = FALSE)\n\n# ネットワークの表示\nnara_stations\n## IGRAPH aab43aa UN-- 119 120 -- \n## + attr: name (v/c), lat (v/n), lon (v/n), linename (v/c), company\n## | (v/c), linename (e/c), company (e/c)\n## + edges from aab43aa (vertex names):\n##  [1] 奈良    --京終     京終    --帯解     帯解    --櫟本     櫟本    --天理    \n##  [5] 天理    --長柄     長柄    --柳本     柳本    --巻向     巻向    --三輪    \n##  [9] 三輪    --桜井     桜井    --香久山   香久山  --畝傍     金橋    --高田    \n## [13] 王寺    --畠田     畠田    --志都美   志都美  --香芝     香芝    --JR五位堂\n## [17] JR五位堂--高田     高田    --大和新庄 大和新庄--御所     御所    --玉手    \n## [21] 玉手    --掖上     掖上    --吉野口   吉野口  --北宇智   北宇智  --五条    \n## [25] 五条    --大和二見 王寺    --三郷     王寺    --法隆寺   法隆寺  --大和小泉\n## + ... omitted several edges\n\n# ネットワークを図にする\nplot(\n  nara_stations, \n  curved = TRUE, \n  layout = cbind(V(nara_stations)$lon, V(nara_stations)$lat), \n  vertex.label = NA, \n  vertex.size = 4)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n#### vertex間の距離行列\n\nvertex間の距離は行列の形で、`distances`関数を用いることで求めることができます。到達可能性が無いvertexとの間の距離は無限大（`Inf`）となります。`distances`関数には到着点（`to`引数）を設定することができます。\n\n奈良の鉄道路線の例であれば、田原本線は独立線になっている（王寺-新王寺、西田原本-田原本間は路線としては接続しておらず、別の駅）ので、奈良へは到達不可能（`Inf`）になっています。\n\n\n::: {.cell filename='vertex間の距離を調べる'}\n\n```{.r .cell-code}\ndistances(nara_stations)[1:5, 1:5]\n##      奈良 京終 帯解 櫟本 天理\n## 奈良    0    1    2    3    4\n## 京終    1    0    1    2    3\n## 帯解    2    1    0    1    2\n## 櫟本    3    2    1    0    1\n## 天理    4    3    2    1    0\ndistances(nara_stations, to=\"奈良\")[40:50,]\n##   信貴山下     新王寺     大輪田   佐味田川       池部       箸尾       但馬 \n##          5        Inf        Inf        Inf        Inf        Inf        Inf \n##       黒田     高の原       平城 大和西大寺 \n##        Inf         15         14         13\n```\n:::\n\n\n#### 最短距離の探索\n\n最短距離の探索には、`shortest_paths`関数、`all_shortest_paths`関数を用います。`shortest_paths`関数は最短距離を1つだけ、`all_shortest_paths`関数はすべての最短距離を返します。路線ではなかなか最短距離が複数存在する場合はありませんので、下の例では`all_shortest_paths`は一つの経路を返しています。\n\n\n::: {.cell filename='最短距離の探索'}\n\n```{.r .cell-code}\nshortest_paths(nara_stations, from = \"奈良\", to = \"吉野口\")\n## $vpath\n## $vpath[[1]]\n## + 15/119 vertices, named, from aab43aa:\n##  [1] 奈良     郡山     大和小泉 法隆寺   王寺     畠田     志都美   香芝    \n##  [9] JR五位堂 高田     大和新庄 御所     玉手     掖上     吉野口  \n## \n## \n## $epath\n## NULL\n## \n## $predecessors\n## NULL\n## \n## $inbound_edges\n## NULL\nall_shortest_paths(nara_stations, from = \"桜井\", to = \"吉野口\")\n## $vpaths\n## $vpaths[[1]]\n## + 13/119 vertices, named, from aab43aa:\n##  [1] 桜井       大福       耳成       大和八木   八木西口   畝傍御陵前\n##  [7] 橿原神宮前 岡寺       飛鳥       壺阪山     市尾       葛        \n## [13] 吉野口    \n## \n## \n## $epaths\n## $epaths[[1]]\n##  [1] 112 111 110  65  66  67  77  78  79  80  81  82\n## \n## \n## $nrgeo\n##   [1] 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0\n##  [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 2 1 1 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1\n##  [75] 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n## [112] 1 0 1 0 0 0 0 1\n## \n## $res\n## $res[[1]]\n## + 13/119 vertices, named, from aab43aa:\n##  [1] 桜井       大福       耳成       大和八木   八木西口   畝傍御陵前\n##  [7] 橿原神宮前 岡寺       飛鳥       壺阪山     市尾       葛        \n## [13] 吉野口\n```\n:::\n\n\n距離行列・最短距離の探索には、幅優先探索（breadth-first search）や深さ優先探索（depth-first search）などのアルゴリズムが用いられています。また、edgeの特性に`weight`を設定していた場合には、`weight`を考慮した評価を行うこともできます。\n\n### その他の分析について\n\nネットワーク解析には、上記に示した解析方法に加えて、ランダムなグラフの作成、グラフの類似性や検定を用いたネットワーク解析などがあります。\n\n`igraph`ではランダムなグラフの作成には関数名が`sample_`から始まる一連の関数が、一定の構造を持つグラフの作成には`make_ring`や`make_star`関数などの関数が備わっています。ランダムなグラフの作成では、それぞれの関数に設定されたアルゴリズムに従いネットワークが作成されます。また、`make_`関数でのグラフ作成では、一定の構造を持つグラフが作成されるため、グラフ作成時の基礎構造を準備するのに便利です。\n\n\n::: {.cell filename='ランダム・一定の構造を持つグラフの作成'}\n\n```{.r .cell-code}\ng <- sample_tree(n = 30) # ランダムな木構造型ネットワークを作成\nplot(g, layout=layout_as_tree(g))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\nとは言っても`igraph`に登録されている`sample_`関数だけでも10種以上あり、それぞれのアルゴリズムも複雑です。また、グラフの類似性や検定を用いたネットワーク解析に関しては`igraph`のみでは対応できず、別のライブラリ（`statnet`、`sna`）が必要となります。上記のネットワーク解析に関しても詳細な説明は加えていませんので、詳細を理解したい方は教科書（[Rで学ぶデータサイエンス ネットワーク分析](https://www.amazon.co.jp/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E5%88%86%E6%9E%90-%E7%AC%AC2%E7%89%88-R%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-%E9%88%B4%E6%9C%A8-%E5%8A%AA/dp/4320113152)）を一読されることをおすすめいたします。\n\n以下に`sample_`と`make_`関数の一覧を示します。\n\n:::{.panel-tabset}\n\n## sample_bipartite\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ランダムな2部グラフを作成する\nsample_bipartite(10, 10, p = 0.3) |> plot(layout = layout_as_bipartite) # pはedgeの頻度\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n## sample_gnp\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngr <- sample_gnp(20, p = 0.3) # Erdos-Renyi modelに従い作成（20はvertex数、pはedgeの頻度）\ngr |> plot() \n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n## sample_correlated_gnp\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngr |>  sample_correlated_gnp(corr = 0.2) |> plot() # edgeをランダムに付け加え・取り除く\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n## sample_degseq\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_degseq(rep(4, 10)) |> plot() # nodeのdegree（次数、この例では4）を指定したグラフ\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n## sample_dot_product\n\n\n::: {.cell}\n\n```{.r .cell-code}\nma <- matrix(runif(90, 0, 0.5), nrow = 9) # matrixを引数に取る\nsample_dot_product(ma) |> plot() # 各列がvertexになる\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n## sample_fitness\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_fitness(10, runif(10, 0.1, 0.5)) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n## sample_fitness_pl\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_fitness_pl(10, 15, exponent.out = 2.5) |> plot() # vertexの数、edgeの数、degreeの分布を指定する引数\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n## sample_gnm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_gnm(10, 15) |> plot() # vertexの数、nodeの数を指定\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n## sample_grg\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_grg(10, 0.85) |> plot() # vertexの数、radiusを指定\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\n## sample_growing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_growing(10, m = 3) |> plot() # vertexの数、ランダムに追加するedgeの数\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n## sample_islands\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_islands(5, 3, 0.3, 5) |> plot() # gnpでのvertex3つのグラフを5つつないだもの\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n\n## sample_k_regular\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_k_regular(10, 3) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n## sample_last_cit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_last_cit(10, agebins = 5) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n## sample_pa\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_pa(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n## sample_pa_age\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_pa_age(10, 3, -0.5) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n## sample_pref\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_pref(30, 10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\n## sample_sbm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_sbm(10, pref.matrix = matrix(runif(9, 0.1, 0.3), nrow=3), block.sizes = c(3, 3, 4), directed = TRUE) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n\n## sample_smallworld\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_smallworld(dim = 2, size = 5, nei = 1, p = 0.2) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-67-1.png){width=672}\n:::\n:::\n\n\n## sample_traits_callaway\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_traits_callaway(10, types = 3, edge.per.step = 3) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\n## sample_tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_tree <- sample_tree(20)\ng_tree |> plot(layout = layout_as_tree(g_tree))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-69-1.png){width=672}\n:::\n:::\n\n\n:::\n\n:::{.panel-tabset}\n\n## make_star\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_star(n = 10, mode = \"undirected\") |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-70-1.png){width=672}\n:::\n:::\n\n\n## make_ring\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_ring(n = 10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n## make_chordal_ring\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_chordal_ring(12, w = matrix(c(2, 4, 6, 8, 10, 12), nrow = 2)) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-72-1.png){width=672}\n:::\n:::\n\n\n## make_empty_graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_empty_graph(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n## make_full_graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_full_graph(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n## make_lattice\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_lattice(c(3, 3, 3)) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n## make_tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_tree(16) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 2部グラフ\n\n**2部グラフ（Bipartite graph）**とは、vertexが2つのタイプからなるグラフのことです。この2つのタイプとは、例えば人物と所属するクラブのような、互いに関係性はあるけれども同じタイプ同士のvertex間のつながりは無視できるようなものになります。\n\n以下に2部グラフの例を示します。2部グラフを作成する場合、専用の関数（`make_bipartite_graph`）がありますが、この関数を用いるよりはedge listや`data.frame`からグラフを作成した後、vertexの`type`という`attribute`に論理型で2部のどちらであるか（上の例では人物を`TRUE`、所属するクラブを`FALSE`で指定）を指定する方が作成しやすいと思います。\n\n\n::: {.cell filename='2部グラフ'}\n\n```{.r .cell-code}\nset.seed(0)\n# edgeを示したデータフレームを作成する\nd_edge <- data.frame(\n  club = sample(c(\"野球\", \"サッカー\", \"バスケットボール\", \"バレーボール\"), 52, replace = TRUE),\n  person = c(LETTERS, LETTERS)\n) |> distinct()\n\n# データフレームから2部グラフを作成する\ng <- graph_from_data_frame(d_edge, directed = F)\n\n# typeのattributeを追加する（TRUE、FALSEで2部のどちらであるかを指定する）\nV(g)$type <- V(g)$name %in% d_edge[,2]\nV(g)$type\n##  [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n## [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n# 2部グラフ（UN-B、BがBipartiteの意味）になっている\ng\n## IGRAPH abaaac0 UN-B 30 48 -- \n## + attr: name (v/c), type (v/l)\n## + edges from abaaac0 (vertex names):\n##  [1] サッカー        --A 野球            --B バレーボール    --C\n##  [4] バスケットボール--D 野球            --E サッカー        --F\n##  [7] 野球            --G バスケットボール--H バスケットボール--I\n## [10] サッカー        --J サッカー        --K バスケットボール--L\n## [13] バスケットボール--M 野球            --N 野球            --O\n## [16] 野球            --P サッカー        --Q サッカー        --R\n## [19] サッカー        --S サッカー        --T バスケットボール--U\n## [22] 野球            --V バスケットボール--W 野球            --X\n## + ... omitted several edges\n\ng |> plot(layout = layout_as_bipartite, vertex.color = c(\"orange\", \"lightblue\")[V(g)$type + 1], vertex.shape = c(\"square\", \"circle\")[V(g)$type + 1])\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n## tidygraph\n\nここまで説明してきた`igraph`は非常に多機能でよくできたパッケージではありますが、関数名や引数名があまり一定ではなく、使用する際に関数名や引数名をチェックしないとうまく使うことができません。引数の指定方法も多岐に渡っており、統一した手法でグラフを取り扱うことができず、使いにくさがあります。\n\nこのような問題を解決するためのライブラリが`tidygraph`パッケージです。`tidygraph`パッケージは基本的に`tibble`を用いてグラフを作成し、`tidyverse`（特に`dplyr`）とパイプ演算子を用いてグラフを編集することを目的として構成されています。\n\nとは言え、`igraph`が非常に機能豊富なパッケージであったのと同様に、`tidygraph`も機能豊富で、利用の難易度は高めです。また、解説文等が少ないため、使い方を理解するのが難しい関数もあります。`dplyr::mutate`関数内以外では使えない関数がたくさんあるなど、使い方もやや複雑です。\n\n### tidygraphの基礎とグラフの作成\n\n`tidygraph`ではグラフはnodeとedgeで表されます。`igraph`とは異なり、nodeがvertexと呼ばれることはありません。\n\n`tidygraph`では、`igraph`と同じく、データフレームからグラフを作成します。また、`igraph`で作成したグラフオブジェクトやedge vector、adjacency matrixからもグラフを作成することができます。データフレームからグラフを作成する場合には`tbl_graph`関数、その他のオブジェクトや`igraph`のグラフから`tidygraph`のグラフを作成する場合には`as_tbl_graph`関数を用います。\n\n作成したグラフのクラスは`igraph`と`tbl_graph`となっており、表示するとnodeとedgeのデータフレームが示されます。`igraph`ではvertexに指定するデータフレームの2列目以降、edgeに指定するデータフレームの3列目以降はattributeとして登録されますが、`tbl_graph`ではnodeとedgeのtibbleとして表示されます。`tbl_graph`は`igraph`のオブジェクトでもあるので、`igraph`と同じように`attributes`としてtibbleの列を呼び出すこともできます。\n\n\n::: {.cell filename='tbl_graphを作成する'}\n\n```{.r .cell-code}\npacman::p_load(tidygraph)\n\nd <- read.csv(\"./data/chapter33_nara_stations.csv\") # edgeのデータフレーム\nvt <- read.csv(\"./data/chapter33_nara_stations_vertex_list.csv\") # nodeのデータフレーム\n\ncolnames(vt) <- c(\"name\", \"lat\", \"lon\", \"linename\", \"company\") # vertex名はname列から取り込まれる\ncolnames(d) <- c(\"from\", \"to\", \"linename\", \"company\") # edgeはfrom→toになる\n\n# tbl_graphをデータフレームから作成する\ng <- tbl_graph(nodes = vt, edges = d, directed = FALSE) \n\n# igraphオブジェクトをtbl_graphに変換する\nas_tbl_graph(karate)\n## # A tbl_graph: 34 nodes and 78 edges\n## #\n## # An undirected simple graph with 1 component\n## #\n## # Node Data: 34 × 0 (active)\n## #\n## # Edge Data: 78 × 2\n##    from    to\n##   <int> <int>\n## 1     1     2\n## 2     1     3\n## 3     1     4\n## # ℹ 75 more rows\n\nclass(g) # クラスはtbl_graph\n## [1] \"tbl_graph\" \"igraph\"\nV(g)$lat # igraphとして取り扱い、attributeとして2列目以降を呼び出すこともできる\n##   [1] 34.68078 34.66998 34.64340 34.62101 34.60120 34.57420 34.55911 34.54543\n##   [9] 34.52719 34.51347 34.51078 34.50962 34.59772 34.57763 34.56155 34.54335\n##  [17] 34.52765 34.51627 34.48867 34.46466 34.45834 34.45236 34.42085 34.38266\n##  [25] 34.35572 34.58930 34.60150 34.62228 34.64797 34.69332 34.68555 34.67593\n##  [33] 34.66550 34.65655 34.64814 34.64007 34.62917 34.61748 34.60600 34.60099\n##  [41] 34.59775 34.58913 34.58517 34.57857 34.57032 34.56935 34.56830 34.72374\n##  [49] 34.70172 34.69391 34.68151 34.67054 34.65923 34.64620 34.62042 34.60662\n##  [57] 34.59827 34.58458 34.57194 34.55330 34.54179 34.52551 34.51320 34.50925\n##  [65] 34.49337 34.53911 34.53162 34.51647 34.51115 34.50855 34.50694 34.49796\n##  [73] 34.49332 34.48612 34.48344 34.47411 34.46487 34.44984 34.44186 34.43160\n##  [81] 34.40729 34.39511 34.38841 34.38366 34.38612 34.39027 34.39549 34.39022\n##  [89] 34.48940 34.47598 34.69171 34.69411 34.69694 34.69816 34.68543 34.55387\n##  [97] 34.54635 34.54144 34.53485 34.52618 34.51961 34.52069 34.51978 34.51253\n## [105] 34.51292 34.51614 34.52662 34.52975 34.56603 34.60225 34.60100 34.50834\n## [113] 34.34589 34.71070 34.55366 34.37661 34.46474 34.68436 34.57828\n```\n:::\n\n\n### node/edgeをactivateする\n\n`igraph`ではnode（vertex）やedgeを呼び出す場合、`V`関数と`E`関数を用いますが、`tidygraph`ではnode・edgeの呼び出しに`activate`関数を用います。`activate`関数はパイプ演算子を用いて呼び出すことが想定されている関数で、パイプ演算子でつないでグラフに適用します。第2引数として`nodes`と`edges`を用います。`activate`関数をグラフに適用すると、`node`・`edge`のtibbleに「activate」と表示されます。この状態でさらにパイプ演算子をつなぐと、activateされている側のtibbleを編集することができます。\n\nnode・edgeのどちらがactiveであるかを調べる場合には、`active`関数を用います。\n\n\n::: {.cell filename='activate関数'}\n\n```{.r .cell-code}\n# node・edgeをactivateする\ng |> active() # nodeがactiveになっている\n## [1] \"nodes\"\ng |> activate(edges) # edgeをactiveにする（nodeはactiveではなくなる）\n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Edge Data: 120 × 4 (active)\n##     from    to linename       company\n##    <int> <int> <chr>          <chr>  \n##  1     1     2 万葉まほろば線 JR     \n##  2     2     3 万葉まほろば線 JR     \n##  3     3     4 万葉まほろば線 JR     \n##  4     4     5 万葉まほろば線 JR     \n##  5     5     6 万葉まほろば線 JR     \n##  6     6     7 万葉まほろば線 JR     \n##  7     7     8 万葉まほろば線 JR     \n##  8     8     9 万葉まほろば線 JR     \n##  9     9    10 万葉まほろば線 JR     \n## 10    10    11 万葉まほろば線 JR     \n## # ℹ 110 more rows\n## #\n## # Node Data: 119 × 5\n##   name    lat   lon linename       company\n##   <chr> <dbl> <dbl> <chr>          <chr>  \n## 1 奈良   34.7  136. 万葉まほろば線 JR     \n## 2 京終   34.7  136. 万葉まほろば線 JR     \n## 3 帯解   34.6  136. 万葉まほろば線 JR     \n## # ℹ 116 more rows\ng |> activate(edges) |> active() # edgeがactiveになっている\n## [1] \"edges\"\n```\n:::\n\n\n### focus\n\n`tidygraph`では、基本的に`activate`でnode・edgeのいずれかを選択した後、`mutate`など`dplyr`の関数を用いてグラフの要素であるtibbleを編集していきます。\n\n`mutate`などで編集を行うために、行を選択するための関数が`focus`です。`focus`関数の引数には論理型を用い、`TRUE`の行のみを`dplyr`の関数での編集の対象とすることができます。以下の例では、nodeのはじめの5行を選択し、その行だけを`mutate`での演算の対象としています。\n\n\n::: {.cell filename='focusで行を選択して編集する'}\n\n```{.r .cell-code}\ng |> \n  activate(nodes) |> \n  focus(c(T, T, T, T, T, rep(F, 114))) |> # 始めの5つのnodeにfocusする\n  mutate(lat = lat - 50) # 初めの5つのnodeのlatから50を引く\n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Focused on 5 nodes\n## # Node Data: 119 × 5 (active)\n##    name    lat   lon linename       company\n##    <chr> <dbl> <dbl> <chr>          <chr>  \n##  1 奈良  -15.3  136. 万葉まほろば線 JR     \n##  2 京終  -15.3  136. 万葉まほろば線 JR     \n##  3 帯解  -15.4  136. 万葉まほろば線 JR     \n##  4 櫟本  -15.4  136. 万葉まほろば線 JR     \n##  5 天理  -15.4  136. 万葉まほろば線 JR     \n##  6 長柄   34.6  136. 万葉まほろば線 JR     \n##  7 柳本   34.6  136. 万葉まほろば線 JR     \n##  8 巻向   34.5  136. 万葉まほろば線 JR     \n##  9 三輪   34.5  136. 万葉まほろば線 JR     \n## 10 桜井   34.5  136. 万葉まほろば線 JR     \n## # ℹ 109 more rows\n## #\n## # Edge Data: 120 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 117 more rows\n```\n:::\n\n\n### morph・unmorphとcrystalise\n\n上記の`igraph`で説明したクラスター計算では、nodeを各クラスターに分離することができます。ただし、分離したクラスターごとに何らかの演算をしたい場合や、nodeのグループごとに演算を行いたい場合、`igraph`には簡単に計算する方法はありません。`tidygraph`では、このようなグループごとの演算を`morph`関数を用いて簡単に行うことができます。\n\n`morph`関数はnode・edgeのtibbleを一時的に変換するための関数です。`tidygraph`の開発者（Dr. \nThomas Lin Pedersen、`patchwork`や`gganimate`の開発者）は、この`morph`/`unmorph`/`crystalise`を[`tidygraph`の最も代表的な関数の一つ](https://www.data-imaginist.com/posts/2018-02-12-tidygraph-1-1-a-tidy-hope/index.html)だと考えているようで、使い方を理解すれば非常に便利な関数群です。\n\n以下の例では`group_infomap`関数（`igraph`の`cluster_infomap`関数のwrapper）でnodeをクラスター分けし、`morph`関数内ではそのクラスター（`group`）に従い`to_split`関数でtibbleを一時的に`nest`しています（`tidyr::nest`に関しては[16章](./chapter16.html)を参照。複数の要素をtibbleの「セル」として設定する方法のこと）。\n\n`nest`したtibbleに対して`graph_diameter`関数（`igraph`の`diameter`関数のwrapper）と`centrality_degree`関数（`igraph`の`degree`関数のwrapper）を適用することで、クラスターごとのネットワークの直径、nodeの中心性を演算して行に追加しています。ただし、このままではtibbleが`nest`されたままです。\n\nこの`nest`されたtibbleをもとに戻すのが`unmorph`関数です。`unmorph`関数を適用することで、nodeのtibbleの`nest`が解除される、つまり`unnest`されて元のグラフに戻ります。\n\nこのように、`morph`/`unmorph`を用いることで、node・edgeのグループごとの演算を簡単に行うことができます。`morph`でのグループ分けのための関数には`to_subgraph`関数（`dplyr::filter`に近い演算を行うもの）や`to_components`関数などが準備されています。\n\n\n::: {.cell filename='morph・unmorph関数'}\n\n```{.r .cell-code}\n# サブグループ内での演算を行うときにはmorph/unmorphを用いる\n# morph内の関数はto_から始まる関数群を用いる\ng |> \n  activate(nodes) |> # nodeをactiveにして\n  mutate(group = group_infomap()) |> # クラスターに分けて\n  morph(to_split, group) |> # グループで一時的に分割・ネストして\n  mutate(\n    group_diameter = graph_diameter(), \n    centrality = centrality_degree()) |> # グループごとに直径を計算して\n  unmorph() # morphをもとに戻す\n## Splitting by nodes\n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Node Data: 119 × 8 (active)\n##    name    lat   lon linename       company group group_diameter centrality\n##    <chr> <dbl> <dbl> <chr>          <chr>   <int>          <dbl>      <dbl>\n##  1 奈良   34.7  136. 万葉まほろば線 JR          2              5          3\n##  2 京終   34.7  136. 万葉まほろば線 JR          2              5          2\n##  3 帯解   34.6  136. 万葉まほろば線 JR          2              5          1\n##  4 櫟本   34.6  136. 万葉まほろば線 JR         11              4          1\n##  5 天理   34.6  136. 万葉まほろば線 JR         11              4          2\n##  6 長柄   34.6  136. 万葉まほろば線 JR          3              6          1\n##  7 柳本   34.6  136. 万葉まほろば線 JR          3              6          2\n##  8 巻向   34.5  136. 万葉まほろば線 JR          3              6          2\n##  9 三輪   34.5  136. 万葉まほろば線 JR          3              6          2\n## 10 桜井   34.5  136. 万葉まほろば線 JR          3              6          2\n## # ℹ 109 more rows\n## #\n## # Edge Data: 120 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 117 more rows\n```\n:::\n\n\n`morph`で変形したグラフをそのまま固定するための関数が`crystallise`関数です。`crystallise`関数を用いると、`morph`で指定した変形の状態などが固定され、tibbleとしてデータが返ってきます。\n\n\n::: {.cell filename='crystallise関数'}\n\n```{.r .cell-code}\ng |> \n  mutate(group = group_infomap()) |> # クラスターに分けて\n  morph(to_split, group) |> # グループで一時的に分割して\n  crystallise() # crystalliseして固定してしまう\n## Splitting by nodes\n## # A tibble: 22 × 2\n##    name      graph     \n##    <chr>     <list>    \n##  1 group: 1  <tbl_grph>\n##  2 group: 2  <tbl_grph>\n##  3 group: 3  <tbl_grph>\n##  4 group: 4  <tbl_grph>\n##  5 group: 5  <tbl_grph>\n##  6 group: 6  <tbl_grph>\n##  7 group: 7  <tbl_grph>\n##  8 group: 8  <tbl_grph>\n##  9 group: 9  <tbl_grph>\n## 10 group: 10 <tbl_grph>\n## # ℹ 12 more rows\n\ng |> \n  mutate(group = group_infomap()) |> \n  morph(to_split, group) |> \n  crystallise() |> \n  class() # classからgraph関係のものがなくなり、tibbleになっている\n## Splitting by nodes\n## [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n\n### 中心性\n\n`igraph`と同様に、`tidygraph`にも中心性を評価する関数群（`centrality_`から始まる関数）が設定されています。`igraph`との違いは、これらの`centrality_`関数群は単独で呼び出すことができず、nodeをactiveにした上で`mutate`関数の中で呼び出すような使い方をする点です。単独で使用するとエラーが返ってきます。\n\n`tidygraph`にはこの`centrality_`関数が30個以上も設定されています（`igraph`の中心性演算の関数に加えて、`netrankr`[@netrankr_bib]パッケージから方法を引用しています）。\n\n\n::: {.cell filename='中心性：centrality_関数'}\n\n```{.r .cell-code}\ncentrality_degree(g) # 直接呼び出せない\n## Error in `private$check()`:\n## ! This function should not be called directly\n\n# nodeをactiveにしてからmutateで呼び出す\ng |> \n  activate(nodes) |> \n  mutate(degree_cent = centrality_degree()) \n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Node Data: 119 × 6 (active)\n##    name    lat   lon linename       company degree_cent\n##    <chr> <dbl> <dbl> <chr>          <chr>         <dbl>\n##  1 奈良   34.7  136. 万葉まほろば線 JR                3\n##  2 京終   34.7  136. 万葉まほろば線 JR                2\n##  3 帯解   34.6  136. 万葉まほろば線 JR                2\n##  4 櫟本   34.6  136. 万葉まほろば線 JR                2\n##  5 天理   34.6  136. 万葉まほろば線 JR                3\n##  6 長柄   34.6  136. 万葉まほろば線 JR                2\n##  7 柳本   34.6  136. 万葉まほろば線 JR                2\n##  8 巻向   34.5  136. 万葉まほろば線 JR                2\n##  9 三輪   34.5  136. 万葉まほろば線 JR                2\n## 10 桜井   34.5  136. 万葉まほろば線 JR                4\n## # ℹ 109 more rows\n## #\n## # Edge Data: 120 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 117 more rows\n\n# 4種のcentralityを同時に演算する\ng |> \n  activate(nodes) |> \n  mutate(\n    cent_degr = centrality_degree(),\n    cent_betw = centrality_betweenness(),\n    cent_clos = centrality_closeness(),\n    cent_eigv = centrality_eigen()) \n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Node Data: 119 × 9 (active)\n##    name    lat   lon linename    company cent_degr cent_betw cent_clos cent_eigv\n##    <chr> <dbl> <dbl> <chr>       <chr>       <dbl>     <dbl>     <dbl>     <dbl>\n##  1 奈良   34.7  136. 万葉まほろ… JR              3      882   0.000728    0.0122\n##  2 京終   34.7  136. 万葉まほろ… JR              2      862   0.000741    0.0166\n##  3 帯解   34.6  136. 万葉まほろ… JR              2      887   0.000755    0.0272\n##  4 櫟本   34.6  136. 万葉まほろ… JR              2      914   0.000770    0.0480\n##  5 天理   34.6  136. 万葉まほろ… JR              3     1244.  0.000796    0.0866\n##  6 長柄   34.6  136. 万葉まほろ… JR              2      904.  0.000798    0.102 \n##  7 柳本   34.6  136. 万葉まほろ… JR              2      910.  0.000802    0.156 \n##  8 巻向   34.5  136. 万葉まほろ… JR              2      918.  0.000807    0.268 \n##  9 三輪   34.5  136. 万葉まほろ… JR              2      928.  0.000814    0.480 \n## 10 桜井   34.5  136. 万葉まほろ… JR              4     1340   0.000822    0.870 \n## # ℹ 109 more rows\n## #\n## # Edge Data: 120 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 117 more rows\n```\n:::\n\n\n### node・edge・graphの評価\n\n`tidygraph`には、`igraph`と同様にnode、edge、graphを評価するための関数群が設定されています。いずれの関数も単独で呼び出すことはできず、`mutate`関数内で呼び出して用いることが前提とされています。\n\n以下にnodeの評価に関わる関数を示します。上記の中心性もこのnodeの評価に関わる関数の一部となります。\n\n\n::: {.cell filename='nodeの評価'}\n\n```{.r .cell-code}\n# 単独では呼び出せない\nnode_efficiency(g)\n## Error in `private$check()`:\n## ! This function should not be called directly\n\ng |> \n  activate(nodes) |> \n  mutate(\n    node_eff = node_efficiency(), # nodeの効率（igraph::local_efficiency）\n    node_core = node_coreness(), # k-core分解（igraph::coreness）\n    node_clos = node_closeness_impact()) # nodeを取り除いたときのclosenessへの影響の大きさ\n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Node Data: 119 × 8 (active)\n##    name    lat   lon linename       company node_eff node_core node_clos\n##    <chr> <dbl> <dbl> <chr>          <chr>      <dbl>     <dbl>     <dbl>\n##  1 奈良   34.7  136. 万葉まほろば線 JR        0.0108         2     -60.3\n##  2 京終   34.7  136. 万葉まほろば線 JR        0.0323         2     -47.1\n##  3 帯解   34.6  136. 万葉まほろば線 JR        0.0323         2     -49.9\n##  4 櫟本   34.6  136. 万葉まほろば線 JR        0.0323         2     -54.4\n##  5 天理   34.6  136. 万葉まほろば線 JR        0.0417         2     -75.4\n##  6 長柄   34.6  136. 万葉まほろば線 JR        0.0625         2     -34.2\n##  7 柳本   34.6  136. 万葉まほろば線 JR        0.0625         2     -32.2\n##  8 巻向   34.5  136. 万葉まほろば線 JR        0.0625         2     -32.7\n##  9 三輪   34.5  136. 万葉まほろば線 JR        0.0625         2     -35.8\n## 10 桜井   34.5  136. 万葉まほろば線 JR        0.0104         2    -152. \n## # ℹ 109 more rows\n## #\n## # Edge Data: 120 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 117 more rows\n```\n:::\n\n\nedgeの評価では、edgeの性質を論理型で返すような関数が主に設定されています。edgeの評価に関する関数はそもそも引数にedgeのtibbleを取るように設定されていません。nodeの場合と同じく、edgeの評価の関数も`mutate`関数内で用いることが想定されています。\n\n\n::: {.cell filename='edgeの評価'}\n\n```{.r .cell-code}\ng |> \n  activate(edges) |> \n  edge_is_multiple() # そもそも引数として設定できない\n## Error in edge_is_multiple(activate(g, edges)): unused argument (activate(g, edges))\n\ng |> \n  activate(edges) |> \n  mutate(\n    multiple = edge_is_multiple(), # 平行するedgeがあるか\n    bridge = edge_is_bridge() # edgeが切断されるとグラフが分離されるか\n  )\n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Edge Data: 120 × 6 (active)\n##     from    to linename       company multiple bridge\n##    <int> <int> <chr>          <chr>   <lgl>    <lgl> \n##  1     1     2 万葉まほろば線 JR      FALSE    FALSE \n##  2     2     3 万葉まほろば線 JR      FALSE    FALSE \n##  3     3     4 万葉まほろば線 JR      FALSE    FALSE \n##  4     4     5 万葉まほろば線 JR      FALSE    FALSE \n##  5     5     6 万葉まほろば線 JR      FALSE    FALSE \n##  6     6     7 万葉まほろば線 JR      FALSE    FALSE \n##  7     7     8 万葉まほろば線 JR      FALSE    FALSE \n##  8     8     9 万葉まほろば線 JR      FALSE    FALSE \n##  9     9    10 万葉まほろば線 JR      FALSE    FALSE \n## 10    10    11 万葉まほろば線 JR      FALSE    TRUE  \n## # ℹ 110 more rows\n## #\n## # Node Data: 119 × 5\n##   name    lat   lon linename       company\n##   <chr> <dbl> <dbl> <chr>          <chr>  \n## 1 奈良   34.7  136. 万葉まほろば線 JR     \n## 2 京終   34.7  136. 万葉まほろば線 JR     \n## 3 帯解   34.6  136. 万葉まほろば線 JR     \n## # ℹ 116 more rows\n```\n:::\n\n\ngraphの評価に関する関数は`igraph`に設定されている関数群とほぼ同じですが、やはり直接呼び出して用いることはできません。評価の意味に関しては以下を参照して下さい。\n\n[GeekforGeeksのネットワークに関するページ](https://www.geeksforgeeks.org/graph-measurements-length-distance-diameter-eccentricity-radius-center/?ref=lbp)\n\n[グラフ理論講義ノート#8 井上純一先生（北海道大学 情報科学研究科）](chrome-extension://efaidnbmnnnibpcajpcglclefindmkaj/https://ocw.hokudai.ac.jp/wp-content/uploads/2016/01/GraphTheory-2007-Note-08.pdf)\n\n\n::: {.cell filename='graphの評価'}\n\n```{.r .cell-code}\ng |> graph_diameter() # 直接呼び出せない\n## Error in `private$check()`:\n## ! This function should not be called directly\n\ng |> \n  activate(nodes) |> \n  mutate(\n    g_diameter = graph_diameter(), # グラフの直径（最大の経路長）\n    g_girth = graph_girth(), # グラフの内周（最小の閉路長）\n    g_radius = graph_radius(), # グラフの離心率（igraph::radius）\n    g_size = graph_size() # グラフのedgeの数\n  )\n## # A tbl_graph: 119 nodes and 120 edges\n## #\n## # An undirected simple graph with 2 components\n## #\n## # Node Data: 119 × 9 (active)\n##    name    lat   lon linename       company g_diameter g_girth g_radius g_size\n##    <chr> <dbl> <dbl> <chr>          <chr>        <dbl>   <dbl>    <dbl>  <dbl>\n##  1 奈良   34.7  136. 万葉まほろば線 JR              33      18        4    120\n##  2 京終   34.7  136. 万葉まほろば線 JR              33      18        4    120\n##  3 帯解   34.6  136. 万葉まほろば線 JR              33      18        4    120\n##  4 櫟本   34.6  136. 万葉まほろば線 JR              33      18        4    120\n##  5 天理   34.6  136. 万葉まほろば線 JR              33      18        4    120\n##  6 長柄   34.6  136. 万葉まほろば線 JR              33      18        4    120\n##  7 柳本   34.6  136. 万葉まほろば線 JR              33      18        4    120\n##  8 巻向   34.5  136. 万葉まほろば線 JR              33      18        4    120\n##  9 三輪   34.5  136. 万葉まほろば線 JR              33      18        4    120\n## 10 桜井   34.5  136. 万葉まほろば線 JR              33      18        4    120\n## # ℹ 109 more rows\n## #\n## # Edge Data: 120 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 117 more rows\n```\n:::\n\n\n### create_関数とplay_関数\n\n`igraph`では`make_`関数（`make_ring`関数や`make_star`関数など）で形状を指定したグラフを、`sample_`関数（`sample_tree`関数や`sample_gnp`関数など）でアルゴリズムに従ったランダムなグラフを作成することができます。この`igraph`の`make_`関数と`sample_`関数に当たるものが`tidygraph`の`create_`関数と`play_`関数です。出力がtbl_graphであることと、引数の順序・名前以外に`igraph`の関数群と大きな差は無いので、`igraph`の関数に慣れているのであれば`igraph`の関数を用いてグラフを作成した後で`as_tbl_graph`関数を用いて`tbl_graph`に変換してもよいでしょう。\n\n:::{.panel-tabset}\n\n## create_ring\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_ring(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-87-1.png){width=672}\n:::\n:::\n\n\n## create_chordal_ring\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_chordal_ring(10, 2) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-88-1.png){width=672}\n:::\n:::\n\n\n## create_complete\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_complete(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-89-1.png){width=672}\n:::\n:::\n\n\n## create_empty\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_empty(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-90-1.png){width=672}\n:::\n:::\n\n\n## create_tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(10, 4) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-91-1.png){width=672}\n:::\n:::\n\n\n## create_star\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_star(10) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-92-1.png){width=672}\n:::\n:::\n\n\n## play_gnm\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_gnm(10, 20) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-93-1.png){width=672}\n:::\n:::\n\n\n## play_gnp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_gnp(10, 0.25) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-94-1.png){width=672}\n:::\n:::\n\n\n## play_geometry\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_geometry(10, 3) |> plot()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-95-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### map_関数群\n\n`purrr`の`map`関数と同様に、node、edgeのtibbleに関数を適用して演算を行う関数が`map_`関数群です。\n\n`map_`関数群には大きく分けるとbfs（breath first search）を演算に用いるもの（`map_bfs_`関数）と、dfs（depth first search）を用いるもの（`map_dfs_`関数）があります。\n\n`map_`関数も単独では呼び出すことができず、`mutate`関数内で呼び出すことが想定された関数で、`map_`関数内で引数（`.f`引数）として設定する関数は無名関数のみとなります。この`.f`関数で指定する無名関数については引数が定められていて（`node`, `rank`, `path`など）、かなり使い方が複雑です。また、bfs、dfsで到達不可能なパスが存在すると演算ができなくなります。\n\n以下の例では、bfsによってJR奈良駅から他の駅までの到達に必要な距離を演算しています。`value`に駅間の距離や運賃などを正確に設定すれば、`map_bfs_dbl`関数を用いて到達距離を計算することができます。\n\n\n::: {.cell filename='map_関数'}\n\n```{.r .cell-code}\ng |> \n  # 離れているとbfsで探索できないので、田原本線をつなげる\n  bind_edges(data.frame(from = \"田原本\", to = \"西田原本\", linename = \"田原本線\", company = \"近鉄\")) |> \n  mutate(value = rep(1, 119)) |>  # 駅間を1としている\n  mutate(value_acc = map_bfs_dbl(1, .f = function(node, path, ...){ \n    sum(.N()$value[c(node, path$node)]) # searchの順に値を足していく（各nodeまでの距離を反映）\n  }))\n## # A tbl_graph: 119 nodes and 121 edges\n## #\n## # An undirected simple graph with 1 component\n## #\n## # Node Data: 119 × 7 (active)\n##    name    lat   lon linename       company value value_acc\n##    <chr> <dbl> <dbl> <chr>          <chr>   <dbl>     <dbl>\n##  1 奈良   34.7  136. 万葉まほろば線 JR          1         1\n##  2 京終   34.7  136. 万葉まほろば線 JR          1         2\n##  3 帯解   34.6  136. 万葉まほろば線 JR          1         3\n##  4 櫟本   34.6  136. 万葉まほろば線 JR          1         4\n##  5 天理   34.6  136. 万葉まほろば線 JR          1         5\n##  6 長柄   34.6  136. 万葉まほろば線 JR          1         6\n##  7 柳本   34.6  136. 万葉まほろば線 JR          1         7\n##  8 巻向   34.5  136. 万葉まほろば線 JR          1         8\n##  9 三輪   34.5  136. 万葉まほろば線 JR          1         9\n## 10 桜井   34.5  136. 万葉まほろば線 JR          1        10\n## # ℹ 109 more rows\n## #\n## # Edge Data: 121 × 4\n##    from    to linename       company\n##   <int> <int> <chr>          <chr>  \n## 1     1     2 万葉まほろば線 JR     \n## 2     2     3 万葉まほろば線 JR     \n## 3     3     4 万葉まほろば線 JR     \n## # ℹ 118 more rows\n```\n:::\n\n\n## グラフ表示のライブラリ\n\n上記のように、グラフの表示はグラフの理解において非常に重要です。`igraph`を用いることでグラフを様々な形式で表示することができますが、デザイン的には`ggplot2`などとは異なり、Rのデフォルトのプロットに近い形での表示となります。Rには、`igraph`だけでなく、グラフを表示するためのライブラリがいくつかありますので、以下に簡単に紹介します。\n\n### ggraph\n\n`ggraph`[@ggraph_bib]は上記の`tidygraph`の開発者が開発した、`tbl_graph`を`ggplot2`の文法・デザインで描画するためのライブラリです。仕組みは比較的単純で、以下の例のように`tbl_graph`を`ggplot2`のグラフ表示に適したtibbleに変形し（`create_layout`関数）、`ggplot2`の文法でこの`tibble`を表示しています。この変換において、nodeの位置を`layout`引数で指定した位置に指定させています。\n\n`layout`引数には`\"auto\"`、`\"igraph\"`、`\"dendrogram\"`、`\"manual\"`、`\"linear\"`、`\"matrix\"`、`\"treemap\"`などの様々な値を指定することができます。`layout`による違いは後ほど説明します。\n\n\n::: {.cell filename='ggraph：create_layout関数'}\n\n```{.r .cell-code}\npacman::p_load(ggraph)\n\ncreate_layout(g, layout = \"tree\")\n## # A tibble: 119 × 10\n##        x     y name    lat   lon linename    company .ggraph.orig_index circular\n##    <dbl> <dbl> <chr> <dbl> <dbl> <chr>       <chr>                <int> <lgl>   \n##  1 -7.97    12 奈良   34.7  136. 万葉まほろ… JR                       1 FALSE   \n##  2 -7.97    13 京終   34.7  136. 万葉まほろ… JR                       2 FALSE   \n##  3 -7.97    14 帯解   34.6  136. 万葉まほろ… JR                       3 FALSE   \n##  4 -7.97    15 櫟本   34.6  136. 万葉まほろ… JR                       4 FALSE   \n##  5 -6.47    16 天理   34.6  136. 万葉まほろ… JR                       5 FALSE   \n##  6 -6.47    17 長柄   34.6  136. 万葉まほろ… JR                       6 FALSE   \n##  7 -6.47    18 柳本   34.6  136. 万葉まほろ… JR                       7 FALSE   \n##  8 -6.47    19 巻向   34.5  136. 万葉まほろ… JR                       8 FALSE   \n##  9 -6.47    20 三輪   34.5  136. 万葉まほろ… JR                       9 FALSE   \n## 10 -3.03    21 桜井   34.5  136. 万葉まほろ… JR                      10 FALSE   \n## # ℹ 109 more rows\n## # ℹ 1 more variable: .ggraph.index <int>\n```\n:::\n\n\n`ggraph`の文法は`ggplot2`と非常に類似しています。まず、`ggplot2`での`ggplot`関数に当たる`ggraph`関数の引数として、グラフ、`layout`引数を設定します。`layout`によってはこの`ggraph`関数内で追加の引数を設定する必要があります。`ggplot2`と同様に、この`ggraph`関数に足し算（`+`）で他の`geom`関数を付け加えていくことでグラフを構成していきます。\n\n以下の例では、nodeを点で表示し（`geom_node_point`）、node側のtibbleの変数である`name`（駅名）をテキストとして重ね書きし（`geom_node_text`）、edgeを運行会社により色分けして直線でつないでいます（`geom_edge_link`）。`ggplot2`の`aes`関数に関しては`geom_node_`関数、`geom_edge_`関数内で指定します。`geom_node_`関数内ではnode側のtibble、`geom_edge_`関数内ではedge側のtibbleの列名を用いて表示する色や大きさを指定することができます。\n\n\n::: {.cell filename='ggraph：グラフを描画する'}\n\n```{.r .cell-code}\n# グラフのテーマの設定（ggplot2のthemeをあらかじめ定めておくもの）\nwindowsFonts(Meiryo = windowsFont(\"Meiryo\"))\nset_graph_style(family=\"Meiryo\", text_size = 5, background = \"white\", caption_size = 3)\n\n# x、yで指定した位置にnodeを表示する\nggraph(g, layout = \"manual\", x = lon, y = lat) +\n  geom_node_point() +\n  geom_node_text(aes(label = name)) +\n  geom_edge_link(aes(color = company))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-98-1.png){width=672}\n:::\n:::\n\n\n#### ggraphのlayout\n\nこのggraphのlayout・node・edgeの表示は非常に多種多様で、情報を捉えにくいものも含まれています。[開発者がアートに興味がある](https://thomaslinpedersen.art/)こともあり、ggraphにはどちらかというと現代美術的な、意味よりも見た目重視な表示方法も含まれています。\n\n以下に`layout`の例を示します。`layout`は単にnodeのx・y軸上の位置を定めているだけで、`layout`自体にはそれほど変わったものはありません。とは言え、特定のnode・edgeの表示とセットで用いることを前提としている、使いにくいものもあります。\n\n`layout`には`sf`をベースにしたもの（`layout = \"sf\"`）もあるため、上記のような路線図であれば、`sf`で表示するのもよいでしょう。`sf`については[32章](./chapter32.html)で説明しています。\n\n:::{.panel-tabset}\n\n## auto\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> ggraph(layout = \"auto\") +\n  geom_node_point() +\n  geom_edge_link() # stressが選択されている\n## Using \"stress\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-99-1.png){width=672}\n:::\n:::\n\n\n## stress\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> ggraph(layout = \"stress\") +\n  geom_node_point() +\n  geom_edge_link() # autoで選ばれているのと同じ\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-100-1.png){width=672}\n:::\n:::\n\n\n## sparse_stress\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  bind_edges(data.frame(from=\"田原本\", to=\"西田原本\", linename=\"田原本線\", company=\"近鉄\")) |> \n  ggraph(layout = \"sparse_stress\", pivots = 10) + # 分離したグラフでは表示できない\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-101-1.png){width=672}\n:::\n:::\n\n\n## igraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"igraph\", algorithm = \"grid\") + # igraphのon_gridと同じ\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-102-1.png){width=672}\n:::\n:::\n\n\n## backbone\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  bind_edges(data.frame(from=\"田原本\", to=\"西田原本\", linename=\"田原本線\", company=\"近鉄\")) |> \n  ggraph(layout = \"backbone\") + # 分離したグラフには適さない\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-103-1.png){width=672}\n:::\n:::\n\n\n## pmds\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  bind_edges(data.frame(from=\"田原本\", to=\"西田原本\", linename=\"田原本線\", company=\"近鉄\")) |> \n  ggraph(layout = \"pmds\", pivots = 10) +  # 分離したグラフでは表示できない\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-104-1.png){width=672}\n:::\n:::\n\n\n## eigen\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  bind_edges(data.frame(from=\"田原本\", to=\"西田原本\", linename=\"田原本線\", company=\"近鉄\")) |> \n  ggraph(layout = \"eigen\") +  # 分離したグラフでは表示できない\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-105-1.png){width=672}\n:::\n:::\n\n\n## centrality\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  mutate(cent = centrality_degree()) |> # 中心性に従い位置を決定する\n  bind_edges(data.frame(from=\"田原本\", to=\"西田原本\", linename=\"田原本線\", company=\"近鉄\")) |> \n  ggraph(layout = \"centrality\", centrality = cent) +  # 分離したグラフでは表示できない\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-106-1.png){width=672}\n:::\n:::\n\n\n## focus\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> # 分離したグラフでは表示できない\n  bind_edges(data.frame(from=\"田原本\", to=\"西田原本\", linename=\"田原本線\", company=\"近鉄\")) |> \n  ggraph(layout = \"focus\", focus = 1) + # JR奈良駅にfocusする\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-107-1.png){width=672}\n:::\n:::\n\n\n## dendrogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |> # 有向グラフにしか適用できない\n  ggraph(layout = \"dendrogram\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-108-1.png){width=672}\n:::\n:::\n\n\n## unrooted\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng  |> \n  ggraph(layout = \"unrooted\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-109-1.png){width=672}\n:::\n:::\n\n\n## linear\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"linear\") + \n  geom_node_point() +\n  geom_edge_arc() # 直線ではedgeが見えないのでarcとしている\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-110-1.png){width=672}\n:::\n:::\n\n\n## circlepack\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_gnm(30, 80, directed = TRUE)  |>  # 有向グラフのみ対応\n  ggraph(layout = \"circlepack\") + \n  geom_node_point() +\n  geom_edge_link()\n## Multiple parents. Unfolding graph\n## Multiple roots in graph. Choosing the first\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-111-1.png){width=672}\n:::\n:::\n\n\n## treemap\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |> # 有向グラフにしか適用できない\n  ggraph(layout = \"treemap\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-112-1.png){width=672}\n:::\n:::\n\n\n## partition\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |> # 有向グラフにしか適用できない\n  ggraph(layout = \"partition\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-113-1.png){width=672}\n:::\n:::\n\n\n## cactustree\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 2)  |> # 有向グラフでないとnodeが範囲外に出る\n  ggraph(layout = \"cactustree\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-114-1.png){width=672}\n:::\n:::\n\n\n## htree\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=15, children = 2)  |> # 二分木でないと描画できない\n  ggraph(layout = \"htree\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-115-1.png){width=672}\n:::\n:::\n\n\n## matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> ggraph(layout = \"matrix\") +\n  geom_node_point() +\n  geom_edge_arc() # 直線では見えなくなるのでarcを選択\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-116-1.png){width=672}\n:::\n:::\n\n\n## hive\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  activate(nodes) |> \n  mutate(linename = E(g)$linename[1:119]) |> \n  ggraph(layout = \"hive\", axis = linename) + # linenameを軸として配置\n  geom_node_point() +\n  geom_edge_arc(aes(color=linename)) # 直線では見えなくなるのでarcを選択\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-117-1.png){width=672}\n:::\n:::\n\n\n## fabric\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> ggraph(layout = \"fabric\") +\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-118-1.png){width=672}\n:::\n:::\n\n\n## metro\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> ggraph(layout = \"metro\", x = lon, y = lat) +\n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-119-1.png){width=672}\n:::\n:::\n\n\n:::\n\n#### nodeの表示\n\nnodeの表示には、`geom_node_`関数を用います。`geom_node_`の後にnodeの形状を示す単語（`point`、`text`、`tile`、`voronoi`など）を繋ぐことで、nodeの形状を指定します。`geom_node_`関数は`ggplot2`の`geom_`関数と同様に、`ggraph`関数に`+`でつないで用います。\n\n`geom_node_point`や`geom_node_text`、`geom_node_label`はどのようなグラフで用いても使いやすいですが、`geom_node_voronoi`のようにデザイン重視でネットワークの理解にはつながらないものもあります。以下に`geom_node_`関数の使用例を示します。\n\n:::{.panel-tabset}\n\n## point\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_point()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-120-1.png){width=672}\n:::\n:::\n\n\n## text\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_text(aes(label = name))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-121-1.png){width=672}\n:::\n:::\n\n\n## label\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_label(aes(label = name))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-122-1.png){width=672}\n:::\n:::\n\n\n## tile\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"igraph\", algorithm = \"grid\") +\n  geom_node_tile(aes(fill=lon, color = lat, width=0.9, height=0.9))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-123-1.png){width=672}\n:::\n:::\n\n\n## voronoi\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"stress\") +\n  geom_node_voronoi(aes(color=factor(1), fill=factor(lat), alpha = 0.3))+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-124-1.png){width=672}\n:::\n:::\n\n\n## circle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_circle(aes(r = lon/10000, color = factor(lon)))+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-125-1.png){width=672}\n:::\n:::\n\n\n## arc_bar\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 2)  |> \n  mutate(colors = rep(1:5, 6)) |> \n  ggraph(layout = \"partition\", circular = TRUE) +\n  geom_node_arc_bar(aes(fill = factor(colors))) # 内→外へのtreeになっている\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-126-1.png){width=672}\n:::\n:::\n\n\n## range\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"fabric\") +\n  geom_node_range(aes(color = factor(lon)))+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-127-1.png){width=672}\n:::\n:::\n\n\n:::\n\n#### edgeの表示\n\nedgeの表示には、`geom_edge_`関数を用います。`geom_edge_`関数は`geom_node_`関数とほぼ同じように用います。つまり、`geom_edge_`の後に形状を指定する単語（`link`、`arc`など）を繋いだ関数として用い、`ggraph`関数に`+`でつないで用います。\n\n`geom_edge_link`関数や`geom_edge_arc`関数のように比較的使いやすいものから、平行するedge（同じnode間をつなぐ複数のedge）を示すときだけに用いるもの（`geom_edge_parallel`、`geom_edge_fan`）、ループ（ノードからそのノード自身に接続するedge）を示すときだけに用いるもの（`geom_edge_loop`）、特定のlayout・nodeと共に用いることが想定されているもの（`geom_edge_hive`、`geom_edge_span`）など、特定の場合以外にはほぼ用いないものもあります。\n\n:::{.panel-tabset}\n\n## link\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |>\n  ggraph(layout = \"dendrogram\") + \n  geom_node_point() +\n  geom_edge_link()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-128-1.png){width=672}\n:::\n:::\n\n\n\n## arc\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkarate  |>\n  ggraph(layout = \"auto\") + \n  geom_node_point() +\n  geom_edge_arc()\n## Using \"stress\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-129-1.png){width=672}\n:::\n:::\n\n\n## parallel\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# マニュアルの例の通り\ngr <- create_notable('bull') |>\n  convert(to_directed) |>\n  bind_edges(data.frame(from = c(1, 2, 2, 3), to = c(2, 1, 3, 2)))\n \nggraph(gr, 'stress') +\n  geom_node_point(aes(size=1))+\n  geom_edge_parallel(aes(alpha = after_stat(index)))+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-130-1.png){width=672}\n:::\n:::\n\n\n## fan\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngr <- create_notable('bull') |>\n  convert(to_directed) |>\n  bind_edges(data.frame(from = c(1, 2, 2, 3), to = c(2, 1, 3, 2)))\n \nggraph(gr, 'stress') +\n  geom_node_point(aes(size=1))+\n  geom_edge_fan(aes(alpha = after_stat(index)))+\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-131-1.png){width=672}\n:::\n:::\n\n\n## loop\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(from = c(1, 1, 2, 2, 3, 3, 3), to = c(1, 2, 2, 3, 3, 1, 1)) |> \n  as_tbl_graph() |> \n  ggraph(layout = \"auto\") + \n  geom_node_point() +\n  geom_edge_loop() + # node自身への接続（ループ）を表示する\n  geom_edge_fan()\n## Using \"stress\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-132-1.png){width=672}\n:::\n:::\n\n\n## diagonal\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |>\n  ggraph(layout = \"dendrogram\") + \n  geom_node_point() +\n  geom_edge_diagonal() # ベジェ曲線\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-133-1.png){width=672}\n:::\n:::\n\n\n## elbow\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |>\n  ggraph(layout = \"auto\") + \n  geom_node_point() +\n  geom_edge_elbow()\n## Using \"tree\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-134-1.png){width=672}\n:::\n:::\n\n\n## bend\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |>\n  ggraph(layout = \"auto\") + \n  geom_node_point() +\n  geom_edge_bend()\n## Using \"tree\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-135-1.png){width=672}\n:::\n:::\n\n\n## hive\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_tree(n=30, children = 4)  |> \n  mutate(group = rep(1:3, 10)) |> \n  ggraph(layout = \"hive\", axis = group) + \n  geom_node_point() +\n  geom_edge_hive() # axis間しか繋がない\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-136-1.png){width=672}\n:::\n:::\n\n\n## span\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"fabric\") +\n  geom_node_range(aes(color = factor(lon)))+\n  theme(legend.position = \"none\")+\n  geom_edge_span()\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-137-1.png){width=672}\n:::\n:::\n\n\n## point\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  theme(legend.position = \"none\")+\n  geom_edge_point(aes(color = factor(linename)))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-138-1.png){width=672}\n:::\n:::\n\n\n## tile\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"matrix\") +\n  theme(legend.position = \"none\")+\n  geom_edge_tile(aes(color = linename, fill=linename))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-139-1.png){width=672}\n:::\n:::\n\n\n## density\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  theme(legend.position = \"none\")+\n  geom_node_point(size = 0.1)+\n  geom_edge_density(aes(fill=linename))\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-140-1.png){width=672}\n:::\n:::\n\n\n## bundle_force\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_graph(\"Zachary\") |> \n  as_tbl_graph() |> \n  ggraph(layout = \"auto\") +\n  theme(legend.position = \"none\")+\n  geom_node_point(size = 0.1)+\n  geom_edge_bundle_force()\n## Using \"stress\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-141-1.png){width=672}\n:::\n:::\n\n\n## bundle_path\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_graph(\"Zachary\") |> \n  as_tbl_graph() |> \n  ggraph(layout = \"auto\") +\n  theme(legend.position = \"none\")+\n  geom_node_point(size = 0.1)+\n  geom_edge_bundle_path()\n## Using \"stress\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-142-1.png){width=672}\n:::\n:::\n\n\n## bundle_path\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_graph(\"Zachary\") |> \n  as_tbl_graph() |> \n  ggraph(layout = \"auto\") +\n  theme(legend.position = \"none\")+\n  geom_node_point(size = 0.1)+\n  geom_edge_bundle_minimal()\n## Using \"stress\" as default layout\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-143-1.png){width=672}\n:::\n:::\n\n\n:::\n\n#### faceting\n\n`ggplot2`と同じように、`facet`関数を用いることで、tbl_graphに含まれている変数（`igraph`における`attribute`）を用いてグラフを分割し、表示することができます。`facet`関数には`facet_graph`、`facet_node`、`facet_edge`の3つの関数があり、それぞれ使用感が少しずつ異なります。\n\n`facet`関数の引数にはチルダ（`~`）を用い、チルダの右辺、もしくは両辺に変数を指定することで、グラフを分割表示することができます。\n\n`ggraph`には上に示したものの他に、色や文字等を指定するたくさんの関数が設定されています。\n\n\n::: {.cell filename='faceting'}\n\n```{.r .cell-code}\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_label(aes(label = name, color = company)) +\n  geom_edge_link(aes(, color = company)) +\n  facet_graph(~ company)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-144-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# 上と同じ\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_label(aes(label = name, color = company)) +\n  geom_edge_link(aes(, color = company)) +\n  facet_nodes(~ company)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-144-2.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# edgeだけが2つに分かれる\ng |> \n  ggraph(layout = \"manual\", x = lon, y = lat) +\n  geom_node_label(aes(label = name, color = company)) +\n  geom_edge_link(aes(, color = company)) +\n  facet_edges(~ company)\n```\n\n::: {.cell-output-display}\n![](chapter33_files/figure-html/unnamed-chunk-144-3.png){width=672}\n:::\n:::\n\n\n### networkD3\n\n上記のように`igraph`の`plot`関数や`ggraph`で静的なグラフを準備すれば、論文や出版物、プレゼンテーションで示すグラフとしては十分ですが、Web上ではグラフをインタラクティブに示すことでグラフの構造を読み取りやすくできる場合があります。\n\nこのようなインタラクティブなグラフの表示を行うためのライブラリが`networkD3`[@networkD3_bib]です。`networkD3`はJavascriptのグラフィックライブラリである[D3.js](https://d3js.org/)をRに持ち込んで、ネットワークの表記ができるようにしたものです。\n\nD3.jsを用いることができるライブラリには[`r2d3`](https://rstudio.github.io/r2d3/)[@r2d3_bib]もありますが、`r2d3`との違いはネットワークの表記にのみ対応していることで、`r2d3`でもネットワークを表記することはできます。ただし、`r2d3`はデータの準備がかなり独特（[`r2d3`のgithubページ](https://github.com/rstudio/r2d3/blob/main/vignettes/gallery/dendogram/flare.csv)を参照。idの列にネットワークの情報を入力）ですので、`networkD3`の方が比較的使いやすいでしょう。\n\n\n::: {.cell filename='ライブラリの読み込み'}\n\n```{.r .cell-code}\npacman::p_load(networkD3)\n```\n:::\n\n\n#### データの準備\n\n`networkD3`でのグラフ表記には、nodeのデータフレームとedgeのデータフレームをそれぞれ独立に準備する必要があります。`igraph`や`tidygraph`のグラフオブジェクトを`networkD3`で利用する場合には、`igraph_to_networkD3`関数でデータをリストに変換します。この`igraph_to_networkD3`関数は`igraph`のオブジェクトをnodeのデータフレーム、edgeのデータフレーム（名前は`links`）からなるリストに変換してくれるだけの関数です。`group`引数を指定すると、元の`igraph`オブジェクトのattributeやベクターをnodeのデータフレームに付け加えることもできます。\n\n\n::: {.cell filename='ファイルの準備'}\n\n```{.r .cell-code}\n# dとvtからネットワークを作成\nnara_stations <- graph_from_data_frame(d, vertices = vt, directed = FALSE)\n\nns_D3 <- nara_stations |> \n  igraph_to_networkD3(group = V(nara_stations)$linename)\n\nns_D3$links |> head() # edge_listに似たデータフレーム\n##   source target\n## 1     15     16\n## 2     55     56\n## 3     30     31\n## 4     83     84\n## 5     74     75\n## 6     82     83\nns_D3$nodes |> head() # nodeをまとめたもの\n##   name          group\n## 1 奈良 万葉まほろば線\n## 2 京終 万葉まほろば線\n## 3 帯解 万葉まほろば線\n## 4 櫟本 万葉まほろば線\n## 5 天理 万葉まほろば線\n## 6 長柄 万葉まほろば線\n```\n:::\n\n\n#### simpleNetwork関数\n\n最も簡単にネットワークを表示するための関数が、`simpleNetwork`関数です。この関数の引数にedgeを示すデータフレームを設定するだけで、D3.jsを用いたネットワークを表示することができます。このグラフ上では、nodeをドラッグすることでnodeを移動させて表記することができます。\n\nただし、この`simpleNetwork`をそのまま用いるとグラフが拡大されすぎて見えなかったり、nodeの意味がよくわからなくなったりします。グラフが拡大されて見にくい問題は引数に`zoom = TRUE`することで拡大・縮小できるようにすることで対処できます。しかし、他の情報を表示するのにはこの`simpleNetwork`関数は向いていません。\n\n\n::: {.cell filename='simpleNetwork関数'}\n\n```{.r .cell-code}\nsimpleNetwork(ns_D3$links, zoom = TRUE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"forceNetwork html-widget html-fill-item\" id=\"htmlwidget-75bee6c585ff19d0170f\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-75bee6c585ff19d0170f\">{\"x\":{\"links\":{\"source\":[26,70,43,101,91,100,110,74,89,80,90,34,95,75,105,33,104,0,30,115,67,107,85,113,66,0,39,71,47,116,35,29,108,25,27,13,85,59,55,41,97,23,11,86,94,24,78,10,84,3,111,63,23,51,76,63,9,4,78,2,79,50,65,60,72,12,53,1,99,108,6,54,118,38,103,28,62,108,36,77,58,56,117,8,53,42,73,46,41,82,68,44,70,114,81,63,106,45,57,23,78,83,92,109,87,98,48,61,0,69,23,88,34,34,64,49,102,93,32,31],\"target\":[27,71,44,102,92,101,111,76,90,91,91,96,96,86,19,34,105,1,32,116,68,20,106,21,67,40,40,72,48,117,36,30,2,26,28,28,87,60,56,43,108,37,22,97,95,25,6,11,85,4,112,112,52,52,77,113,10,5,5,15,80,51,66,18,73,14,14,31,100,7,7,55,3,39,104,29,63,8,16,78,59,57,118,9,64,53,74,47,109,83,69,45,12,115,82,65,107,46,58,24,79,84,93,110,88,99,49,62,17,70,38,89,35,98,75,50,103,94,33,42],\"value\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"colour},\"nodes\":{\"name\":[\"0\",\"1\",\"10\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"11\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"2\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"3\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"4\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"5\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"6\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"7\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"8\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"9\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\"],\"group\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['#3182bd'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-30,\"opacity\":0.6,\"zoom\":true,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n#### forceNetwork\n\nもう少し情報を詰め込んだグラフを作成するための関数が`forceNetwork`関数です。この関数ではedgeのデータフレーム（`Links`引数）とnodeのデータフレーム（`Nodes`引数）を別に指定することができます。\n\nこの関数では、ネットワークの接続（edgelistに当たるもの）を`Source`と`Target`引数に、edgeの太さを`Value`引数に、ノードに表示される名前を`NodeID`引数に、色などのグループ分けを`Group`引数に指定することで、比較的簡単に情報量の多いインタラクティブなグラフを作成することができます。\n\n\n::: {.cell filename='forceNetwork関数'}\n\n```{.r .cell-code}\nforceNetwork(\n  Links = ns_D3$links,\n  Nodes = ns_D3$nodes,\n  Source = \"source\",\n  Target = \"target\",\n  NodeID = \"name\",\n  Group = \"group\",\n  fontSize = 30, zoom = TRUE\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"forceNetwork html-widget html-fill-item\" id=\"htmlwidget-8e48ac0cadff3c49a9b1\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8e48ac0cadff3c49a9b1\">{\"x\":{\"links\":{\"source\":[15,55,30,83,74,82,91,59,72,64,73,22,78,6,87,21,86,0,19,96,52,89,69,94,51,0,27,56,34,97,23,18,9,14,16,11,69,45,41,29,8,12,108,7,77,13,62,107,68,100,92,49,12,38,60,49,106,101,62,10,63,37,50,46,57,109,4,1,81,9,103,40,99,26,85,17,48,9,24,61,44,42,98,105,4,3,58,33,29,66,53,31,55,95,65,49,88,32,43,12,62,67,75,90,70,80,35,47,0,54,12,71,22,22,5,36,84,76,20,2],\"target\":[16,56,31,84,75,83,92,60,73,74,74,79,79,7,115,22,87,1,20,97,53,116,88,117,52,28,28,57,35,98,24,19,10,15,17,17,70,46,42,30,9,25,118,8,78,14,103,108,69,101,93,93,39,39,61,94,107,102,102,111,64,38,51,114,58,110,110,2,82,104,104,41,100,27,86,18,49,105,112,62,45,43,99,106,5,4,59,34,90,67,54,32,109,96,66,50,89,33,44,13,63,68,76,91,71,81,36,48,113,55,26,72,23,80,6,37,85,77,21,3],\"colour},\"nodes\":{\"name\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"],\"group\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"田原本線\",\"吉野線\",\"御所線\",\"奈良線\",\"大阪線\"]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":30,\"fontFamily\":\"serif\",\"clickTextSize\":75,\"linkDistance\":50,\"linkWidth\":\"function(d) { return Math.sqrt(d.value); }\",\"charge\":-30,\"opacity\":0.6,\"zoom\":true,\"legend\":false,\"arrows\":false,\"nodesize\":false,\"radiusCalculation\":\" Math.sqrt(d.nodesize)+6\",\"bounded\":false,\"opacityNoHover\":0,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n#### dendroNetwork\n\n`dendroNetwork`関数はネットワークではなく、階層ありクラスタリングの結果を表示するための関数です。引数に取れるのは`hclust`関数の返り値（`hclust`クラスのオブジェクト）だけです。`dendroNetwork`関数を用いることで簡単にインタラクティブな階層ありクラスタリングの結果を表示することができます。\n\n\n::: {.cell filename='dendroNetwork関数'}\n\n```{.r .cell-code}\n# hclustクラスのオブジェクトをプロットする\nhc <- hclust(dist(USArrests))\ndendroNetwork(hc)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-e0855add4a00c1a0f62c\" style=\"width:100%;height:406px;\" class=\"dendroNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e0855add4a00c1a0f62c\">{\"x\":{\"root\":{\"name\":\"\",\"y\":293.6227511620992,\"children\":[{\"name\":\"\",\"y\":102.8615574449464,\"children\":[{\"name\":\"\",\"y\":38.5279119600323,\"children\":[{\"name\":\"Florida\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"North Carolina\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]},{\"name\":\"\",\"y\":64.99361507102063,\"children\":[{\"name\":\"\",\"y\":48.72514751132109,\"children\":[{\"name\":\"\",\"y\":16.9767488053514,\"children\":[{\"name\":\"Delaware\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":15.4544491975612,\"children\":[{\"name\":\"Alabama\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Louisiana\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]},{\"name\":\"\",\"y\":28.63511829903973,\"children\":[{\"name\":\"Alaska\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":21.16719159454083,\"children\":[{\"name\":\"Mississippi\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"South Carolina\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]},{\"name\":\"\",\"y\":53.59337645642417,\"children\":[{\"name\":\"\",\"y\":15.8902485820707,\"children\":[{\"name\":\"Maryland\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":13.89604260212237,\"children\":[{\"name\":\"Arizona\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"New Mexico\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]},{\"name\":\"\",\"y\":32.7188019340562,\"children\":[{\"name\":\"California\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":22.36604569431083,\"children\":[{\"name\":\"\",\"y\":6.23698645180507,\"children\":[{\"name\":\"Illinois\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"New York\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]},{\"name\":\"\",\"y\":13.29736816065495,\"children\":[{\"name\":\"Michigan\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Nevada\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]}]}]}]},{\"name\":\"\",\"y\":168.6114171697753,\"children\":[{\"name\":\"\",\"y\":68.76227163205125,\"children\":[{\"name\":\"\",\"y\":36.73486082728503,\"children\":[{\"name\":\"\",\"y\":24.89437687510977,\"children\":[{\"name\":\"Missouri\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":12.61427762497718,\"children\":[{\"name\":\"Arkansas\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Tennessee\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]},{\"name\":\"\",\"y\":25.09302691984369,\"children\":[{\"name\":\"Georgia\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":14.50103444585937,\"children\":[{\"name\":\"Colorado\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Texas\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]},{\"name\":\"\",\"y\":36.84793074244468,\"children\":[{\"name\":\"Rhode Island\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":29.25064101861701,\"children\":[{\"name\":\"\",\"y\":15.63009916795156,\"children\":[{\"name\":\"Wyoming\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":12.42497484906911,\"children\":[{\"name\":\"Oregon\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":7.355270219373317,\"children\":[{\"name\":\"Oklahoma\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Virginia\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]},{\"name\":\"\",\"y\":22.7666422645062,\"children\":[{\"name\":\"Washington\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":11.4564392373896,\"children\":[{\"name\":\"Massachusetts\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"New Jersey\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]}]}]},{\"name\":\"\",\"y\":87.32634195934237,\"children\":[{\"name\":\"\",\"y\":31.47713455827897,\"children\":[{\"name\":\"\",\"y\":18.26499384067786,\"children\":[{\"name\":\"\",\"y\":6.637770710110436,\"children\":[{\"name\":\"Ohio\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Utah\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]},{\"name\":\"\",\"y\":8.027452896155792,\"children\":[{\"name\":\"Connecticut\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Pennsylvania\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]},{\"name\":\"\",\"y\":19.90427089847805,\"children\":[{\"name\":\"\",\"y\":13.34915727677219,\"children\":[{\"name\":\"Nebraska\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":3.834057902536162,\"children\":[{\"name\":\"Kentucky\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Montana\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]},{\"name\":\"\",\"y\":15.40779023740913,\"children\":[{\"name\":\"Idaho\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":3.9293765408777,\"children\":[{\"name\":\"Indiana\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Kansas\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]}]},{\"name\":\"\",\"y\":57.27102234114561,\"children\":[{\"name\":\"\",\"y\":31.62040480449294,\"children\":[{\"name\":\"Hawaii\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":19.43759244351008,\"children\":[{\"name\":\"Minnesota\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":10.86001841619065,\"children\":[{\"name\":\"Wisconsin\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":2.29128784747792,\"children\":[{\"name\":\"Iowa\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"New Hampshire\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]}]},{\"name\":\"\",\"y\":41.48795005781799,\"children\":[{\"name\":\"\",\"y\":12.7753669223236,\"children\":[{\"name\":\"West Virginia\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"\",\"y\":8.537564055396599,\"children\":[{\"name\":\"Maine\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"South Dakota\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]},{\"name\":\"\",\"y\":13.04492238382429,\"children\":[{\"name\":\"North Dakota\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9},{\"name\":\"Vermont\",\"y\":0,\"textColour\":\"#111\",\"textOpacity\":0.9}]}]}]}]}]}]},\"options\":{\"height\":500,\"width\":800,\"fontSize\":10,\"linkColour\":\"#ccc\",\"nodeColour\":\"#fff\",\"nodeStroke\":\"steelblue\",\"textRotate\":0,\"margins\":{\"top\":40,\"right\":150,\"bottom\":40,\"left\":40},\"opacity\":0.9,\"linkType\":\"elbow\",\"treeOrientation\":\"horizontal\",\"zoom\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n#### その他の関数\n\n`networkD3`には上記の`forceNetwork`、`dendroNetwork`の他にも円形・階層型のグラフを表示することができる`radialNetwork`関数や`diagonalNetwork`関数、サンキー図を表示する`sankeyNetwork`関数も備わっています。以下の例ではjsonを`jsonline::fromJSON`関数でリストにして引数としていますが、`sankeyNetwork`関数は上記の`forceNetwork`と同様にedgeとnodeのデータフレームを引数に取ることもできます。\n\n\n::: {.cell filename='radialNetwork関数'}\n\n```{.r .cell-code}\n# JSONのアドレスを読み込み\nURL <- \n  \"https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata//flare.json\"\n\n# JSONをリストにする\nFlare <- jsonlite::fromJSON(URL, simplifyDataFrame = FALSE)\n\n# ネットワークを表示\nradialNetwork(List = Flare, opacity = 0.9)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"radialNetwork html-widget html-fill-item\" id=\"htmlwidget-ae3744324afdf9417733\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ae3744324afdf9417733\">{\"x\":{\"root\":{\"name\":\"flare\",\"children\":[{\"name\":\"analytics\",\"children\":[{\"name\":\"cluster\",\"children\":[{\"name\":\"AgglomerativeCluster\",\"size\":3938},{\"name\":\"CommunityStructure\",\"size\":3812},{\"name\":\"HierarchicalCluster\",\"size\":6714},{\"name\":\"MergeEdge\",\"size\":743}]},{\"name\":\"graph\",\"children\":[{\"name\":\"BetweennessCentrality\",\"size\":3534},{\"name\":\"LinkDistance\",\"size\":5731},{\"name\":\"MaxFlowMinCut\",\"size\":7840},{\"name\":\"ShortestPaths\",\"size\":5914},{\"name\":\"SpanningTree\",\"size\":3416}]},{\"name\":\"optimization\",\"children\":[{\"name\":\"AspectRatioBanker\",\"size\":7074}]}]},{\"name\":\"animate\",\"children\":[{\"name\":\"Easing\",\"size\":17010},{\"name\":\"FunctionSequence\",\"size\":5842},{\"name\":\"interpolate\",\"children\":[{\"name\":\"ArrayInterpolator\",\"size\":1983},{\"name\":\"ColorInterpolator\",\"size\":2047},{\"name\":\"DateInterpolator\",\"size\":1375},{\"name\":\"Interpolator\",\"size\":8746},{\"name\":\"MatrixInterpolator\",\"size\":2202},{\"name\":\"NumberInterpolator\",\"size\":1382},{\"name\":\"ObjectInterpolator\",\"size\":1629},{\"name\":\"PointInterpolator\",\"size\":1675},{\"name\":\"RectangleInterpolator\",\"size\":2042}]},{\"name\":\"ISchedulable\",\"size\":1041},{\"name\":\"Parallel\",\"size\":5176},{\"name\":\"Pause\",\"size\":449},{\"name\":\"Scheduler\",\"size\":5593},{\"name\":\"Sequence\",\"size\":5534},{\"name\":\"Transition\",\"size\":9201},{\"name\":\"Transitioner\",\"size\":19975},{\"name\":\"TransitionEvent\",\"size\":1116},{\"name\":\"Tween\",\"size\":6006}]},{\"name\":\"data\",\"children\":[{\"name\":\"converters\",\"children\":[{\"name\":\"Converters\",\"size\":721},{\"name\":\"DelimitedTextConverter\",\"size\":4294},{\"name\":\"GraphMLConverter\",\"size\":9800},{\"name\":\"IDataConverter\",\"size\":1314},{\"name\":\"JSONConverter\",\"size\":2220}]},{\"name\":\"DataField\",\"size\":1759},{\"name\":\"DataSchema\",\"size\":2165},{\"name\":\"DataSet\",\"size\":586},{\"name\":\"DataSource\",\"size\":3331},{\"name\":\"DataTable\",\"size\":772},{\"name\":\"DataUtil\",\"size\":3322}]},{\"name\":\"display\",\"children\":[{\"name\":\"DirtySprite\",\"size\":8833},{\"name\":\"LineSprite\",\"size\":1732},{\"name\":\"RectSprite\",\"size\":3623},{\"name\":\"TextSprite\",\"size\":10066}]},{\"name\":\"flex\",\"children\":[{\"name\":\"FlareVis\",\"size\":4116}]},{\"name\":\"physics\",\"children\":[{\"name\":\"DragForce\",\"size\":1082},{\"name\":\"GravityForce\",\"size\":1336},{\"name\":\"IForce\",\"size\":319},{\"name\":\"NBodyForce\",\"size\":10498},{\"name\":\"Particle\",\"size\":2822},{\"name\":\"Simulation\",\"size\":9983},{\"name\":\"Spring\",\"size\":2213},{\"name\":\"SpringForce\",\"size\":1681}]},{\"name\":\"query\",\"children\":[{\"name\":\"AggregateExpression\",\"size\":1616},{\"name\":\"And\",\"size\":1027},{\"name\":\"Arithmetic\",\"size\":3891},{\"name\":\"Average\",\"size\":891},{\"name\":\"BinaryExpression\",\"size\":2893},{\"name\":\"Comparison\",\"size\":5103},{\"name\":\"CompositeExpression\",\"size\":3677},{\"name\":\"Count\",\"size\":781},{\"name\":\"DateUtil\",\"size\":4141},{\"name\":\"Distinct\",\"size\":933},{\"name\":\"Expression\",\"size\":5130},{\"name\":\"ExpressionIterator\",\"size\":3617},{\"name\":\"Fn\",\"size\":3240},{\"name\":\"If\",\"size\":2732},{\"name\":\"IsA\",\"size\":2039},{\"name\":\"Literal\",\"size\":1214},{\"name\":\"Match\",\"size\":3748},{\"name\":\"Maximum\",\"size\":843},{\"name\":\"methods\",\"children\":[{\"name\":\"add\",\"size\":593},{\"name\":\"and\",\"size\":330},{\"name\":\"average\",\"size\":287},{\"name\":\"count\",\"size\":277},{\"name\":\"distinct\",\"size\":292},{\"name\":\"div\",\"size\":595},{\"name\":\"eq\",\"size\":594},{\"name\":\"fn\",\"size\":460},{\"name\":\"gt\",\"size\":603},{\"name\":\"gte\",\"size\":625},{\"name\":\"iff\",\"size\":748},{\"name\":\"isa\",\"size\":461},{\"name\":\"lt\",\"size\":597},{\"name\":\"lte\",\"size\":619},{\"name\":\"max\",\"size\":283},{\"name\":\"min\",\"size\":283},{\"name\":\"mod\",\"size\":591},{\"name\":\"mul\",\"size\":603},{\"name\":\"neq\",\"size\":599},{\"name\":\"not\",\"size\":386},{\"name\":\"or\",\"size\":323},{\"name\":\"orderby\",\"size\":307},{\"name\":\"range\",\"size\":772},{\"name\":\"select\",\"size\":296},{\"name\":\"stddev\",\"size\":363},{\"name\":\"sub\",\"size\":600},{\"name\":\"sum\",\"size\":280},{\"name\":\"update\",\"size\":307},{\"name\":\"variance\",\"size\":335},{\"name\":\"where\",\"size\":299},{\"name\":\"xor\",\"size\":354},{\"name\":\"_\",\"size\":264}]},{\"name\":\"Minimum\",\"size\":843},{\"name\":\"Not\",\"size\":1554},{\"name\":\"Or\",\"size\":970},{\"name\":\"Query\",\"size\":13896},{\"name\":\"Range\",\"size\":1594},{\"name\":\"StringUtil\",\"size\":4130},{\"name\":\"Sum\",\"size\":791},{\"name\":\"Variable\",\"size\":1124},{\"name\":\"Variance\",\"size\":1876},{\"name\":\"Xor\",\"size\":1101}]},{\"name\":\"scale\",\"children\":[{\"name\":\"IScaleMap\",\"size\":2105},{\"name\":\"LinearScale\",\"size\":1316},{\"name\":\"LogScale\",\"size\":3151},{\"name\":\"OrdinalScale\",\"size\":3770},{\"name\":\"QuantileScale\",\"size\":2435},{\"name\":\"QuantitativeScale\",\"size\":4839},{\"name\":\"RootScale\",\"size\":1756},{\"name\":\"Scale\",\"size\":4268},{\"name\":\"ScaleType\",\"size\":1821},{\"name\":\"TimeScale\",\"size\":5833}]},{\"name\":\"util\",\"children\":[{\"name\":\"Arrays\",\"size\":8258},{\"name\":\"Colors\",\"size\":10001},{\"name\":\"Dates\",\"size\":8217},{\"name\":\"Displays\",\"size\":12555},{\"name\":\"Filter\",\"size\":2324},{\"name\":\"Geometry\",\"size\":10993},{\"name\":\"heap\",\"children\":[{\"name\":\"FibonacciHeap\",\"size\":9354},{\"name\":\"HeapNode\",\"size\":1233}]},{\"name\":\"IEvaluable\",\"size\":335},{\"name\":\"IPredicate\",\"size\":383},{\"name\":\"IValueProxy\",\"size\":874},{\"name\":\"math\",\"children\":[{\"name\":\"DenseMatrix\",\"size\":3165},{\"name\":\"IMatrix\",\"size\":2815},{\"name\":\"SparseMatrix\",\"size\":3366}]},{\"name\":\"Maths\",\"size\":17705},{\"name\":\"Orientation\",\"size\":1486},{\"name\":\"palette\",\"children\":[{\"name\":\"ColorPalette\",\"size\":6367},{\"name\":\"Palette\",\"size\":1229},{\"name\":\"ShapePalette\",\"size\":2059},{\"name\":\"SizePalette\",\"size\":2291}]},{\"name\":\"Property\",\"size\":5559},{\"name\":\"Shapes\",\"size\":19118},{\"name\":\"Sort\",\"size\":6887},{\"name\":\"Stats\",\"size\":6557},{\"name\":\"Strings\",\"size\":22026}]},{\"name\":\"vis\",\"children\":[{\"name\":\"axis\",\"children\":[{\"name\":\"Axes\",\"size\":1302},{\"name\":\"Axis\",\"size\":24593},{\"name\":\"AxisGridLine\",\"size\":652},{\"name\":\"AxisLabel\",\"size\":636},{\"name\":\"CartesianAxes\",\"size\":6703}]},{\"name\":\"controls\",\"children\":[{\"name\":\"AnchorControl\",\"size\":2138},{\"name\":\"ClickControl\",\"size\":3824},{\"name\":\"Control\",\"size\":1353},{\"name\":\"ControlList\",\"size\":4665},{\"name\":\"DragControl\",\"size\":2649},{\"name\":\"ExpandControl\",\"size\":2832},{\"name\":\"HoverControl\",\"size\":4896},{\"name\":\"IControl\",\"size\":763},{\"name\":\"PanZoomControl\",\"size\":5222},{\"name\":\"SelectionControl\",\"size\":7862},{\"name\":\"TooltipControl\",\"size\":8435}]},{\"name\":\"data\",\"children\":[{\"name\":\"Data\",\"size\":20544},{\"name\":\"DataList\",\"size\":19788},{\"name\":\"DataSprite\",\"size\":10349},{\"name\":\"EdgeSprite\",\"size\":3301},{\"name\":\"NodeSprite\",\"size\":19382},{\"name\":\"render\",\"children\":[{\"name\":\"ArrowType\",\"size\":698},{\"name\":\"EdgeRenderer\",\"size\":5569},{\"name\":\"IRenderer\",\"size\":353},{\"name\":\"ShapeRenderer\",\"size\":2247}]},{\"name\":\"ScaleBinding\",\"size\":11275},{\"name\":\"Tree\",\"size\":7147},{\"name\":\"TreeBuilder\",\"size\":9930}]},{\"name\":\"events\",\"children\":[{\"name\":\"DataEvent\",\"size\":2313},{\"name\":\"SelectionEvent\",\"size\":1880},{\"name\":\"TooltipEvent\",\"size\":1701},{\"name\":\"VisualizationEvent\",\"size\":1117}]},{\"name\":\"legend\",\"children\":[{\"name\":\"Legend\",\"size\":20859},{\"name\":\"LegendItem\",\"size\":4614},{\"name\":\"LegendRange\",\"size\":10530}]},{\"name\":\"operator\",\"children\":[{\"name\":\"distortion\",\"children\":[{\"name\":\"BifocalDistortion\",\"size\":4461},{\"name\":\"Distortion\",\"size\":6314},{\"name\":\"FisheyeDistortion\",\"size\":3444}]},{\"name\":\"encoder\",\"children\":[{\"name\":\"ColorEncoder\",\"size\":3179},{\"name\":\"Encoder\",\"size\":4060},{\"name\":\"PropertyEncoder\",\"size\":4138},{\"name\":\"ShapeEncoder\",\"size\":1690},{\"name\":\"SizeEncoder\",\"size\":1830}]},{\"name\":\"filter\",\"children\":[{\"name\":\"FisheyeTreeFilter\",\"size\":5219},{\"name\":\"GraphDistanceFilter\",\"size\":3165},{\"name\":\"VisibilityFilter\",\"size\":3509}]},{\"name\":\"IOperator\",\"size\":1286},{\"name\":\"label\",\"children\":[{\"name\":\"Labeler\",\"size\":9956},{\"name\":\"RadialLabeler\",\"size\":3899},{\"name\":\"StackedAreaLabeler\",\"size\":3202}]},{\"name\":\"layout\",\"children\":[{\"name\":\"AxisLayout\",\"size\":6725},{\"name\":\"BundledEdgeRouter\",\"size\":3727},{\"name\":\"CircleLayout\",\"size\":9317},{\"name\":\"CirclePackingLayout\",\"size\":12003},{\"name\":\"DendrogramLayout\",\"size\":4853},{\"name\":\"ForceDirectedLayout\",\"size\":8411},{\"name\":\"IcicleTreeLayout\",\"size\":4864},{\"name\":\"IndentedTreeLayout\",\"size\":3174},{\"name\":\"Layout\",\"size\":7881},{\"name\":\"NodeLinkTreeLayout\",\"size\":12870},{\"name\":\"PieLayout\",\"size\":2728},{\"name\":\"RadialTreeLayout\",\"size\":12348},{\"name\":\"RandomLayout\",\"size\":870},{\"name\":\"StackedAreaLayout\",\"size\":9121},{\"name\":\"TreeMapLayout\",\"size\":9191}]},{\"name\":\"Operator\",\"size\":2490},{\"name\":\"OperatorList\",\"size\":5248},{\"name\":\"OperatorSequence\",\"size\":4190},{\"name\":\"OperatorSwitch\",\"size\":2581},{\"name\":\"SortOperator\",\"size\":2023}]},{\"name\":\"Visualization\",\"size\":16540}]}]},\"options\":{\"height\":null,\"width\":null,\"fontSize\":10,\"fontFamily\":\"serif\",\"linkColour\":\"#ccc\",\"nodeColour\":\"#fff\",\"nodeStroke\":\"steelblue\",\"textColour\":\"#111\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"opacity\":0.9}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell filename='diagonalNetwork関数'}\n\n```{.r .cell-code}\ndiagonalNetwork(List = Flare, opacity = 0.9)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"diagonalNetwork html-widget html-fill-item\" id=\"htmlwidget-6191d497bdd59276af2f\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6191d497bdd59276af2f\">{\"x\":{\"root\":{\"name\":\"flare\",\"children\":[{\"name\":\"analytics\",\"children\":[{\"name\":\"cluster\",\"children\":[{\"name\":\"AgglomerativeCluster\",\"size\":3938},{\"name\":\"CommunityStructure\",\"size\":3812},{\"name\":\"HierarchicalCluster\",\"size\":6714},{\"name\":\"MergeEdge\",\"size\":743}]},{\"name\":\"graph\",\"children\":[{\"name\":\"BetweennessCentrality\",\"size\":3534},{\"name\":\"LinkDistance\",\"size\":5731},{\"name\":\"MaxFlowMinCut\",\"size\":7840},{\"name\":\"ShortestPaths\",\"size\":5914},{\"name\":\"SpanningTree\",\"size\":3416}]},{\"name\":\"optimization\",\"children\":[{\"name\":\"AspectRatioBanker\",\"size\":7074}]}]},{\"name\":\"animate\",\"children\":[{\"name\":\"Easing\",\"size\":17010},{\"name\":\"FunctionSequence\",\"size\":5842},{\"name\":\"interpolate\",\"children\":[{\"name\":\"ArrayInterpolator\",\"size\":1983},{\"name\":\"ColorInterpolator\",\"size\":2047},{\"name\":\"DateInterpolator\",\"size\":1375},{\"name\":\"Interpolator\",\"size\":8746},{\"name\":\"MatrixInterpolator\",\"size\":2202},{\"name\":\"NumberInterpolator\",\"size\":1382},{\"name\":\"ObjectInterpolator\",\"size\":1629},{\"name\":\"PointInterpolator\",\"size\":1675},{\"name\":\"RectangleInterpolator\",\"size\":2042}]},{\"name\":\"ISchedulable\",\"size\":1041},{\"name\":\"Parallel\",\"size\":5176},{\"name\":\"Pause\",\"size\":449},{\"name\":\"Scheduler\",\"size\":5593},{\"name\":\"Sequence\",\"size\":5534},{\"name\":\"Transition\",\"size\":9201},{\"name\":\"Transitioner\",\"size\":19975},{\"name\":\"TransitionEvent\",\"size\":1116},{\"name\":\"Tween\",\"size\":6006}]},{\"name\":\"data\",\"children\":[{\"name\":\"converters\",\"children\":[{\"name\":\"Converters\",\"size\":721},{\"name\":\"DelimitedTextConverter\",\"size\":4294},{\"name\":\"GraphMLConverter\",\"size\":9800},{\"name\":\"IDataConverter\",\"size\":1314},{\"name\":\"JSONConverter\",\"size\":2220}]},{\"name\":\"DataField\",\"size\":1759},{\"name\":\"DataSchema\",\"size\":2165},{\"name\":\"DataSet\",\"size\":586},{\"name\":\"DataSource\",\"size\":3331},{\"name\":\"DataTable\",\"size\":772},{\"name\":\"DataUtil\",\"size\":3322}]},{\"name\":\"display\",\"children\":[{\"name\":\"DirtySprite\",\"size\":8833},{\"name\":\"LineSprite\",\"size\":1732},{\"name\":\"RectSprite\",\"size\":3623},{\"name\":\"TextSprite\",\"size\":10066}]},{\"name\":\"flex\",\"children\":[{\"name\":\"FlareVis\",\"size\":4116}]},{\"name\":\"physics\",\"children\":[{\"name\":\"DragForce\",\"size\":1082},{\"name\":\"GravityForce\",\"size\":1336},{\"name\":\"IForce\",\"size\":319},{\"name\":\"NBodyForce\",\"size\":10498},{\"name\":\"Particle\",\"size\":2822},{\"name\":\"Simulation\",\"size\":9983},{\"name\":\"Spring\",\"size\":2213},{\"name\":\"SpringForce\",\"size\":1681}]},{\"name\":\"query\",\"children\":[{\"name\":\"AggregateExpression\",\"size\":1616},{\"name\":\"And\",\"size\":1027},{\"name\":\"Arithmetic\",\"size\":3891},{\"name\":\"Average\",\"size\":891},{\"name\":\"BinaryExpression\",\"size\":2893},{\"name\":\"Comparison\",\"size\":5103},{\"name\":\"CompositeExpression\",\"size\":3677},{\"name\":\"Count\",\"size\":781},{\"name\":\"DateUtil\",\"size\":4141},{\"name\":\"Distinct\",\"size\":933},{\"name\":\"Expression\",\"size\":5130},{\"name\":\"ExpressionIterator\",\"size\":3617},{\"name\":\"Fn\",\"size\":3240},{\"name\":\"If\",\"size\":2732},{\"name\":\"IsA\",\"size\":2039},{\"name\":\"Literal\",\"size\":1214},{\"name\":\"Match\",\"size\":3748},{\"name\":\"Maximum\",\"size\":843},{\"name\":\"methods\",\"children\":[{\"name\":\"add\",\"size\":593},{\"name\":\"and\",\"size\":330},{\"name\":\"average\",\"size\":287},{\"name\":\"count\",\"size\":277},{\"name\":\"distinct\",\"size\":292},{\"name\":\"div\",\"size\":595},{\"name\":\"eq\",\"size\":594},{\"name\":\"fn\",\"size\":460},{\"name\":\"gt\",\"size\":603},{\"name\":\"gte\",\"size\":625},{\"name\":\"iff\",\"size\":748},{\"name\":\"isa\",\"size\":461},{\"name\":\"lt\",\"size\":597},{\"name\":\"lte\",\"size\":619},{\"name\":\"max\",\"size\":283},{\"name\":\"min\",\"size\":283},{\"name\":\"mod\",\"size\":591},{\"name\":\"mul\",\"size\":603},{\"name\":\"neq\",\"size\":599},{\"name\":\"not\",\"size\":386},{\"name\":\"or\",\"size\":323},{\"name\":\"orderby\",\"size\":307},{\"name\":\"range\",\"size\":772},{\"name\":\"select\",\"size\":296},{\"name\":\"stddev\",\"size\":363},{\"name\":\"sub\",\"size\":600},{\"name\":\"sum\",\"size\":280},{\"name\":\"update\",\"size\":307},{\"name\":\"variance\",\"size\":335},{\"name\":\"where\",\"size\":299},{\"name\":\"xor\",\"size\":354},{\"name\":\"_\",\"size\":264}]},{\"name\":\"Minimum\",\"size\":843},{\"name\":\"Not\",\"size\":1554},{\"name\":\"Or\",\"size\":970},{\"name\":\"Query\",\"size\":13896},{\"name\":\"Range\",\"size\":1594},{\"name\":\"StringUtil\",\"size\":4130},{\"name\":\"Sum\",\"size\":791},{\"name\":\"Variable\",\"size\":1124},{\"name\":\"Variance\",\"size\":1876},{\"name\":\"Xor\",\"size\":1101}]},{\"name\":\"scale\",\"children\":[{\"name\":\"IScaleMap\",\"size\":2105},{\"name\":\"LinearScale\",\"size\":1316},{\"name\":\"LogScale\",\"size\":3151},{\"name\":\"OrdinalScale\",\"size\":3770},{\"name\":\"QuantileScale\",\"size\":2435},{\"name\":\"QuantitativeScale\",\"size\":4839},{\"name\":\"RootScale\",\"size\":1756},{\"name\":\"Scale\",\"size\":4268},{\"name\":\"ScaleType\",\"size\":1821},{\"name\":\"TimeScale\",\"size\":5833}]},{\"name\":\"util\",\"children\":[{\"name\":\"Arrays\",\"size\":8258},{\"name\":\"Colors\",\"size\":10001},{\"name\":\"Dates\",\"size\":8217},{\"name\":\"Displays\",\"size\":12555},{\"name\":\"Filter\",\"size\":2324},{\"name\":\"Geometry\",\"size\":10993},{\"name\":\"heap\",\"children\":[{\"name\":\"FibonacciHeap\",\"size\":9354},{\"name\":\"HeapNode\",\"size\":1233}]},{\"name\":\"IEvaluable\",\"size\":335},{\"name\":\"IPredicate\",\"size\":383},{\"name\":\"IValueProxy\",\"size\":874},{\"name\":\"math\",\"children\":[{\"name\":\"DenseMatrix\",\"size\":3165},{\"name\":\"IMatrix\",\"size\":2815},{\"name\":\"SparseMatrix\",\"size\":3366}]},{\"name\":\"Maths\",\"size\":17705},{\"name\":\"Orientation\",\"size\":1486},{\"name\":\"palette\",\"children\":[{\"name\":\"ColorPalette\",\"size\":6367},{\"name\":\"Palette\",\"size\":1229},{\"name\":\"ShapePalette\",\"size\":2059},{\"name\":\"SizePalette\",\"size\":2291}]},{\"name\":\"Property\",\"size\":5559},{\"name\":\"Shapes\",\"size\":19118},{\"name\":\"Sort\",\"size\":6887},{\"name\":\"Stats\",\"size\":6557},{\"name\":\"Strings\",\"size\":22026}]},{\"name\":\"vis\",\"children\":[{\"name\":\"axis\",\"children\":[{\"name\":\"Axes\",\"size\":1302},{\"name\":\"Axis\",\"size\":24593},{\"name\":\"AxisGridLine\",\"size\":652},{\"name\":\"AxisLabel\",\"size\":636},{\"name\":\"CartesianAxes\",\"size\":6703}]},{\"name\":\"controls\",\"children\":[{\"name\":\"AnchorControl\",\"size\":2138},{\"name\":\"ClickControl\",\"size\":3824},{\"name\":\"Control\",\"size\":1353},{\"name\":\"ControlList\",\"size\":4665},{\"name\":\"DragControl\",\"size\":2649},{\"name\":\"ExpandControl\",\"size\":2832},{\"name\":\"HoverControl\",\"size\":4896},{\"name\":\"IControl\",\"size\":763},{\"name\":\"PanZoomControl\",\"size\":5222},{\"name\":\"SelectionControl\",\"size\":7862},{\"name\":\"TooltipControl\",\"size\":8435}]},{\"name\":\"data\",\"children\":[{\"name\":\"Data\",\"size\":20544},{\"name\":\"DataList\",\"size\":19788},{\"name\":\"DataSprite\",\"size\":10349},{\"name\":\"EdgeSprite\",\"size\":3301},{\"name\":\"NodeSprite\",\"size\":19382},{\"name\":\"render\",\"children\":[{\"name\":\"ArrowType\",\"size\":698},{\"name\":\"EdgeRenderer\",\"size\":5569},{\"name\":\"IRenderer\",\"size\":353},{\"name\":\"ShapeRenderer\",\"size\":2247}]},{\"name\":\"ScaleBinding\",\"size\":11275},{\"name\":\"Tree\",\"size\":7147},{\"name\":\"TreeBuilder\",\"size\":9930}]},{\"name\":\"events\",\"children\":[{\"name\":\"DataEvent\",\"size\":2313},{\"name\":\"SelectionEvent\",\"size\":1880},{\"name\":\"TooltipEvent\",\"size\":1701},{\"name\":\"VisualizationEvent\",\"size\":1117}]},{\"name\":\"legend\",\"children\":[{\"name\":\"Legend\",\"size\":20859},{\"name\":\"LegendItem\",\"size\":4614},{\"name\":\"LegendRange\",\"size\":10530}]},{\"name\":\"operator\",\"children\":[{\"name\":\"distortion\",\"children\":[{\"name\":\"BifocalDistortion\",\"size\":4461},{\"name\":\"Distortion\",\"size\":6314},{\"name\":\"FisheyeDistortion\",\"size\":3444}]},{\"name\":\"encoder\",\"children\":[{\"name\":\"ColorEncoder\",\"size\":3179},{\"name\":\"Encoder\",\"size\":4060},{\"name\":\"PropertyEncoder\",\"size\":4138},{\"name\":\"ShapeEncoder\",\"size\":1690},{\"name\":\"SizeEncoder\",\"size\":1830}]},{\"name\":\"filter\",\"children\":[{\"name\":\"FisheyeTreeFilter\",\"size\":5219},{\"name\":\"GraphDistanceFilter\",\"size\":3165},{\"name\":\"VisibilityFilter\",\"size\":3509}]},{\"name\":\"IOperator\",\"size\":1286},{\"name\":\"label\",\"children\":[{\"name\":\"Labeler\",\"size\":9956},{\"name\":\"RadialLabeler\",\"size\":3899},{\"name\":\"StackedAreaLabeler\",\"size\":3202}]},{\"name\":\"layout\",\"children\":[{\"name\":\"AxisLayout\",\"size\":6725},{\"name\":\"BundledEdgeRouter\",\"size\":3727},{\"name\":\"CircleLayout\",\"size\":9317},{\"name\":\"CirclePackingLayout\",\"size\":12003},{\"name\":\"DendrogramLayout\",\"size\":4853},{\"name\":\"ForceDirectedLayout\",\"size\":8411},{\"name\":\"IcicleTreeLayout\",\"size\":4864},{\"name\":\"IndentedTreeLayout\",\"size\":3174},{\"name\":\"Layout\",\"size\":7881},{\"name\":\"NodeLinkTreeLayout\",\"size\":12870},{\"name\":\"PieLayout\",\"size\":2728},{\"name\":\"RadialTreeLayout\",\"size\":12348},{\"name\":\"RandomLayout\",\"size\":870},{\"name\":\"StackedAreaLayout\",\"size\":9121},{\"name\":\"TreeMapLayout\",\"size\":9191}]},{\"name\":\"Operator\",\"size\":2490},{\"name\":\"OperatorList\",\"size\":5248},{\"name\":\"OperatorSequence\",\"size\":4190},{\"name\":\"OperatorSwitch\",\"size\":2581},{\"name\":\"SortOperator\",\"size\":2023}]},{\"name\":\"Visualization\",\"size\":16540}]}]},\"options\":{\"height\":null,\"width\":null,\"fontSize\":10,\"fontFamily\":\"serif\",\"linkColour\":\"#ccc\",\"nodeColour\":\"#fff\",\"nodeStroke\":\"steelblue\",\"textColour\":\"#111\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"opacity\":0.9}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell filename='sankeyNetwork関数'}\n\n```{.r .cell-code}\n# sankeyNetwork（サンキー図）\nURL <- \n  \"https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json\"\n\n# データはforceNetworkと同じように準備する（valueがlink側に必要）\nEnergy <- jsonlite::fromJSON(URL)\nEnergy$links |> head()\n##   source target   value\n## 1      0      1 124.729\n## 2      1      2   0.597\n## 3      1      3  26.862\n## 4      1      4 280.322\n## 5      1      5  81.144\n## 6      6      2  35.000\nEnergy$nodes |> head()\n##                   name\n## 1 Agricultural 'waste'\n## 2       Bio-conversion\n## 3               Liquid\n## 4               Losses\n## 5                Solid\n## 6                  Gas\nsankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = \"source\",\n              Target = \"target\", Value = \"value\", NodeID = \"name\",\n              units = \"TWh\", fontSize = 12, nodeWidth = 30)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"sankeyNetwork html-widget html-fill-item\" id=\"htmlwidget-7f25f047cc533b3754ef\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7f25f047cc533b3754ef\">{\"x\":{\"links\":{\"source\":[0,1,1,1,1,6,7,8,10,9,11,11,11,15,15,15,15,15,15,15,15,15,15,15,23,25,5,5,5,5,5,27,17,17,28,29,2,2,2,2,2,2,2,2,34,24,35,36,38,37,39,39,40,40,41,42,43,43,4,4,4,26,26,26,44,45,46,47],\"target\":[1,2,3,4,5,2,4,9,9,4,12,13,14,16,14,17,12,18,19,13,3,20,21,22,24,24,13,3,26,19,12,15,28,3,18,15,12,30,18,31,32,19,33,20,1,5,26,37,37,2,4,1,14,13,15,14,42,41,19,26,12,15,3,11,15,1,15,15],\"value\":[124.729,0.597,26.862,280.322,81.14400000000001,35,35,11.606,63.965,75.571,10.639,22.505,46.184,104.453,113.726,27.14,342.165,37.797,4.412,40.858,56.691,7.863,90.008,93.494,40.719,82.233,0.129,1.401,151.891,2.096,48.58,7.013,20.897,6.242,20.897,6.995,121.066,128.69,135.835,14.458,206.267,3.64,33.218,4.413,4.375,122.952,839.978,504.287,107.703,611.99,56.587,77.81,193.026,70.672,59.901,19.263,19.263,59.901,0.882,400.12,46.477,525.5309999999999,787.129,79.32899999999999,9.452,182.01,19.013,289.366]},\"nodes\":{\"name\":[\"Agricultural 'waste'\",\"Bio-conversion\",\"Liquid\",\"Losses\",\"Solid\",\"Gas\",\"Biofuel imports\",\"Biomass imports\",\"Coal imports\",\"Coal\",\"Coal reserves\",\"District heating\",\"Industry\",\"Heating and cooling - commercial\",\"Heating and cooling - homes\",\"Electricity grid\",\"Over generation / exports\",\"H2 conversion\",\"Road transport\",\"Agriculture\",\"Rail transport\",\"Lighting & appliances - commercial\",\"Lighting & appliances - homes\",\"Gas imports\",\"Ngas\",\"Gas reserves\",\"Thermal generation\",\"Geothermal\",\"H2\",\"Hydro\",\"International shipping\",\"Domestic aviation\",\"International aviation\",\"National navigation\",\"Marine algae\",\"Nuclear\",\"Oil imports\",\"Oil\",\"Oil reserves\",\"Other waste\",\"Pumped heat\",\"Solar PV\",\"Solar Thermal\",\"Solar\",\"Tidal\",\"UK land based bioenergy\",\"Wave\",\"Wind\"],\"group\":[\"Agricultural 'waste'\",\"Bio-conversion\",\"Liquid\",\"Losses\",\"Solid\",\"Gas\",\"Biofuel imports\",\"Biomass imports\",\"Coal imports\",\"Coal\",\"Coal reserves\",\"District heating\",\"Industry\",\"Heating and cooling - commercial\",\"Heating and cooling - homes\",\"Electricity grid\",\"Over generation / exports\",\"H2 conversion\",\"Road transport\",\"Agriculture\",\"Rail transport\",\"Lighting & appliances - commercial\",\"Lighting & appliances - homes\",\"Gas imports\",\"Ngas\",\"Gas reserves\",\"Thermal generation\",\"Geothermal\",\"H2\",\"Hydro\",\"International shipping\",\"Domestic aviation\",\"International aviation\",\"National navigation\",\"Marine algae\",\"Nuclear\",\"Oil imports\",\"Oil\",\"Oil reserves\",\"Other waste\",\"Pumped heat\",\"Solar PV\",\"Solar Thermal\",\"Solar\",\"Tidal\",\"UK land based bioenergy\",\"Wave\",\"Wind\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"name\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":12,\"fontFamily\":null,\"nodeWidth\":30,\"nodePadding\":10,\"units\":\"TWh\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n### visNetwork\n\n[visNetwork](https://datastorm-open.github.io/visNetwork/)[@visNetwork_bib]はD3.jsとは異なるJavascriptのビジュアライゼーションライブラリである[vis.js](https://visjs.org/)を用いたインタラクティブなネットワーク描画に関するパッケージです。上記の`NetworkD3`とは少し違う感じでネットワークが描画されるので、好みの方を用いるとよいでしょう。\n\n\n::: {.cell filename='ライブラリの読み込み'}\n\n```{.r .cell-code}\npacman::p_load(visNetwork)\n```\n:::\n\n\n#### visNetwork関数\n\n`visNetwork`関数は、`NetworkD3`の`forceNetwork`関数に近い使い勝手の関数で、`forceNetwork`関数と同様にnodeとedgeのデータフレームを引数に取る関数です。ただし、`forceNetwork`関数が引数で色やnode名の指定を行うのに対し、`visNetwork`関数は引数に取ったデータフレームの列名に従ってネットワークを描画するという特徴があります。Rの他のグラフィックライブラリとは少し使い勝手が異なります。\n\nnodeに指定するデータフレームには`id`という名前の列が、edgeに指定するデータフレームには`from`と`to`という名前の列が必要です。この列名を読み取って、`visNetwork`はグラフを描画します。\n\n\n::: {.cell filename='visNetwork関数'}\n\n```{.r .cell-code}\nd <- read.csv(\"./data/chapter33_nara_stations.csv\")\nvt <- read.csv(\"./data/chapter33_nara_stations_vertex_list.csv\")\n\ncolnames(d) <- c(\"from\", \"to\", \"linename\", \"company\")\ncolnames(vt) <- c(\"id\", \"lat\", \"lon\", \"linename\", \"company\")\n\nvisNetwork(nodes = vt, edges = d)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-08f9c58c001ba407d979\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-08f9c58c001ba407d979\">{\"x\":{\"nodes\":{\"id\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"],\"lat\":[34.68077889641153,34.66997984143489,34.64339720801266,34.62100982302106,34.60119543773195,34.57420182671255,34.55911174,34.54543328511998,34.52719176412109,34.51347234556961,34.51078477436202,34.50961825856488,34.59772266332324,34.57763044648121,34.56155155047492,34.543348161339,34.52765142695763,34.51626676022408,34.48866682559694,34.46466321460042,34.45834448,34.45236285,34.42084877882249,34.38266146215452,34.35571728699052,34.58929613435219,34.60149615425941,34.62227622638444,34.6479699755299,34.69332480909848,34.68555025554144,34.67592565829064,34.66550098294679,34.65654675124937,34.64813820858031,34.64006531607362,34.62917355506478,34.61748125646026,34.60599598,34.60099036479767,34.59774906858284,34.58912679518835,34.58517280952235,34.57856652901711,34.57031626307485,34.56934940021956,34.56829566393314,34.72373748110263,34.70172243945424,34.69390609633185,34.68151102159077,34.67053984676916,34.65923128120475,34.64619841955895,34.62041947906572,34.60662381945989,34.59826964651775,34.58457775907492,34.57193856475993,34.55330431156303,34.54178864138176,34.52550929516489,34.51320494803076,34.50924984919699,34.49337312770563,34.53911210202045,34.53161599920064,34.51647123100369,34.51115497242616,34.50854699594273,34.50694131816211,34.49796323,34.49332301951053,34.48612385135785,34.48343873729746,34.47410704338412,34.46487372380226,34.44984226372562,34.44186180817045,34.43159576,34.40729376561155,34.39511489946702,34.38841,34.38366308561198,34.38612467014393,34.39026841927821,34.39549209847647,34.39021851318266,34.48939932064624,34.47597814789609,34.69171006331597,34.69411114338323,34.69693743894673,34.69815792104841,34.68542759,34.55386784122172,34.54635147047126,34.54144051387431,34.53485057281426,34.526179940049,34.51961356895004,34.52069475792074,34.51977847492522,34.51253225676717,34.5129180932103,34.51613962224484,34.52661527,34.52974822358372,34.56602680191052,34.60224893297654,34.60099706553275,34.50834417256181,34.34589064484895,34.71069525271852,34.55365900137742,34.37660548171625,34.46473786196023,34.68435949056003,34.57827531570576],\"lon\":[135.8189537638132,135.8287374343293,135.8262065675336,135.8262913094558,135.8305393407344,135.8350898486471,135.8384381500308,135.8406692552043,135.8485650985864,135.8467190392171,135.8252192687146,135.7651380089752,135.7022739972764,135.7035114437513,135.7018376200836,135.7059144478943,135.7185746398643,135.7447531,135.7346486007671,135.7348526011892,135.7485952199712,135.7632562070261,135.750536634116,135.7127334,135.6977657634497,135.6866161705931,135.7372663,135.7622579282512,135.7892424485712,135.6972458735988,135.7055773447603,135.7072639713512,135.7077754265108,135.7077245211917,135.7078270539694,135.6998019739194,135.7035329555713,135.7034819970984,135.6988849,135.6944875232455,135.7030223118592,135.719070971162,135.7299571680989,135.736703492343,135.7505023288532,135.7669091734583,135.7763138471451,135.7907662439876,135.7842243361619,135.7861176190244,135.7823339741376,135.7819750539546,135.7815159599058,135.779266361666,135.7817696822717,135.7814129129274,135.7837833614022,135.7846406639496,135.7857483816421,135.791147264396,135.7936850172993,135.7948294158887,135.7922984148161,135.7908413491503,135.7926673191986,135.6858456149057,135.6933931123597,135.7051403509105,135.7104053525259,135.7209353872449,135.7422100615471,135.7542600889347,135.7643640163411,135.7802198298992,135.7924536984949,135.7950715892783,135.7976585903959,135.7942803868968,135.7756852980908,135.7597989818987,135.7423910695577,135.7500906964062,135.7653683,135.7865502672284,135.8020103229443,135.8227355703949,135.8445561912245,135.8469605369775,135.7263025742545,135.7315982181241,135.7098099167597,135.7343579607317,135.7496888726569,135.7602933427443,135.8110317314001,135.6673005419264,135.6876505101159,135.703285550317,135.7170657271586,135.7323966842405,135.7416437040496,135.7617419371281,135.7726004747371,135.8151689974774,135.8298019665447,135.8679592908777,135.9051922391519,135.9541360823177,136.0144265783477,135.7945828528153,135.8159978538317,135.7933757903544,135.6831555207892,135.8098843257658,135.7888029062249,135.8528336507365,135.7316286366128,135.8261283890624,136.0345026748359],\"linename\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"田原本線\",\"吉野線\",\"御所線\",\"奈良線\",\"大阪線\"],\"company\":[\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\"]},\"edges\":{\"from\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"王寺\",\"法隆寺\",\"大和小泉\",\"郡山\",\"奈良\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"吉野口\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"尺土\",\"近鉄新庄\",\"忍海\",\"生駒\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"大和西大寺\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"大和八木\",\"耳成\",\"大福\",\"桜井\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"平端\",\"二階堂\",\"前栽\"],\"to\":[\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"畝傍\",\"高田\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"大和二見\",\"王寺\",\"法隆寺\",\"大和小泉\",\"郡山\",\"奈良\",\"平城山\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"西田原本\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"橿原神宮前\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"吉野口\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"吉野\",\"近鉄新庄\",\"忍海\",\"近鉄御所\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"大和西大寺\",\"新大宮\",\"近鉄奈良\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"大和八木\",\"耳成\",\"大福\",\"桜井\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"三本松\",\"二階堂\",\"前栽\",\"天理\"],\"linename\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"天理線\"],\"company\":[\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n`visNetwork`関数にnodeとedgeを指定しただけでは、nodeをドラッグして位置を変えることができる程度で、nodeの情報などは表示されません。nodeをクリックしたときに表示される文字列は`title`という列名に指定します。また、nodeの色を変える場合には、nodeに指定するデータフレームに`color`という列が必要です。この`title`や`color`に指定された値・色を読み取って、`visNetwork`関数はnodeの情報を変更します。\n\n\n::: {.cell filename='nodeの情報を指定する'}\n\n```{.r .cell-code}\nvt$title <- vt$id # nodeをクリックしたときに表示する文字\nvt$color <- if_else(vt$company == \"JR\", \"red\", \"blue\") # nodeの色\nvisNetwork(nodes = vt, edges = d)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-a114b9b3f0273c800a18\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a114b9b3f0273c800a18\">{\"x\":{\"nodes\":{\"id\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"],\"lat\":[34.68077889641153,34.66997984143489,34.64339720801266,34.62100982302106,34.60119543773195,34.57420182671255,34.55911174,34.54543328511998,34.52719176412109,34.51347234556961,34.51078477436202,34.50961825856488,34.59772266332324,34.57763044648121,34.56155155047492,34.543348161339,34.52765142695763,34.51626676022408,34.48866682559694,34.46466321460042,34.45834448,34.45236285,34.42084877882249,34.38266146215452,34.35571728699052,34.58929613435219,34.60149615425941,34.62227622638444,34.6479699755299,34.69332480909848,34.68555025554144,34.67592565829064,34.66550098294679,34.65654675124937,34.64813820858031,34.64006531607362,34.62917355506478,34.61748125646026,34.60599598,34.60099036479767,34.59774906858284,34.58912679518835,34.58517280952235,34.57856652901711,34.57031626307485,34.56934940021956,34.56829566393314,34.72373748110263,34.70172243945424,34.69390609633185,34.68151102159077,34.67053984676916,34.65923128120475,34.64619841955895,34.62041947906572,34.60662381945989,34.59826964651775,34.58457775907492,34.57193856475993,34.55330431156303,34.54178864138176,34.52550929516489,34.51320494803076,34.50924984919699,34.49337312770563,34.53911210202045,34.53161599920064,34.51647123100369,34.51115497242616,34.50854699594273,34.50694131816211,34.49796323,34.49332301951053,34.48612385135785,34.48343873729746,34.47410704338412,34.46487372380226,34.44984226372562,34.44186180817045,34.43159576,34.40729376561155,34.39511489946702,34.38841,34.38366308561198,34.38612467014393,34.39026841927821,34.39549209847647,34.39021851318266,34.48939932064624,34.47597814789609,34.69171006331597,34.69411114338323,34.69693743894673,34.69815792104841,34.68542759,34.55386784122172,34.54635147047126,34.54144051387431,34.53485057281426,34.526179940049,34.51961356895004,34.52069475792074,34.51977847492522,34.51253225676717,34.5129180932103,34.51613962224484,34.52661527,34.52974822358372,34.56602680191052,34.60224893297654,34.60099706553275,34.50834417256181,34.34589064484895,34.71069525271852,34.55365900137742,34.37660548171625,34.46473786196023,34.68435949056003,34.57827531570576],\"lon\":[135.8189537638132,135.8287374343293,135.8262065675336,135.8262913094558,135.8305393407344,135.8350898486471,135.8384381500308,135.8406692552043,135.8485650985864,135.8467190392171,135.8252192687146,135.7651380089752,135.7022739972764,135.7035114437513,135.7018376200836,135.7059144478943,135.7185746398643,135.7447531,135.7346486007671,135.7348526011892,135.7485952199712,135.7632562070261,135.750536634116,135.7127334,135.6977657634497,135.6866161705931,135.7372663,135.7622579282512,135.7892424485712,135.6972458735988,135.7055773447603,135.7072639713512,135.7077754265108,135.7077245211917,135.7078270539694,135.6998019739194,135.7035329555713,135.7034819970984,135.6988849,135.6944875232455,135.7030223118592,135.719070971162,135.7299571680989,135.736703492343,135.7505023288532,135.7669091734583,135.7763138471451,135.7907662439876,135.7842243361619,135.7861176190244,135.7823339741376,135.7819750539546,135.7815159599058,135.779266361666,135.7817696822717,135.7814129129274,135.7837833614022,135.7846406639496,135.7857483816421,135.791147264396,135.7936850172993,135.7948294158887,135.7922984148161,135.7908413491503,135.7926673191986,135.6858456149057,135.6933931123597,135.7051403509105,135.7104053525259,135.7209353872449,135.7422100615471,135.7542600889347,135.7643640163411,135.7802198298992,135.7924536984949,135.7950715892783,135.7976585903959,135.7942803868968,135.7756852980908,135.7597989818987,135.7423910695577,135.7500906964062,135.7653683,135.7865502672284,135.8020103229443,135.8227355703949,135.8445561912245,135.8469605369775,135.7263025742545,135.7315982181241,135.7098099167597,135.7343579607317,135.7496888726569,135.7602933427443,135.8110317314001,135.6673005419264,135.6876505101159,135.703285550317,135.7170657271586,135.7323966842405,135.7416437040496,135.7617419371281,135.7726004747371,135.8151689974774,135.8298019665447,135.8679592908777,135.9051922391519,135.9541360823177,136.0144265783477,135.7945828528153,135.8159978538317,135.7933757903544,135.6831555207892,135.8098843257658,135.7888029062249,135.8528336507365,135.7316286366128,135.8261283890624,136.0345026748359],\"linename\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"田原本線\",\"吉野線\",\"御所線\",\"奈良線\",\"大阪線\"],\"company\":[\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\"],\"title\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"],\"color\":[\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"]},\"edges\":{\"from\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"王寺\",\"法隆寺\",\"大和小泉\",\"郡山\",\"奈良\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"吉野口\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"尺土\",\"近鉄新庄\",\"忍海\",\"生駒\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"大和西大寺\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"大和八木\",\"耳成\",\"大福\",\"桜井\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"平端\",\"二階堂\",\"前栽\"],\"to\":[\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"畝傍\",\"高田\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"大和二見\",\"王寺\",\"法隆寺\",\"大和小泉\",\"郡山\",\"奈良\",\"平城山\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"西田原本\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"橿原神宮前\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"吉野口\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"吉野\",\"近鉄新庄\",\"忍海\",\"近鉄御所\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"大和西大寺\",\"新大宮\",\"近鉄奈良\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"大和八木\",\"耳成\",\"大福\",\"桜井\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"三本松\",\"二階堂\",\"前栽\",\"天理\"],\"linename\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"天理線\"],\"company\":[\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nまた、`visNetwork`ではパイプ演算子（`%>%`や`|>`）を用いてグラフの要素を追加することもできます。`visNodes`関数をパイプで繋ぐことでnodeの編集、`visOptions`をパイプで繋ぐことでオプション設定の変更を行うこともできます。\n\n\n::: {.cell filename='パイプ演算子でグラフを編集する'}\n\n```{.r .cell-code}\nvisNetwork(nodes = vt, edges = d) |> \n  visNodes(shape = \"square\") |> \n  # クリックすると連結したノードがハイライトされる\n  visOptions(highlightNearest = TRUE) \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-04281b94304093a8dc99\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-04281b94304093a8dc99\">{\"x\":{\"nodes\":{\"id\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"],\"lat\":[34.68077889641153,34.66997984143489,34.64339720801266,34.62100982302106,34.60119543773195,34.57420182671255,34.55911174,34.54543328511998,34.52719176412109,34.51347234556961,34.51078477436202,34.50961825856488,34.59772266332324,34.57763044648121,34.56155155047492,34.543348161339,34.52765142695763,34.51626676022408,34.48866682559694,34.46466321460042,34.45834448,34.45236285,34.42084877882249,34.38266146215452,34.35571728699052,34.58929613435219,34.60149615425941,34.62227622638444,34.6479699755299,34.69332480909848,34.68555025554144,34.67592565829064,34.66550098294679,34.65654675124937,34.64813820858031,34.64006531607362,34.62917355506478,34.61748125646026,34.60599598,34.60099036479767,34.59774906858284,34.58912679518835,34.58517280952235,34.57856652901711,34.57031626307485,34.56934940021956,34.56829566393314,34.72373748110263,34.70172243945424,34.69390609633185,34.68151102159077,34.67053984676916,34.65923128120475,34.64619841955895,34.62041947906572,34.60662381945989,34.59826964651775,34.58457775907492,34.57193856475993,34.55330431156303,34.54178864138176,34.52550929516489,34.51320494803076,34.50924984919699,34.49337312770563,34.53911210202045,34.53161599920064,34.51647123100369,34.51115497242616,34.50854699594273,34.50694131816211,34.49796323,34.49332301951053,34.48612385135785,34.48343873729746,34.47410704338412,34.46487372380226,34.44984226372562,34.44186180817045,34.43159576,34.40729376561155,34.39511489946702,34.38841,34.38366308561198,34.38612467014393,34.39026841927821,34.39549209847647,34.39021851318266,34.48939932064624,34.47597814789609,34.69171006331597,34.69411114338323,34.69693743894673,34.69815792104841,34.68542759,34.55386784122172,34.54635147047126,34.54144051387431,34.53485057281426,34.526179940049,34.51961356895004,34.52069475792074,34.51977847492522,34.51253225676717,34.5129180932103,34.51613962224484,34.52661527,34.52974822358372,34.56602680191052,34.60224893297654,34.60099706553275,34.50834417256181,34.34589064484895,34.71069525271852,34.55365900137742,34.37660548171625,34.46473786196023,34.68435949056003,34.57827531570576],\"lon\":[135.8189537638132,135.8287374343293,135.8262065675336,135.8262913094558,135.8305393407344,135.8350898486471,135.8384381500308,135.8406692552043,135.8485650985864,135.8467190392171,135.8252192687146,135.7651380089752,135.7022739972764,135.7035114437513,135.7018376200836,135.7059144478943,135.7185746398643,135.7447531,135.7346486007671,135.7348526011892,135.7485952199712,135.7632562070261,135.750536634116,135.7127334,135.6977657634497,135.6866161705931,135.7372663,135.7622579282512,135.7892424485712,135.6972458735988,135.7055773447603,135.7072639713512,135.7077754265108,135.7077245211917,135.7078270539694,135.6998019739194,135.7035329555713,135.7034819970984,135.6988849,135.6944875232455,135.7030223118592,135.719070971162,135.7299571680989,135.736703492343,135.7505023288532,135.7669091734583,135.7763138471451,135.7907662439876,135.7842243361619,135.7861176190244,135.7823339741376,135.7819750539546,135.7815159599058,135.779266361666,135.7817696822717,135.7814129129274,135.7837833614022,135.7846406639496,135.7857483816421,135.791147264396,135.7936850172993,135.7948294158887,135.7922984148161,135.7908413491503,135.7926673191986,135.6858456149057,135.6933931123597,135.7051403509105,135.7104053525259,135.7209353872449,135.7422100615471,135.7542600889347,135.7643640163411,135.7802198298992,135.7924536984949,135.7950715892783,135.7976585903959,135.7942803868968,135.7756852980908,135.7597989818987,135.7423910695577,135.7500906964062,135.7653683,135.7865502672284,135.8020103229443,135.8227355703949,135.8445561912245,135.8469605369775,135.7263025742545,135.7315982181241,135.7098099167597,135.7343579607317,135.7496888726569,135.7602933427443,135.8110317314001,135.6673005419264,135.6876505101159,135.703285550317,135.7170657271586,135.7323966842405,135.7416437040496,135.7617419371281,135.7726004747371,135.8151689974774,135.8298019665447,135.8679592908777,135.9051922391519,135.9541360823177,136.0144265783477,135.7945828528153,135.8159978538317,135.7933757903544,135.6831555207892,135.8098843257658,135.7888029062249,135.8528336507365,135.7316286366128,135.8261283890624,136.0345026748359],\"linename\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"田原本線\",\"吉野線\",\"御所線\",\"奈良線\",\"大阪線\"],\"company\":[\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\"],\"title\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"],\"color\":[\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"red\",\"red\",\"red\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"],\"label\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"法隆寺\",\"大和小泉\",\"郡山\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"近鉄新庄\",\"忍海\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"耳成\",\"大福\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"二階堂\",\"前栽\",\"畝傍\",\"大和二見\",\"平城山\",\"西田原本\",\"吉野\",\"近鉄御所\",\"近鉄奈良\",\"三本松\"]},\"edges\":{\"from\":[\"奈良\",\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"金橋\",\"王寺\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"三郷\",\"王寺\",\"法隆寺\",\"大和小泉\",\"郡山\",\"奈良\",\"生駒\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"新王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"高の原\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"二上山\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"吉野口\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"尺土\",\"近鉄新庄\",\"忍海\",\"生駒\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"大和西大寺\",\"新大宮\",\"関屋\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"大和八木\",\"耳成\",\"大福\",\"桜井\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"平端\",\"二階堂\",\"前栽\"],\"to\":[\"京終\",\"帯解\",\"櫟本\",\"天理\",\"長柄\",\"柳本\",\"巻向\",\"三輪\",\"桜井\",\"香久山\",\"畝傍\",\"高田\",\"畠田\",\"志都美\",\"香芝\",\"JR五位堂\",\"高田\",\"大和新庄\",\"御所\",\"玉手\",\"掖上\",\"吉野口\",\"北宇智\",\"五条\",\"大和二見\",\"王寺\",\"法隆寺\",\"大和小泉\",\"郡山\",\"奈良\",\"平城山\",\"菜畑\",\"一分\",\"南生駒\",\"萩の台\",\"東山\",\"元山上口\",\"平群\",\"竜田川\",\"勢野北口\",\"信貴山下\",\"王寺\",\"大輪田\",\"佐味田川\",\"池部\",\"箸尾\",\"但馬\",\"黒田\",\"西田原本\",\"平城\",\"大和西大寺\",\"尼ヶ辻\",\"西ノ京\",\"九条\",\"近鉄郡山\",\"筒井\",\"平端\",\"ファミリー公園前\",\"結崎\",\"石見\",\"田原本\",\"笠縫\",\"新ノ口\",\"大和八木\",\"八木西口\",\"畝傍御陵前\",\"橿原神宮前\",\"二上神社口\",\"当麻寺\",\"磐城\",\"尺土\",\"高田市\",\"浮孔\",\"坊城\",\"橿原神宮西口\",\"橿原神宮前\",\"岡寺\",\"飛鳥\",\"壺阪山\",\"市尾\",\"葛\",\"吉野口\",\"薬水\",\"福神\",\"大阿太\",\"下市口\",\"越部\",\"六田\",\"大和上市\",\"吉野神宮\",\"吉野\",\"近鉄新庄\",\"忍海\",\"近鉄御所\",\"東生駒\",\"富雄\",\"学園前\",\"菖蒲池\",\"大和西大寺\",\"新大宮\",\"近鉄奈良\",\"二上\",\"近鉄下田\",\"五位堂\",\"築山\",\"大和高田\",\"松塚\",\"真菅\",\"大和八木\",\"耳成\",\"大福\",\"桜井\",\"大和朝倉\",\"長谷寺\",\"榛原\",\"室生口大野\",\"三本松\",\"二階堂\",\"前栽\",\"天理\"],\"linename\":[\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"万葉まほろば線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"和歌山線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"大和路線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"生駒線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"田原本線\",\"京都線\",\"京都線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"橿原線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"南大阪線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"吉野線\",\"御所線\",\"御所線\",\"御所線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"奈良線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"大阪線\",\"天理線\",\"天理線\",\"天理線\"],\"company\":[\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"JR\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\",\"近鉄\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"square\"},\"manipulation\":{\"enabled\":false}},\"groups\":null,\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [
      "chapter33_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<script src=\"site_libs/d3-4.5.0/d3.min.js\"></script>\n<script src=\"site_libs/forceNetwork-binding-0.4/forceNetwork.js\"></script>\n<script src=\"site_libs/dendroNetwork-binding-0.4/dendroNetwork.js\"></script>\n<script src=\"site_libs/radialNetwork-binding-0.4/radialNetwork.js\"></script>\n<script src=\"site_libs/diagonalNetwork-binding-0.4/diagonalNetwork.js\"></script>\n<script src=\"site_libs/sankey-1/sankey.js\"></script>\n<script src=\"site_libs/sankeyNetwork-binding-0.4/sankeyNetwork.js\"></script>\n<link href=\"site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}