{
  "hash": "c0144fcc88754fa3b84576718c4323a1",
  "result": {
    "markdown": "# 日時データの取り扱い\n\n## Date POSIXct POSIXlt POSIXt\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: 表1：R標準の日時関連関数群\n\n|関数名                        |適用する演算                                    |\n|:-----------------------------|:-----------------------------------------------|\n|Sys.Date()                    |現在の日付を返す(Date)                          |\n|Sys.Time()                    |現在の日時を返す(POSIXct)                       |\n|Sys.timezone()                |現在のタイムゾーンを返す                        |\n|as.POSIXlt(x)                 |xをPOSIXltに変換する                            |\n|weekdays(x)                   |xの曜日を返す                                   |\n|months(x)                     |xの月名を返す                                   |\n|quarters(x)                   |xの四半期を返す                                 |\n|ISOdatetime(y, m, d, h, m, s) |POSIXctオブジェクトを作成                       |\n|seq(x, by, length.out)        |xからbyの間隔でlength.outの長さのベクターを作成 |\n|cut.POSIXt(x, breaks)         |xをbreaksで丸めた因子を作成                     |\n|min(x)                        |xの最小値を返す                                 |\n|max(x)                        |xの最大値を返す                                 |\n|mean(x)                       |xの平均値を返す                                 |\n|range(x)                      |xの範囲を返す                                   |\n|difftime(x, y)                |xとyの時間差を返す                              |\n|round(x, unit)                |xをunitにまるめて返す                           |\n|Sys.sleep(sec)                |演算をsec秒停止する                             |\n|tic()                         |時間計測を開始（tictocパッケージ）              |\n|toc()                         |時間計測を終了（tictocパッケージ）              |\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31\"\n```\n:::\n\n```{.r .cell-code}\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:57:18 JST\"\n```\n:::\n\n```{.r .cell-code}\nSys.timezone()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Asia/Tokyo\"\n```\n:::\n\n```{.r .cell-code}\nSys.Date() |> class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nSys.time() |> class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n:::\n\n```{.r .cell-code}\nSys.time() |> as.POSIXct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:57:18 JST\"\n```\n:::\n\n```{.r .cell-code}\nSys.time() |> as.POSIXlt()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:57:18 JST\"\n```\n:::\n\n```{.r .cell-code}\nt <- Sys.time()\nas.numeric(t) # 1970/1/1からの時間（秒）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1698731838\n```\n:::\n\n```{.r .cell-code}\nt$year # エラー\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in t$year: $ operator is invalid for atomic vectors\n```\n:::\n\n```{.r .cell-code}\nt <- as.POSIXlt(t)\nclass(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"POSIXlt\" \"POSIXt\" \n```\n:::\n\n```{.r .cell-code}\nas.numeric(t) # POSIXltも数値に置き換えできる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1698731838\n```\n:::\n\n```{.r .cell-code}\nas.POSIXlt(t, tz = \"GMT\") # UTCに変換\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:57:18 JST\"\n```\n:::\n\n```{.r .cell-code}\nas.POSIXlt(t, tz = \"EST\") # アメリカ東時間に変換\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:57:18 JST\"\n```\n:::\n\n```{.r .cell-code}\nt$year # POSIXltは$で呼び出し可能\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 123\n```\n:::\n\n```{.r .cell-code}\nt$mon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nt$mday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31\n```\n:::\n\n```{.r .cell-code}\nt$hour\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\nt$min\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57\n```\n:::\n\n```{.r .cell-code}\nt$sec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18.07532\n```\n:::\n\n```{.r .cell-code}\nt$wday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nt$yday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 303\n```\n:::\n\n```{.r .cell-code}\nweekdays(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"火曜日\"\n```\n:::\n\n```{.r .cell-code}\nweekdays(as.POSIXlt(t, tz=\"EST\")) # US時間に変更しても，日本語で出てくる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"火曜日\"\n```\n:::\n\n```{.r .cell-code}\nmonths(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"10月\"\n```\n:::\n\n```{.r .cell-code}\nquarters(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Q4\"\n```\n:::\n\n```{.r .cell-code}\nround(t, unit=\"year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-01-01 JST\"\n```\n:::\n\n```{.r .cell-code}\nISOdatetime(2022, 2, 22, 2, 22, 22) # 2022/2/22 2:22:22を作成\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-02-22 02:22:22 JST\"\n```\n:::\n\n```{.r .cell-code}\nday1 <- as.POSIXlt(\"2022-2-22\")\nseq.POSIXt(day1, by=\"day\", length.out=10) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2022-02-22 JST\" \"2022-02-23 JST\" \"2022-02-24 JST\" \"2022-02-25 JST\"\n [5] \"2022-02-26 JST\" \"2022-02-27 JST\" \"2022-02-28 JST\" \"2022-03-01 JST\"\n [9] \"2022-03-02 JST\" \"2022-03-03 JST\"\n```\n:::\n\n```{.r .cell-code}\nday2 <- as.Date(\"2022-2-22\")\nseq.POSIXt(day2, by=\"day\", length.out=10) # POSIXtではないのでエラー\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in seq.POSIXt(day2, by = \"day\", length.out = 10): 'from' must be a \"POSIXt\" object\n```\n:::\n\n```{.r .cell-code}\nseq(day2, by=\"1 week\", length.out=10) # seqで作成できる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2022-02-22\" \"2022-03-01\" \"2022-03-08\" \"2022-03-15\" \"2022-03-22\"\n [6] \"2022-03-29\" \"2022-04-05\" \"2022-04-12\" \"2022-04-19\" \"2022-04-26\"\n```\n:::\n\n```{.r .cell-code}\nhdays <- seq.POSIXt(day1, by=\"day\", length.out = 25)\ncutdays <- cut.POSIXt(hdays, \"weeks\")\ncutdays[1:14]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 2022-02-21 2022-02-21 2022-02-21 2022-02-21 2022-02-21 2022-02-21\n [7] 2022-02-28 2022-02-28 2022-02-28 2022-02-28 2022-02-28 2022-02-28\n[13] 2022-02-28 2022-03-07\nLevels: 2022-02-21 2022-02-28 2022-03-07 2022-03-14\n```\n:::\n\n```{.r .cell-code}\nclass(cutdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nlevels(cutdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-02-21\" \"2022-02-28\" \"2022-03-07\" \"2022-03-14\"\n```\n:::\n\n```{.r .cell-code}\nmin(hdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-02-22 JST\"\n```\n:::\n\n```{.r .cell-code}\nmax(hdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-03-18 JST\"\n```\n:::\n\n```{.r .cell-code}\nmean(hdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-03-06 JST\"\n```\n:::\n\n```{.r .cell-code}\nrange(hdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-02-22 JST\" \"2022-03-18 JST\"\n```\n:::\n\n```{.r .cell-code}\ndifftime(max(hdays), min(hdays))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 24 days\n```\n:::\n\n```{.r .cell-code}\nmax(hdays) - min(hdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 24 days\n```\n:::\n\n```{.r .cell-code}\nweekdays(hdays) # ベクターでも処理可能\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"火曜日\" \"水曜日\" \"木曜日\" \"金曜日\" \"土曜日\" \"日曜日\" \"月曜日\" \"火曜日\"\n [9] \"水曜日\" \"木曜日\" \"金曜日\" \"土曜日\" \"日曜日\" \"月曜日\" \"火曜日\" \"水曜日\"\n[17] \"木曜日\" \"金曜日\" \"土曜日\" \"日曜日\" \"月曜日\" \"火曜日\" \"水曜日\" \"木曜日\"\n[25] \"金曜日\"\n```\n:::\n\n```{.r .cell-code}\nweekdays(hdays, abbreviate = T) # 省略形\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"火\" \"水\" \"木\" \"金\" \"土\" \"日\" \"月\" \"火\" \"水\" \"木\" \"金\" \"土\" \"日\" \"月\" \"火\"\n[16] \"水\" \"木\" \"金\" \"土\" \"日\" \"月\" \"火\" \"水\" \"木\" \"金\"\n```\n:::\n:::\n\n\n?strptime で出てくるのを整理する\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.POSIXlt(\"2022-2-22 11:11:11\", formats=\"%Y-%m-%d %H:%M:%OS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-02-22 11:11:11 JST\"\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: 表2：日時formatの記載一覧\n\n|記号 |意味                                            |\n|:----|:-----------------------------------------------|\n|%a   |省略した曜日名（Mon, Tueなど）                  |\n|%A   |省略しない曜日名（Mondayなど）                  |\n|%b   |省略した月名（Jan，Febなど）                    |\n|%B   |省略しない月名（Januaryなど）                   |\n|%c   |日時（通常表示はこれ，%Y-%m-%d %H:%M:%Sと同じ） |\n|%C   |世紀                                            |\n|%d   |日（01-30日）                                   |\n|%D   |日付（%Y-%m-%dと同じ）                          |\n|%e   |日（1-30日，ゼロがないもの）                    |\n|%F   |%Y-%m-%dと同じ                                  |\n|%g   |week-based-yearの最後2桁（1-99）                |\n|%G   |week-based-year（01-99）                        |\n|%h   |%bと同じ                                        |\n|%H   |時間（00-23）                                   |\n|%I   |時間（00-12）                                   |\n|%j   |年基準の日数（001-366）                         |\n|%m   |月（01-12）                                     |\n|%M   |分（00-59）                                     |\n|%n   |新しい行（出力），スペース（入力）              |\n|%p   |AM・PMの表記                                    |\n|%r   |%I:%M:%S %pと同じ                               |\n|%R   |%H:%Mと同じ                                     |\n|%S   |秒（00-61）                                     |\n|%t   |タブ切り（出力），スペース（入力）              |\n|%T   |%H:%M:%Sと同じ                                  |\n|%u   |週の日数（1-7，1は月曜）                        |\n|%U   |日曜日を始めとするweek of the year（00-53）     |\n|%V   |ISO8601に従ったweek of the year（01-53）        |\n|%w   |週の日数（0-6，0は日曜）                        |\n|%W   |月曜日を始めとするweek of the year（00-53）     |\n|%x   |%y/%m/%dと同じ                                  |\n|%X   |%H:%M:%Sと同じ                                  |\n|%y   |世紀表現なしの年（00-99）                       |\n|%Y   |正規表現込みの年（2023など）                    |\n|%z   |UTCからの時間差表現（-0800など）                |\n|%Z   |タイムゾーンの出力                              |\n:::\n:::\n\n\n## Sys.sleep\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.sleep(5) # 5秒待つ\n```\n:::\n\n\n### 時間計測\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- Sys.time()\nSys.sleep(3)\nSys.time() - t\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 3.070533 secs\n```\n:::\n\n```{.r .cell-code}\ndifftime(Sys.time(), t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 3.071831 secs\n```\n:::\n:::\n\n\n### tictoc\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tictoc)\ntic()\nSys.sleep(3)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.05 sec elapsed\n```\n:::\n\n```{.r .cell-code}\ntic(\"first\")\ntic(\"second\")\ntic(\"third\")\ntoc() # 最後から取り出される\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthird: 0 sec elapsed\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsecond: 0 sec elapsed\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst: 0.02 sec elapsed\n```\n:::\n:::\n\n\n## tsオブジェクト\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: 表3：tsオブジェクトに関する関数群\n\n|関数名                  |適用する演算                                             |\n|:-----------------------|:--------------------------------------------------------|\n|ts(x, frequency, start) |frequency周期で，startから始まるtsオブジェクトを作成する |\n|as.ts(x)                |tsに変換する                                             |\n|is.ts(x)                |tかどうか確認する                                        |\n|tsp(x)                  |tsオブジェクトを変換する                                 |\n|cycle(x)                |frequencyの周期の位置を返す                              |\n|frequency(x)            |frequencyを返す                                          |\n|deltat(x)               |データの時間間隔を返す                                   |\n|window(x, start, end)   |startからendまでのデータを返す                           |\n|time(x)                 |時間に変換する                                           |\n|start(x)                |開始日時を返す                                           |\n|end(x)                  |終了日時を返す                                           |\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvalue <- rep(1:3, 8)\ntsobj <- ts(value, frequency = 1, start=c(2023))\ntsobj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = 2023 \nEnd = 2046 \nFrequency = 1 \n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n```\n:::\n\n```{.r .cell-code}\nas.ts(1:12) # tsに変換\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = 1 \nEnd = 12 \nFrequency = 1 \n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n```\n:::\n\n```{.r .cell-code}\ntsobj |> is.ts() # tsオブジェクトであることを確認\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nts(value, frequency = 4, start=c(2023)) # 4半期ごとのデータ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Qtr1 Qtr2 Qtr3 Qtr4\n2023    1    2    3    1\n2024    2    3    1    2\n2025    3    1    2    3\n2026    1    2    3    1\n2027    2    3    1    2\n2028    3    1    2    3\n```\n:::\n\n```{.r .cell-code}\nts(value, frequency = 12, start=c(2023)) # 月次のデータ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n2023   1   2   3   1   2   3   1   2   3   1   2   3\n2024   1   2   3   1   2   3   1   2   3   1   2   3\n```\n:::\n\n```{.r .cell-code}\ntsobj2 <- ts(value, frequency = 4, start=c(2023))\n\ntsobj2 |> tsp() # 2023年から2028年4Qまで四半期置きのデータ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023.00 2028.75    4.00\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> cycle() # 四半期（cycle）についてのラベル\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Qtr1 Qtr2 Qtr3 Qtr4\n2023    1    2    3    4\n2024    1    2    3    4\n2025    1    2    3    4\n2026    1    2    3    4\n2027    1    2    3    4\n2028    1    2    3    4\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> frequency() # frequencyは4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> deltat() # データの間隔は1/4年\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.25\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> window(c(2025, 1), c(2026, 4)) # 2025年1Qから2026年4Qまでのデータ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Qtr1 Qtr2 Qtr3 Qtr4\n2025    3    1    2    3\n2026    1    2    3    1\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> time() # 時間を数値に変換\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Qtr1    Qtr2    Qtr3    Qtr4\n2023 2023.00 2023.25 2023.50 2023.75\n2024 2024.00 2024.25 2024.50 2024.75\n2025 2025.00 2025.25 2025.50 2025.75\n2026 2026.00 2026.25 2026.50 2026.75\n2027 2027.00 2027.25 2027.50 2027.75\n2028 2028.00 2028.25 2028.50 2028.75\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> start() # 2023年1Qからのデータ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023    1\n```\n:::\n\n```{.r .cell-code}\ntsobj2 |> end() # 2028年4Qまでのデータ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2028    4\n```\n:::\n:::\n\n\n## lubridateパッケージ\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: 表2：lubridateパッケージの関数群\n\n|関数名                    |適用する演算                                             |\n|:-------------------------|:--------------------------------------------------------|\n|ymd(x), mdy(x), dmy(x)    |xを日付に変換                                            |\n|ymd_hms(x), ymd_hm(x)     |xを日時に変換                                            |\n|hms(x)                    |xを時間に変換                                            |\n|parse_date_time(x, order) |xをorderに従い日時に変換                                 |\n|year(x)                   |xの年を返す                                              |\n|year(x)<-                 |xの年を代入値に変換する                                  |\n|month(x)                  |xの月を返す                                              |\n|day(x)                    |xの日を返す                                              |\n|hour(x)                   |xの時間を返す                                            |\n|minute(x)                 |xの分を返す                                              |\n|second(x)                 |xの秒を返す                                              |\n|tz(x)                     |タイムゾーンを返す                                       |\n|now()                     |現在の日時を返す                                         |\n|today()                   |現在の日付を返す                                         |\n|stamp(char)(x)            |xをcharの文字列に合わせて返す                            |\n|duration(x, units)        |単位がunits，値がxの時間差（duration）オブジェクトを作成 |\n|years(n)                  |n年のdurationオブジェクトを作成                          |\n|months(n)                 |n月のdurationオブジェクトを作成                          |\n|days(n)                   |n日のdurationオブジェクトを作成                          |\n|hours(n)                  |n時間のdurationオブジェクトを作成                        |\n|minutes(n)                |n分のdurationオブジェクトを作成                          |\n|seconds(n)                |n秒のdurationオブジェクトを作成                          |\n|am(x)                     |xが午前中ならTRUEを返す                                  |\n|pm(x)                     |xが午後ならTRUEを返す                                    |\n|interval(x, y)            |xとyのintervalオブジェクトを作成                         |\n|int_length(x)             |xの期間の長さを返す                                      |\n|int_overlaps(x, y)        |xとyに時間の重なりがあればTRUEを返す                     |\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(lubridate)\n\n# どんな書き方でも読み込んでくれる\nymd(\"20231020\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"2023/10/20\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"2023-10-20\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"23 10 20\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nymd(20231020)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nymd(231020)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nmdy(\"10/20/2023\") # USでは月/日/年\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\ndmy(\"20/10/2023\") # ヨーロッパでは日/月/年\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20\"\n```\n:::\n\n```{.r .cell-code}\nym(\"2023/10\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-01\"\n```\n:::\n\n```{.r .cell-code}\nymd_hms(\"2023/10/20 22:22:22\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20 22:22:22 UTC\"\n```\n:::\n\n```{.r .cell-code}\nymd_hms(231020222222)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-20 22:22:22 UTC\"\n```\n:::\n\n```{.r .cell-code}\nhms(\"2:22:22\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2H 22M 22S\"\n```\n:::\n\n```{.r .cell-code}\nhms(22222) # エラー．こちらは読んでくれない\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in .parse_hms(..., order = \"HMS\", quiet = quiet): Some strings failed\nto parse\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nparse_date_time(\"2023/12/21\", \"ymd\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-12-21 UTC\"\n```\n:::\n\n```{.r .cell-code}\nt <- ymd(\"2023/10/20\")\nclass(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nyear(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023\n```\n:::\n\n```{.r .cell-code}\nyear(t) <- 2024\nt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-10-20\"\n```\n:::\n\n```{.r .cell-code}\ntz(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"UTC\"\n```\n:::\n\n```{.r .cell-code}\nis.Date(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.POSIXct(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.POSIXlt(t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nnow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:57:25 JST\"\n```\n:::\n\n```{.r .cell-code}\ntoday()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31\"\n```\n:::\n\n```{.r .cell-code}\nstamp(\"1970/1/1 12:00:00\")(now())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMultiple formats matched: \"%Y/%Om/%d %H:%M:%S\"(1), \"%Y/%d/%Om %H:%M:%S\"(1), \"%Y/%m/%d %H:%M:%S\"(1), \"%Y/%d/%m %H:%M:%S\"(1)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing: \"%Y/%Om/%d %H:%M:%S\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023/10/31 14:57:25\"\n```\n:::\n\n```{.r .cell-code}\nstamp(\"1970/1/1 12:00:00に作成されたデータ\")(now())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMultiple formats matched: \"%Y/%Om/%d %H:%M:%Sに作成されたデータ\"(1), \"%Y/%d/%Om %H:%M:%Sに作成されたデータ\"(1), \"%Y/%m/%d %H:%M:%Sに作成されたデータ\"(1), \"%Y/%d/%m %H:%M:%Sに作成されたデータ\"(1)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing: \"%Y/%Om/%d %H:%M:%Sに作成されたデータ\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023/10/31 14:57:25に作成されたデータ\"\n```\n:::\n\n```{.r .cell-code}\nstamp_date(\"1970/1/1\")(now())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMultiple formats matched: \"%Y/%Om/%d\"(1), \"%Y/%d/%Om\"(1), \"%Y/%m/%d\"(1), \"%Y/%d/%m\"(1)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing: \"%Y/%Om/%d\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023/10/31\"\n```\n:::\n\n```{.r .cell-code}\nduration(90, \"seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"90s (~1.5 minutes)\"\n```\n:::\n\n```{.r .cell-code}\nnow() + duration(10, \"years\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2033-10-31 02:57:25 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() + years(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2033-10-31 14:57:25 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() + months(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nnow() + days(30)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-11-30 14:57:25 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() + hours(40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-11-02 06:57:25 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() + minutes(50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 15:47:25 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() + seconds(60)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 14:58:25 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() |> round_date(unit=\"month\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-11-01 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() |> floor_date(unit=\"day\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() |> ceiling_date(unit=\"hour\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-10-31 15:00:00 JST\"\n```\n:::\n\n```{.r .cell-code}\nnow() |> am()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nnow() |> pm()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nintr1 <-  interval(ymd(\"2023-10-20\"), ymd(\"2023-10-30\"))\nintr2 <-  interval(ymd(\"2023-10-25\"), ymd(\"2023-11-5\"))\n\nintr1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023-10-20 UTC--2023-10-30 UTC\n```\n:::\n\n```{.r .cell-code}\nintr2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023-10-25 UTC--2023-11-05 UTC\n```\n:::\n\n```{.r .cell-code}\nint_length(intr1) # 秒で出てくる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 864000\n```\n:::\n\n```{.r .cell-code}\nint_overlaps(intr1, intr2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n",
    "supporting": [
      "chapter17_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}