{
  "hash": "e78c38987c0670f0f7382a6adbca6741",
  "result": {
    "markdown": "# 数値の取り扱い\n\nRの型で最もよく利用するのは数値（numeric）です．数値や，数値のベクターを用いて演算するのはRのプログラミングの基礎となります．以下では，数値を取り扱う際に用いる関数や手法を紹介します．\n\n## 数値を引数とする関数\n\nまずは，数値を演算するときに用いる関数を紹介します．よく用いられる関数は以下の通りです（xは数値，yは引数）．関数は演算子より優先的に計算されます．引数である数値はベクターでも問題ありません．\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表1：数値の演算に用いる関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> xに適用される計算手法 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> sqrt(x) </td>\n   <td style=\"text-align:left;\"> 平方根 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> exp(x) </td>\n   <td style=\"text-align:left;\"> e（ネイピア数，自然対数の底）のx乗 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> log(x, base=y) </td>\n   <td style=\"text-align:left;\"> yを底にした対数 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> log(x) </td>\n   <td style=\"text-align:left;\"> 自然対数 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> log10(x) </td>\n   <td style=\"text-align:left;\"> 常用対数 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> log2(x) </td>\n   <td style=\"text-align:left;\"> 底が2の対数 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sin(x) </td>\n   <td style=\"text-align:left;\"> サイン（xはラジアン） </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cos(x) </td>\n   <td style=\"text-align:left;\"> コサイン </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tan(x) </td>\n   <td style=\"text-align:left;\"> タンジェント </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> acos(x) </td>\n   <td style=\"text-align:left;\"> アークサイン（サインの逆関数） </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> asin(x) </td>\n   <td style=\"text-align:left;\"> アークコサイン </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> atan(x) </td>\n   <td style=\"text-align:left;\"> アークタンジェント </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> round(x, digits=y) </td>\n   <td style=\"text-align:left;\"> 小数点以下y桁で四捨五入 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ceiling(x) </td>\n   <td style=\"text-align:left;\"> 切り上げ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> floor(x) </td>\n   <td style=\"text-align:left;\"> 切り下げ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> trunc(x) </td>\n   <td style=\"text-align:left;\"> 切り捨て </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> signif(x, digits=y) </td>\n   <td style=\"text-align:left;\"> y桁を残して四捨五入 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> abs(x) </td>\n   <td style=\"text-align:left;\"> xの絶対値 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell filenames='数値演算の関数'}\n\n```{.r .cell-code}\nsqrt(9) # 平方根\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nexp(1) # 指数変換\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.718282\n```\n:::\n\n```{.r .cell-code}\nlog(8, base = 2) # 底が2の対数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nlog(10) # 底がeの対数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.302585\n```\n:::\n\n```{.r .cell-code}\nlog10(10) # 底が10の対数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nlog2(10) # 底が2の対数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.321928\n```\n:::\n\n```{.r .cell-code}\nsin(0.5*pi) # サイン\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ncos(pi) # コサイン\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\ntan(0.25*pi) # タンジェント\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nasin(0.5) # アークサイン（サインの逆関数）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5235988\n```\n:::\n\n```{.r .cell-code}\nacos(0.5) # アークコサイン\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.047198\n```\n:::\n\n```{.r .cell-code}\natan(0.5) # アークタンジェント\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4636476\n```\n:::\n\n```{.r .cell-code}\nround(pi, digits=2) # 四捨五入\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.14\n```\n:::\n\n```{.r .cell-code}\nceiling(pi) # 切り上げ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nfloor(pi) # 切り下げ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ntrunc(pi) # 切り捨て\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nsignif(pi*100, digits=2) # 2桁以下を四捨五入\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 310\n```\n:::\n\n```{.r .cell-code}\nabs(-5) # 絶対値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nlog2(c(2, 4, 8, 16, 32, 64)) # ベクターを引数にする時\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6\n```\n:::\n:::\n\n\n> Rのround関数は概ね四捨五入ですが，正確には[四捨五入にはなっていない場合](https://www.atleaf.co.jp/column.html?pageId=45)があるので，注意が必要です．\n\n## 組み合わせ・階乗・順列\n\n統計は確率と密接な関係があります．高校数学の確率で習ったように，確率の計算では順列・組合せの数が重要となります．Rには組み合わせを計算する関数として，<font color = \"red\">**choose関数**</font>があります．また，階乗を計算する関数は<font color = \"red\">**factorial関数**</font>です．順列を計算する関数はないため，階乗を用いて順列を計算する必要があります．\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表2：数値のベクター作成・組み合わせなどの関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> xに適用される計算手法 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x:y </td>\n   <td style=\"text-align:left;\"> xからyまで連続する整数 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> seq(x, y, by = z) </td>\n   <td style=\"text-align:left;\"> xからyまでz間隔での数列 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rep(x, y) </td>\n   <td style=\"text-align:left;\"> xをy回繰り返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cumsum(x) </td>\n   <td style=\"text-align:left;\"> xの累積和 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cumprod(x) </td>\n   <td style=\"text-align:left;\"> xの累積積 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> choose(x, y) </td>\n   <td style=\"text-align:left;\"> x個からy個を選ぶ組み合わせ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> factorial(x) </td>\n   <td style=\"text-align:left;\"> xの階乗 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell filename='組み合わせと階乗'}\n\n```{.r .cell-code}\nchoose(5, 2) # 5個から2個を選ぶ組み合わせ（5C2）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nfactorial(3) # 3の階乗（1 * 2 * 3）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nfactorial(5)/factorial(2) # 5個の要素から3つを並べる順列(5P3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n:::\n\n\n## 数列の作成\n\nRでは，ベクターは**c関数**を用いて作成します．しかし，長いベクターをc関数で自作するのは大変ですし，等差数列や等比数列を作るのにfor文を用いるのも面倒です．Rでは，数列を作る関数を用いて，等差数列などを作成することができます．また，繰り返しのあるベクターも，関数により作成することができます．\n\n等差数列の作成には，for文の説明時に用いた<font color=\"red\"> **:（コロン）**</font>や<font color=\"red\">**seq関数**</font>を用います．等比数列は，簡単なものであればseq関数と累乗を用いて作成できます．繰り返しのあるベクターは<font color=\"red\">**rep関数**</font>を用いて作成できます．\n\n\n::: {.cell filename='seq関数とrep関数'}\n\n```{.r .cell-code}\n1:10 # 1から10まで公差1の数列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nseq(from = 1, to = 10, by=3) # 1から10まで公差3の等差数列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  7 10\n```\n:::\n\n```{.r .cell-code}\nseq(1, 10, length.out=3) # 1から10まで等間隔で，3つの長さの数列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1.0  5.5 10.0\n```\n:::\n\n```{.r .cell-code}\n3 ^ (0:10) # 公比3の等比数列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]     1     3     9    27    81   243   729  2187  6561 19683 59049\n```\n:::\n\n```{.r .cell-code}\n3 ^ seq(0, 10, by=2) # 公比9の等比数列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]     1     9    81   729  6561 59049\n```\n:::\n\n```{.r .cell-code}\nrep(1:3, 5) # 1, 2, 3を5回繰り返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n```\n:::\n\n```{.r .cell-code}\nrep(1:3, c(3, 3, 3)) # 1, 2, 3をそれぞれ3回繰り返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 2 2 2 3 3 3\n```\n:::\n\n```{.r .cell-code}\nrep(1:3, c(3, 2, 1)) # 1を3回，2を2回，3を1回繰り返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 2 2 3\n```\n:::\n\n```{.r .cell-code}\nrep(1:3, length.out=10) # 1, 2, 3を長さ10まで繰り返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 2 3 1 2 3 1 2 3 1\n```\n:::\n\n```{.r .cell-code}\nrep(c(\"apple\", \"orange\", \"banana\"), 2) # どの型でも繰り返しができる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple\"  \"orange\" \"banana\" \"apple\"  \"orange\" \"banana\"\n```\n:::\n:::\n\n\n## 累積和・累積積\n\nRで累積和（ベクターの前から順番に足し算したもの）と累積積（前から順番に掛け算したもの）の数列を作る時には，<font color=\"red\">**cumsum関数**</font>と<font color=\"red\">**cumprod関数**</font>を用います．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncumsum(1:5) # 累積和\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  3  6 10 15\n```\n:::\n\n```{.r .cell-code}\ncumprod(1:5) # 累積積\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]   1   2   6  24 120\n```\n:::\n:::\n\n\n## ベクターの基礎演算と基礎統計量\n\n数値のベクターに対して，平均値や標準偏差などを計算する関数も，Rは備えています．代表的な関数を以下に示します．\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表3：数値ベクターの演算に用いる関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> x，yに適用される計算手法 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> sum(x) </td>\n   <td style=\"text-align:left;\"> 合計値 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> length(x) </td>\n   <td style=\"text-align:left;\"> ベクターの長さ </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> mean(x) </td>\n   <td style=\"text-align:left;\"> 平均値 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> var(x) </td>\n   <td style=\"text-align:left;\"> 分散 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sd(x) </td>\n   <td style=\"text-align:left;\"> （不偏）標準偏差 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> median(x) </td>\n   <td style=\"text-align:left;\"> 中央値 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> max(x) </td>\n   <td style=\"text-align:left;\"> 最大値 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> min(x) </td>\n   <td style=\"text-align:left;\"> 最小値 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> quantile(x, probs) </td>\n   <td style=\"text-align:left;\"> 分位値（probsは分位の位値） </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cov(x, y) </td>\n   <td style=\"text-align:left;\"> 共分散 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cov(dataframe) </td>\n   <td style=\"text-align:left;\"> 分散・共分散行列 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cor(x, y) </td>\n   <td style=\"text-align:left;\"> 相関係数 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cor(dataframe) </td>\n   <td style=\"text-align:left;\"> 相関行列 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell filename='ベクターの基礎演算と基礎統計量'}\n\n```{.r .cell-code}\nx <- seq(0, 10, by=0.5) # 0から10まで公差0.5の数列\ny <- rnorm(21, 5, 3) # 長さ21の正規乱数\n\nsum(x) # xの合計\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 105\n```\n:::\n\n```{.r .cell-code}\nlength(x) # xの長さ\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 21\n```\n:::\n\n```{.r .cell-code}\nmean(x) # xの平均値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nvar(x) # xの分散\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.625\n```\n:::\n\n```{.r .cell-code}\nsd(x) # xの標準偏差\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.102418\n```\n:::\n\n```{.r .cell-code}\nsd(x)/length(x)^0.5 # xの標準誤差\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6770032\n```\n:::\n\n```{.r .cell-code}\nmedian(x) # xの中央値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nmax(x) # xの最大値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nmin(x) # xの最小値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nquantile(x, probs=c(0.25, 0.75)) # xの25%，75%分位値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25% 75% \n2.5 7.5 \n```\n:::\n\n```{.r .cell-code}\ncov(x, y) # xとyの共分散\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -3.274794\n```\n:::\n\n```{.r .cell-code}\ncov(data.frame(x, y)) # xとyの分散・共分散行列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          x         y\nx  9.625000 -3.274794\ny -3.274794  8.942667\n```\n:::\n\n```{.r .cell-code}\ncor(x, y) # xとyの相関係数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.35298\n```\n:::\n\n```{.r .cell-code}\ncor(data.frame(x, y)) # xとyの相関行列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         x        y\nx  1.00000 -0.35298\ny -0.35298  1.00000\n```\n:::\n:::\n\n\n### 度数分布の計算\n\nRでは数値のベクターからヒストグラムを書くことが多いのですが，別途度数分布表を描きたいという場合もあります．度数分布を調べる時には，**cut関数**を用いることができます．cut関数は第一引数に数値のベクター，第二引数に度数分布の切断点（1~10，11~20などの10と11の境目のこと）を取ります．結果として，数値を「(数値, 数値\\]」という形の因子（factor）に変換したものが返ってきます．この時，カッコ（\"(\"）は大なり，四角カッコ（\"\\]\"）は小なりイコールを表しています．ですので，例えば「(40,60\\]」と示されている場合には，その値が40より大きく，60以下であることを表しています．因子型には**table関数**というものがあります．このcut関数とtable関数を組み合わせることで，度数分布表を簡単に作成することができます．\n\n\n::: {.cell filename='度数分布の計算'}\n\n```{.r .cell-code}\nz <- runif(150, min = 0, max = 100)\n# データの存在する範囲を返す関数（因子が返ってくる）\ncut(z, breaks=c(-1, 20, 40, 60, 80, 101)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] (60,80]  (60,80]  (40,60]  (40,60]  (60,80]  (-1,20]  (40,60]  (60,80] \n  [9] (60,80]  (40,60]  (80,101] (40,60]  (20,40]  (-1,20]  (-1,20]  (20,40] \n [17] (40,60]  (60,80]  (40,60]  (80,101] (20,40]  (40,60]  (20,40]  (60,80] \n [25] (20,40]  (40,60]  (60,80]  (-1,20]  (80,101] (20,40]  (80,101] (20,40] \n [33] (20,40]  (40,60]  (80,101] (80,101] (20,40]  (60,80]  (80,101] (40,60] \n [41] (60,80]  (20,40]  (20,40]  (60,80]  (20,40]  (60,80]  (-1,20]  (20,40] \n [49] (-1,20]  (20,40]  (-1,20]  (60,80]  (80,101] (60,80]  (60,80]  (40,60] \n [57] (40,60]  (80,101] (60,80]  (60,80]  (20,40]  (20,40]  (80,101] (60,80] \n [65] (20,40]  (-1,20]  (40,60]  (80,101] (40,60]  (80,101] (60,80]  (20,40] \n [73] (40,60]  (-1,20]  (-1,20]  (60,80]  (-1,20]  (40,60]  (60,80]  (80,101]\n [81] (40,60]  (40,60]  (-1,20]  (60,80]  (40,60]  (40,60]  (20,40]  (20,40] \n [89] (40,60]  (40,60]  (-1,20]  (-1,20]  (60,80]  (80,101] (40,60]  (40,60] \n [97] (40,60]  (80,101] (40,60]  (60,80]  (60,80]  (20,40]  (20,40]  (60,80] \n[105] (40,60]  (-1,20]  (60,80]  (-1,20]  (80,101] (60,80]  (40,60]  (20,40] \n[113] (40,60]  (40,60]  (-1,20]  (40,60]  (-1,20]  (20,40]  (20,40]  (20,40] \n[121] (80,101] (40,60]  (60,80]  (80,101] (40,60]  (-1,20]  (20,40]  (60,80] \n[129] (20,40]  (60,80]  (80,101] (80,101] (20,40]  (20,40]  (80,101] (60,80] \n[137] (60,80]  (60,80]  (80,101] (20,40]  (-1,20]  (80,101] (40,60]  (80,101]\n[145] (-1,20]  (60,80]  (60,80]  (80,101] (40,60]  (60,80] \nLevels: (-1,20] (20,40] (40,60] (60,80] (80,101]\n```\n:::\n\n```{.r .cell-code}\nz_cut <- cut(z, breaks=c(-1, 20, 40, 60, 80, 101)) \ntable(z_cut) # 度数分布表を返すtable関数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nz_cut\n (-1,20]  (20,40]  (40,60]  (60,80] (80,101] \n      21       31       36       37       25 \n```\n:::\n:::\n\n\n## summary関数\n\nRでは，基礎統計量を計算するときには<font color=\"red\">**summary関数**</font>を用いることができます．summary関数は，ベクトルの最小値，25%四分位，中央値，平均値，75%四分位値，最大値を一度に計算してくれる関数です．summary関数の引数にはベクターだけでなく，リストやデータフレームを用いることもできます．summary関数は引数の型・クラスによって演算を変え，データの要約を示してくれます．\n\n\n::: {.cell filename='summary関数'}\n\n```{.r .cell-code}\nsummary(x) # ベクターを引数にするとき\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     2.5     5.0     5.0     7.5    10.0 \n```\n:::\n\n```{.r .cell-code}\nsummary(list(x, y)) # リストを引数にするとき\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Length Class  Mode   \n[1,] 21     -none- numeric\n[2,] 21     -none- numeric\n```\n:::\n\n```{.r .cell-code}\nsummary(data.frame(x, y)) # データフレームを引数にするとき\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       x              y          \n Min.   : 0.0   Min.   : 0.3801  \n 1st Qu.: 2.5   1st Qu.: 2.6030  \n Median : 5.0   Median : 4.1316  \n Mean   : 5.0   Mean   : 4.9629  \n 3rd Qu.: 7.5   3rd Qu.: 6.3071  \n Max.   :10.0   Max.   :12.2140  \n```\n:::\n:::\n\n\n> summary関数のような，色々な型・クラスを引数にとり，その型・クラスに応じて出力を変える関数のことを，**ジェネリック関数（genelic function）**と呼びます．ジェネリック関数は引数によって呼び出す関数（summary.data.frameやsummary.matrixなど）を変えることで，違う型・クラスの引数に対応しています．\n",
    "supporting": [
      "chapter8_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}