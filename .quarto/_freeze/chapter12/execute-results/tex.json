{
  "hash": "13883c58b35c425cd0cb61ca1bd5b8ac",
  "result": {
    "markdown": "# リスト・データフレーム・行列\n\n## リスト（list）\n\n<font color = \"red\">**リスト（list）**</font>は様々なデータ型・クラスを一つにまとめたものです．リストの要素となるのは，ベクター，リスト，データフレーム，行列などで，どのようなデータ型・クラスであってもリストの要素にすることができます．\n\nリストの作成には，<font color = \"red\">**list関数**</font>を用います．list関数の引数がリストの要素となります．\n\nベクターと同様に，リストの要素には<font color = \"red\">**名前（names）**</font>をつけることができ，要素を名前から呼び出すことができます．名前からの呼び出しでは，ベクターと同じように四角カッコ（\\[\\]）内に文字列を記入して呼び出してもよいですし，\\$（ドルマーク）を用いて呼び出すこともできます．ただし，\\[\\]と\\$では，返り値の型が異なります（\\[\\]ではリスト，\\$では要素が返ってくる）．\n\n名前の確認・設定はベクターと同じ方法で行います．リストの名前の確認・変更には，<font color = \"red\">**names関数**</font>を用います．names関数の引数にリストを取ると，そのリストの名前が返ってきます．names関数の引数にリストを取り，文字列ベクターを代入すると，リストの名前を設定できます．\n\n\n::: {.cell filename='リストの作成と名前'}\n\n```{.r .cell-code}\n# リストの作成（=の左がnames，右が要素）\nlst <- list(x = c(1, 2, 3, 4), y = \"dog\", z = c(T, F, T, T, F))\nlst # 名前付きリストを表示する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$x\n[1] 1 2 3 4\n\n$y\n[1] \"dog\"\n\n$z\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nnames(lst) # リストの名前を表示する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\nnames(lst) <- c(\"a\", \"b\", \"c\") # リストの名前を変更する\nnames(lst) # 変更後の名前\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\nlst[\"a\"] # 名前での要素の呼び出し（リストが返ってくる）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nlst$a # ドルマーク（$）を用いた呼び出し（要素が返ってくる）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n:::\n\n\n### リストのインデックス\n\nリストのインデックスは，基本的には<font color = \"red\">**二重角カッコ（\\[\\[\\]\\]）**</font>で指定します．通常の角カッコ（\\[\\]）で指定すると，**リストの要素がリストのまま**返ってきます．角カッコ（\\[\\]）で返ってくるのはリストですので，コロンを用いて複数の要素をリストとして取り出すことができます．\n\nリストの要素（ベクターや行列）のさらに要素を取り出すには，二重角カッコの後に，ベクターや行列に対応したインデックス指定（\\[1\\]や\\[1, 2\\]など）をつけることになります．\n\n\n::: {.cell filename='リストのインデックス'}\n\n```{.r .cell-code}\nlst[1] # リストの1番目の要素（リストが返ってくる）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nlst[[1]] # リストの1番目の要素（要素が返ってくる）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4\n```\n:::\n\n```{.r .cell-code}\nlst[1:2] # リストの1~2番目の要素（リストが返ってくる）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4\n\n$b\n[1] \"dog\"\n```\n:::\n\n```{.r .cell-code}\nlst[[1]][2] # リストの1番目の要素（ベクター）の2つ目の要素\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n### リストの長さ（length）\n\nリストは，名前（names）の他に，<font color = \"red\">**長さ（length）**</font>の特性を持ちます．リストのlengthはリストの要素の数です．リストのlengthもベクターと同じく，<font color = \"red\">**length関数**</font>で確認することができます．\n\nリストのアトリビュートはattributes関数で確認することができます．アトリビュートをattr関数で別途追加しない場合には，アトリビュートとしてはnamesだけが表示されます．各要素のデータ型は<font color = \"red\">**str関数やsummary関数**</font>を用いて確認することができます．\n\n\n::: {.cell filename='リストの長さとデータ型'}\n\n```{.r .cell-code}\nlength(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nattributes(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n[1] \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\nstr(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ a: num [1:4] 1 2 3 4\n $ b: chr \"dog\"\n $ c: logi [1:5] TRUE FALSE TRUE TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nsummary(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Length Class  Mode     \na 4      -none- numeric  \nb 1      -none- character\nc 5      -none- logical  \n```\n:::\n:::\n\n\n### リストへの要素の追加\n\nc関数を用いることで，リストに要素を追加することができます．また，リストに要素を追加する場合には，ドルマークを用いて設定されていない名前を指定し，代入を行うことによっても要素を追加できます．設定されている名前を用いて代入した場合には，その要素が書き換えられます．\n\n\n::: {.cell filename='リストへの要素の追加'}\n\n```{.r .cell-code}\nlst <- c(lst, d = \"added list\") # リストに名前dの要素を追加\nlst\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4\n\n$b\n[1] \"dog\"\n\n$c\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n$d\n[1] \"added list\"\n```\n:::\n\n```{.r .cell-code}\n# リストに名前eの要素を追加（データフレームにも使える）\nlst$e <- \"object can be added with no-name index\" # 名前eの要素を追加\nlst$d <- \"revised list\" # dの要素を変更\nlst # 追加・変更後のリスト\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1 2 3 4\n\n$b\n[1] \"dog\"\n\n$c\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n$d\n[1] \"revised list\"\n\n$e\n[1] \"object can be added with no-name index\"\n```\n:::\n:::\n\n\n### リストのベクター化\n\nリストを全部まとめて1つのベクターにする場合には，<font color = \"red\">**unlist関数**</font>を用います．unlist関数はリストの要素をすべて1次元のベクターに変更します．ベクターに変更すると，ベクターの型が要素の型によって変更されるので，注意が必要となります．unlist関数はリストだけでなく，データフレームの行のデータをベクターにするのに用いられます．\n\n\n::: {.cell filename='リストのベクター化'}\n\n```{.r .cell-code}\nunlist(lst[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     a1      a2      a3      a4       b      c1      c2      c3      c4      c5 \n    \"1\"     \"2\"     \"3\"     \"4\"   \"dog\"  \"TRUE\" \"FALSE\"  \"TRUE\"  \"TRUE\" \"FALSE\" \n```\n:::\n:::\n\n\n## データフレーム（data.frame）\n\nRで最も使用頻度が高いクラスの一つが<font color = \"red\">**データフレーム（data.frame）**</font>です．データフレームはExcelの表のような構造を持つクラスで，<font color = \"red\">**data.frame関数**</font>を用いて作成することができます．data.frame関数の引数は各列のベクターで，各列の名前を引数で設定することができます（リストと同じく，「列名=ベクター」という形で設定）．\n\nデータフレームは，<font color = \"red\">**同じ長さのベクターを列に取ったリスト**</font>です．ですので，class関数ではデータフレーム，mode関数ではリストが返ってきます．\n\nデータフレームの作成時に，長さの異なるベクターを用いた場合には，**反復（recycling）**のルールに従い，短いベクターが長いベクターの長さに合わせて反復されます．\n\n\n::: {.cell filename='データフレームを作成する'}\n\n```{.r .cell-code}\n# データフレームをdata.frame関数で作成する\nd <- data.frame(x = c(\"dog\", \"cat\", \"pig\", \"horse\"), y = c(1, 2, 3, 4), z = c(T, T, F, T))\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\nclass(d) # classはdata.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nmode(d) # modeはlist\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\n# 長さが異なるベクターを用いると，反復が適用される\nd2 <- data.frame(x = c(\"dog\", \"cat\"), y = c(1, 2, 3, 4), z = c(T))\nd2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    x y    z\n1 dog 1 TRUE\n2 cat 2 TRUE\n3 dog 3 TRUE\n4 cat 4 TRUE\n```\n:::\n:::\n\n\n### リストからデータフレームを作成する\n\nデータフレームはリストと同じですので，長さが同じベクターからなるリストはそのままデータフレームに変換できます．データフレームへの変換には<font color = \"red\">**as.data.frame関数**</font>を用います．この変換は，data.frame関数を用いても行うことができます．\n\n長さが異なるベクターや，ベクター以外の要素を含むリストをデータフレームに変換しようとすると，エラーが出ます．反復は行われません．\n\n\n::: {.cell filename='リストをデータフレームに変換'}\n\n```{.r .cell-code}\n# 長さが同じベクターのリストは，そのままデータフレームに変換できる\nlst <- list(x = c(\"dog\", \"cat\", \"pig\", \"horse\"), y = c(1, 2, 3, 4), z = c(T, T, F, T))\nas.data.frame(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\ndata.frame(lst)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\n# 長さが異なるベクターのリストは，データフレームに変換できない\nlst2 <- list(x = c(1, 2, 3, 4), y = \"dog\", z = c(T, F, T, T, F))\nas.data.frame(lst2) # エラー\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, : arguments imply differing number of rows: 4, 1, 5\n```\n:::\n:::\n\n\n### データフレームのインデックス\n\nデータフレームはリストではありますが，行（横方向）と列（縦方向）を持つ，表の形で表されます．データは表ですので，行・列の2次元の<font color = \"red\">**次元（dimension）**</font>を持ちます．\n\nデータフレームの要素をインデックスで指定する場合には，<font color = \"red\">**\\[行, 列\\]**</font>という形を用います．このとき，インデックスの数値は行列共に1行目が1，1列目が1となります．インデックスは数値のベクターで指定することもできます．数値のベクターで指定した場合には，ベクターに記載した順番に行を取り出すことになります．\n\nベクターと同様に，データフレームのインデックスは**コロン（:）を用いた連続整数**の形でも指定できますし，**論理型（TRUEとFALSE）のベクター**を用いても指定できます．論理型のベクターの長さが行数・列数に足りない場合には，ベクターが反復されます．**マイナスのインデックスを用いた場合には，指定した行・列が削除**されます．\n\nインデックスでデータフレームの列のみを指定した場合には，返り値としてその列のベクターが返ってきます．一方，**行のみを指定した場合には，ベクターではなく，その行がデータフレーム**として返ってきます．行をベクターに変換するには，<font color=\"red\">**unlist関数**</font>を用います．\n\nデータフレームのインデックスの指定時には，コンマで行列を区切らず，1つのインデックスだけで指定することもできます．インデックスを1つだけ指定した場合には，ベクターではなく，データフレームが返ってきます．\n\n\n::: {.cell filename='データフレームのインデックス'}\n\n```{.r .cell-code}\nd1 <- data.frame(a = 1:6, b = seq(4, 6.5, by = 0.5), c = rep(1, 6))\nd1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n3 3 5.0 1\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\nd1[1, 1] # 1行1列目の要素を取り出す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nd1[1:3, 1] # 1~3行目，1列目の要素を取り出す（ベクター）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nd1[c(5, 2, 1), ] # 5行目，2行目，1行目を取り出す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n5 5 6.0 1\n2 2 4.5 1\n1 1 4.0 1\n```\n:::\n\n```{.r .cell-code}\nd1[1, ] # 1行目の要素を取り出す（データフレーム）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a b c\n1 1 4 1\n```\n:::\n\n```{.r .cell-code}\nunlist(d1[1, ]) # 1行目の要素を取り出して，ベクターに変換する\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na b c \n1 4 1 \n```\n:::\n\n```{.r .cell-code}\nd1[2:3, ] # 2~3行目の要素を取り出す（データフレーム）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n2 2 4.5 1\n3 3 5.0 1\n```\n:::\n\n```{.r .cell-code}\nd1[, 2:3] # 2~3列目の要素を取り出す（データフレーム）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    b c\n1 4.0 1\n2 4.5 1\n3 5.0 1\n4 5.5 1\n5 6.0 1\n6 6.5 1\n```\n:::\n\n```{.r .cell-code}\nd1[c(T, T, F, T, F, F), ] # 論理型もインデックスに使用できる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n4 4 5.5 1\n```\n:::\n\n```{.r .cell-code}\nd1[c(T, T, F), ] # 反復採用\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n4 4 5.5 1\n5 5 6.0 1\n```\n:::\n\n```{.r .cell-code}\nd1[, c(T, T, F)] # 列のインデックスにも論理型を使用できる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b\n1 1 4.0\n2 2 4.5\n3 3 5.0\n4 4 5.5\n5 5 6.0\n6 6 6.5\n```\n:::\n\n```{.r .cell-code}\nd1[-1:-2, ] # 1~2行目を削除\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n3 3 5.0 1\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\nd1[, -1:-2] # 1~2列目を削除\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 1 1 1\n```\n:::\n\n```{.r .cell-code}\nd1[1] # 1列目を取り出す（データフレーム）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n```\n:::\n\n```{.r .cell-code}\nclass(d1[1]) # 行列を指定しないと，データフレームが返ってくる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n### データフレームの行数・列数\n\nデータフレームには，行方向と列方向の長さがあります．この行方向と列方向の長さを返すのが，<font color = \"red\">**dim関数，nrow関数，ncol関数**</font>です．dim関数は，データフレームを引数に取り，行,列の2つの値のベクターを返します．nrow関数はデータフレームの行数を，ncol関数はデータフレームの列数を返す関数です．\n\n\n::: {.cell filename='データフレームの行・列数'}\n\n```{.r .cell-code}\nd # dは4行3列のデータフレーム\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\ndim(d) # 4行3列なので，4と3が返ってくる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 3\n```\n:::\n\n```{.r .cell-code}\nnrow(d) # 行数が返ってくる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nncol(d) # 列数が返ってくる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n### データフレームの名前\n\nデータフレームの各行・各列には，それぞれ名前をつけることができます．データフレームの<font color = \"red\">**行の名前はrownames関数，列の名前はcolnames関数**</font>で求めることができます．\n\n列名はdata.frame関数でデータフレームを作成するときにつけることができます．また，ベクターと同様に，**colnames関数に列名を代入する**形でも列名をつけることができます．\n\n行名をつける場合には，**rownames関数に行名を代入**します．特に行名を指定していない場合には，行の番号が1, 2, 3,...といった形で列名として設定されます．\n\n行名・列名のいずれもインデックスとして利用することができます．特に**列名は，\\$（ドルマーク）を用いた形**で列の取り出しに用いることができます．\n\n\n::: {.cell filename='データフレームの行名・列名'}\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\ncolnames(d) # 列名\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\ncolnames(d) <- c(\"a\", \"b\", \"c\") # 列名を変更する\nrownames(d) # 行名\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\"\n```\n:::\n\n```{.r .cell-code}\nrownames(d) <- c(\"x\", \"y\", \"z\", \"aa\") # 行名を変更する\nd[\"x\", ] # 行名をインデックスに用いることもできる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    a b    c\nx dog 1 TRUE\n```\n:::\n\n```{.r .cell-code}\nd[, \"a\"] # 列名もインデックス指定に使うことができる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"   \"cat\"   \"pig\"   \"horse\"\n```\n:::\n\n```{.r .cell-code}\nd$a # ドルマークを使って列を指定することもできる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"   \"cat\"   \"pig\"   \"horse\"\n```\n:::\n:::\n\n\nデータフレームにおいても，インデックスに論理型のベクターを使用することができるため，<font color = \"red\">**列名と比較演算子を利用して，行を選択する**</font>ことができます．\n\n同様に条件によって行を選択する際に用いる関数が<font color = \"red\">**subset関数**</font>です．subset関数は第一引数にデータフレーム，第二引数に比較演算子を用いた条件式を記載することで，条件に合った行のみを取り出すことができます．\n\n同様にある行のデータを利用して論理型ベクターを作成し，列を選択する事もできます．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n3 3 5.0 1\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\nd1$b > 5 # b列が5以上ならTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nd1[d1$b > 5, ] # b列が5以上の行を選択\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\nsubset(d1, d1$b > 5) # 上と同じ行の選択をsubset関数で行う\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\nd1[1, ] > 3 # 1列目の値が3以上ならTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      a    b     c\n1 FALSE TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nd1[, d1[1, ] > 3] # 1列目が3以上になる列（2列目）を選択\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.0 4.5 5.0 5.5 6.0 6.5\n```\n:::\n:::\n\n\n### データフレームの並べ替え\n\nデータフレームの並べ替えには，**order関数**を用います．order関数はベクターの要素の順番に数値を付け，返すだけの関数です．データフレームのインデックスはベクターを取ることができ，ベクターに記載した数値の順番に行を取得します．ですので，order関数の返り値を行のインデックスとして用いると，order関数の返り値の通りにデータフレームが並べ替えられます．\n\norder関数にはdecreasing（降順）という引数を設定できます．decreasingのデフォルト値はFALSEで，通常はorder関数を用いた並べかえは昇順（一番小さいものが一番上）になります．decreasingをTRUEに設定すると，order関数の結果が逆順になります．したがって，decreasing=TRUEとした場合には，データフレームを降順に並べ替えることができます．\n\nrev関数は引数にベクターを取り，ベクターを逆順に変換する関数です．このrev関数を用いても，データフレームを降順に並べ替えることができます．\n\n\n::: {.cell filename='データフレームの並べ替え'}\n\n```{.r .cell-code}\nd <- data.frame(x = c(\"dog\", \"cat\", \"pig\", \"horse\"), y = c(1, 2, 3, 4), z = c(T, T, F, T))\norder(d$x) # x列の順序を返す(文字列はアルファベット順)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1 4 3\n```\n:::\n\n```{.r .cell-code}\nd[order(d$x),] # x列を昇順に並べ替え\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n2   cat 2  TRUE\n1   dog 1  TRUE\n4 horse 4  TRUE\n3   pig 3 FALSE\n```\n:::\n\n```{.r .cell-code}\norder(d$x, decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 1 2\n```\n:::\n\n```{.r .cell-code}\nd[order(d$x, decreasing=TRUE),] # x列を降順に並べ替え\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n3   pig 3 FALSE\n4 horse 4  TRUE\n1   dog 1  TRUE\n2   cat 2  TRUE\n```\n:::\n\n```{.r .cell-code}\nd[rev(order(d$x)), ] # rev関数でもベクターを逆順にできる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n3   pig 3 FALSE\n4 horse 4  TRUE\n1   dog 1  TRUE\n2   cat 2  TRUE\n```\n:::\n:::\n\n\n> order関数の代わりにrank関数を用いることもできます．ただし，rank関数はデフォルトではタイデータ（同じ値のデータ）に整数で順位を付けないので（2.5位が2つなど），order関数の方が使い勝手はよいでしょう．\n\n### データフレームに行・列を追加する\n\nデータフレームに列を追加する方法はいくつかあります．\n\n-   \\$（ドルマーク）に列名に使われていない名前を指定し，ベクターを代入する\n-   現在の列数+1のインデックスを指定し，ベクターを代入する\n-   <font color=\"red\">**cbind関数**</font>を用いる\n\n\\$と新しい列名を用いて，ベクターを代入した場合には，最も右側にその列名を持つ列が追加されます．数値のインデックスで指定した場合には，Vにインデックスが付いた列名が自動的に設定され，列が追加されます．cbind関数を用いた場合には，1つ目の引数（データフレーム）に2つ目の引数（ベクターもしくはデータフレーム）が右側から追加されます．\n\nデータフレームに行を追加する方法もほぼ同じです．行を追加する場合には，cbind関数ではなく，<font color=\"red\">**rbind関数**</font>を用います．\n\nただし，データフレームに行をベクターとして追加する場合には，<font color=\"red\">**追加した行に従い各列のデータ型が変化**</font>します．データ型の変換を起こさないように行を追加するには，追加する行がデータフレームである必要があります．さらに，追加するデータフレームの列名が元のデータフレームの列名と一致する必要があります．\n\nデータフレームに行を追加すると予期せぬ型変換が起こり，間違いの原因となりますので，行の追加を行うときには型を逐次確認することをおすすめします．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 <- d\nd3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\nd3$newCol <- 5:8\nd3[, 5] <- 10:13\nd3[5, ] <- c(\"rat\", 6, T, 9, 14) # 各列の型に沿ったベクターを追加\nsummary(d3) # すべての列が文字列になる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x                  y                  z                newCol         \n Length:5           Length:5           Length:5           Length:5          \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n      V5           \n Length:5          \n Class :character  \n Mode  :character  \n```\n:::\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n```\n:::\n\n```{.r .cell-code}\ncbind(d, 1:4) # 列を追加\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z 1:4\n1   dog 1  TRUE   1\n2   cat 2  TRUE   2\n3   pig 3 FALSE   3\n4 horse 4  TRUE   4\n```\n:::\n\n```{.r .cell-code}\nrbind(d, 1:3) # 行を追加する（列のデータ型が変化する）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y z\n1   dog 1 1\n2   cat 2 1\n3   pig 3 0\n4 horse 4 1\n5     1 2 3\n```\n:::\n\n```{.r .cell-code}\n# データフレームを追加する場合は，列名が同じである必要がある\nrbind(d, data.frame(x = \"pig\", y = 1, z = TRUE)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x y     z\n1   dog 1  TRUE\n2   cat 2  TRUE\n3   pig 3 FALSE\n4 horse 4  TRUE\n5   pig 1  TRUE\n```\n:::\n:::\n\n\n### データフレームの要約\n\nデータフレームの各列の要約を調べる場合には，ベクターなどと同様に，<font color = \"red\">**summary関数**</font>を用います．summary関数はデータフレームを引数に取ると，列が文字列の場合にはデータ型と要素の数，論理型や因子の場合はそのレベルごとの要素の数，数値型であれば平均値や中央値，最大値・最小値などを示してくれます．\n\nデータフレームの列方向の合計値を求める場合には<font color = \"red\">**colSums関数**</font>を，行方向の合計値を求める場合には**rowSums関数**を用います．データフレームに文字列の列がある場合には，colSums関数・rowSums関数はエラーを返します．\n\n同様の関数に，colMeans関数，rowMeans関数もあります．これらはそれぞれ列方向・行方向の平均値を計算する関数です．\n\nデータフレームの一部を確認したいときには，ベクターと同様に**head関数とtail関数**を用いることができます．head関数はデータフレームの上から6行を，tail関数はデータフレームの下から6行をそれぞれ表示します．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(d) # データフレームの要約\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      x                   y            z          \n Length:4           Min.   :1.00   Mode :logical  \n Class :character   1st Qu.:1.75   FALSE:1        \n Mode  :character   Median :2.50   TRUE :3        \n                    Mean   :2.50                  \n                    3rd Qu.:3.25                  \n                    Max.   :4.00                  \n```\n:::\n\n```{.r .cell-code}\nd1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n3 3 5.0 1\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\ncolSums(d1) # 列方向に合計した値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   a    b    c \n21.0 31.5  6.0 \n```\n:::\n\n```{.r .cell-code}\ncolSums(d) # 数値以外が含まれているとエラーになる\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in colSums(d): 'x' must be numeric\n```\n:::\n\n```{.r .cell-code}\nrowSums(d1) # 行方向に合計した値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6.0  7.5  9.0 10.5 12.0 13.5\n```\n:::\n\n```{.r .cell-code}\ncolMeans(d1) # 列方向の平均値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   a    b    c \n3.50 5.25 1.00 \n```\n:::\n\n```{.r .cell-code}\nrowMeans(d1) # 行方向の平均値\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.0 2.5 3.0 3.5 4.0 4.5\n```\n:::\n\n```{.r .cell-code}\nhead(d1) # データフレームの上から6行を表示\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n3 3 5.0 1\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n\n```{.r .cell-code}\ntail(d1) # データフレームの下から6行を表示\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b c\n1 1 4.0 1\n2 2 4.5 1\n3 3 5.0 1\n4 4 5.5 1\n5 5 6.0 1\n6 6 6.5 1\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表1：データフレームに関する関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> データフレームに適用する演算 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> data.frame(x, y) </td>\n   <td style=\"text-align:left;\"> データフレームを作成する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> dim(x) </td>\n   <td style=\"text-align:left;\"> 次元（dimension）を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ncol(x) </td>\n   <td style=\"text-align:left;\"> 列数を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> nrow(x) </td>\n   <td style=\"text-align:left;\"> 行数を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> colnames(x) </td>\n   <td style=\"text-align:left;\"> 列の名前を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rownames(x) </td>\n   <td style=\"text-align:left;\"> 行の名前を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> colnames(x) &lt;- y </td>\n   <td style=\"text-align:left;\"> yを列の名前に設定する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rownames(x) &lt;- y </td>\n   <td style=\"text-align:left;\"> yを行の名前に設定する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> subset(x, 条件) </td>\n   <td style=\"text-align:left;\"> 条件に適合した行を抽出する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x[order(x$name), ] </td>\n   <td style=\"text-align:left;\"> name列で昇順に並べ替え </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x[rev(order(x$name)), ] </td>\n   <td style=\"text-align:left;\"> name列で降順に並べ替え </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cbind(x, y) </td>\n   <td style=\"text-align:left;\"> 列を追加する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rbind(x, y) </td>\n   <td style=\"text-align:left;\"> 行を追加する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> summary(x) </td>\n   <td style=\"text-align:left;\"> データフレームの要約を表示 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> colSums(x) </td>\n   <td style=\"text-align:left;\"> 列（縦）方向の和を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rowSums(x) </td>\n   <td style=\"text-align:left;\"> 行（横）方向の和を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> colMeans(x) </td>\n   <td style=\"text-align:left;\"> 列（縦）方向の平均値を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rowMeans(x) </td>\n   <td style=\"text-align:left;\"> 行（横）方向の平均値を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> head(x) </td>\n   <td style=\"text-align:left;\"> データフレームの上から6行を表示 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tail(x) </td>\n   <td style=\"text-align:left;\"> データフレームの下から6行を表示 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n> もっと複雑なデータフレームの要約を行う場合には，<font color = \"red\">**apply関数群**</font>や<font color = \"red\">**dplyrパッケージ**</font>，<font color = \"red\">**tidyrパッケージ**</font>などを用います．apply関数群，dplyr，tidyrに関しては別の章でそれぞれ紹介します．\n\n## 行列（matrix）\n\nRは高校数学で学んだ行列，線形代数の行列計算を行うためのクラスである，<font color=\"red\">**行列（matrix）**</font>を持ちます．行列はベクターと同様に同じ型を持つ要素の集合で，行と列の2つの<font color=\"red\">**次元（dimension）**</font>を持ちます．\n\nデータフレームも行列と同様に次元を持ちますが，データフレームが行方向には異なるデータ型を取ることができるのに対して，行列はすべての要素のデータ型が同じです．また，データフレームがリストであるのに対し，行列は縦・横の2つの次元を持つベクターです．\n\n行列の基本的な取り扱い（インデックス，行・列の追加，行名・列名）はデータフレームとほぼ同じです．上に述べたデータフレームの取り扱いに関する方法は，概ね行列にも適用することができます．\n\n行列の作成には，<font color=\"red\">**matrix関数**</font>を用います．matrix関数は第一引数にベクター，nrow引数に行の数，ncol引数に列の数を指定します．matrix関数はベクターの数値を縦方向（列方向）に並べて配置します．数値を横（行方向）に並べて配置する場合には，byrow引数をTRUEに指定します．\n\n\n::: {.cell filename='行列の作成とインデックス'}\n\n```{.r .cell-code}\nmat <- matrix(1:12, nrow = 3, ncol = 4) # 列方向にベクターが配置される\nmatrix(1:12, nrow = 3, ncol = 4, byrow = TRUE) # 行方向に配置するとき\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n```\n:::\n\n```{.r .cell-code}\ndim(mat) # 行数・列数を返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4\n```\n:::\n\n```{.r .cell-code}\nnrow(mat) # 行数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nncol(mat) # 列数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\ncolnames(mat) <- c(\"dog\", \"cat\", \"pig\", \"horse\") # 列名の設定\nrownames(mat) <- c(\"first\", \"second\", \"third\") # 行名の設定\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dog cat pig horse\nfirst    1   4   7    10\nsecond   2   5   8    11\nthird    3   6   9    12\n```\n:::\n\n```{.r .cell-code}\ncolnames(mat) # 列名の取得\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"dog\"   \"cat\"   \"pig\"   \"horse\"\n```\n:::\n\n```{.r .cell-code}\nrownames(mat) # 行名の取得\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"first\"  \"second\" \"third\" \n```\n:::\n\n```{.r .cell-code}\nmat[1, 1] # 1行1列目の要素\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nmat[1, ] # 1行目の要素\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  dog   cat   pig horse \n    1     4     7    10 \n```\n:::\n\n```{.r .cell-code}\nmat[, 1] # 1列目の要素\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n first second  third \n     1      2      3 \n```\n:::\n\n```{.r .cell-code}\nmat[-1, ] # 1行目を削除\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dog cat pig horse\nsecond   2   5   8    11\nthird    3   6   9    12\n```\n:::\n\n```{.r .cell-code}\nmat[c(T, T, F), ] # 論理型でも指定できる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dog cat pig horse\nfirst    1   4   7    10\nsecond   2   5   8    11\n```\n:::\n\n```{.r .cell-code}\nmat[1:2, ] # 1~2行目の要素\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dog cat pig horse\nfirst    1   4   7    10\nsecond   2   5   8    11\n```\n:::\n\n```{.r .cell-code}\nmat[, \"dog\"] # インデックスは列名でも指定できる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n first second  third \n     1      2      3 \n```\n:::\n\n```{.r .cell-code}\nmat$dog # ドルマークを用いることはできない\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in mat$dog: $ operator is invalid for atomic vectors\n```\n:::\n\n```{.r .cell-code}\nmat[\"first\", ] # 行名での指定\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  dog   cat   pig horse \n    1     4     7    10 \n```\n:::\n\n```{.r .cell-code}\ncbind(mat, rat = c(4, 6, 8)) # 列の追加\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dog cat pig horse rat\nfirst    1   4   7    10   4\nsecond   2   5   8    11   6\nthird    3   6   9    12   8\n```\n:::\n\n```{.r .cell-code}\nrbind(mat, fourth = c(1, 1, 1, 1)) # 行の追加\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dog cat pig horse\nfirst    1   4   7    10\nsecond   2   5   8    11\nthird    3   6   9    12\nfourth   1   1   1     1\n```\n:::\n:::\n\n\n> Rには，次元を3つ以上持つクラスである，**array**も存在しますが，matrixほどには使用頻度は高くありません．\n\n### 行列の演算\n\n統計の計算には，線形代数（行列）が用いられます．Rには行列の演算に関する関数が一通り揃っています．\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n<caption>表2：行列に関する関数</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> 関数名 </th>\n   <th style=\"text-align:left;\"> 行列に適用する演算 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> * </td>\n   <td style=\"text-align:left;\"> スカラー積 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> %*% </td>\n   <td style=\"text-align:left;\"> 行列の積 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> %o% </td>\n   <td style=\"text-align:left;\"> 外積 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> %x% </td>\n   <td style=\"text-align:left;\"> クロネッカー積 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> diag </td>\n   <td style=\"text-align:left;\"> 単位行列を作成する </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> det </td>\n   <td style=\"text-align:left;\"> 行列式を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> t </td>\n   <td style=\"text-align:left;\"> 転置を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> upper.tri </td>\n   <td style=\"text-align:left;\"> 上三角行列にTRUEを返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> lower.tri </td>\n   <td style=\"text-align:left;\"> 下三角行列にTRUEを返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> solve </td>\n   <td style=\"text-align:left;\"> 逆行列を返す </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> qr </td>\n   <td style=\"text-align:left;\"> QR分解 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### 行列の積\n\nRでは，<font color=\"red\">\\*\\*%\\*%\\*\\*</font>を演算子として行列の積の計算を行います．単に「\\*」で計算すると，行列の積ではなく，スカラー積が返ってきます．行列同士を「\\*」で掛け算した場合には，行列の各要素がそれぞれ掛け算されたもの（アダマール積）が返ってきます．行列の演算子として，他に外積（%o%）やクロネッカー積（%x%）も設定されています．\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 要素が1~16のランダムな行列を作成\nmat <- matrix(sample(1:16, 16), nrow=4) \nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    9    2   13    6\n[2,]    4   14    5   15\n[3,]    7   12   11   16\n[4,]    1    3   10    8\n```\n:::\n\n```{.r .cell-code}\nmat * 3 # スカラー積\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   27    6   39   18\n[2,]   12   42   15   45\n[3,]   21   36   33   48\n[4,]    3    9   30   24\n```\n:::\n\n```{.r .cell-code}\nmat %*% mat # 行列の積\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]  186  220  330  340\n[2,]  142  309  327  434\n[3,]  204  362  432  526\n[4,]   99  188  218  275\n```\n:::\n\n```{.r .cell-code}\nmat[, 1] %o% mat[, 2] # 外積\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   18  126  108   27\n[2,]    8   56   48   12\n[3,]   14   98   84   21\n[4,]    2   14   12    3\n```\n:::\n\n```{.r .cell-code}\nmat[1:2, 1:2] %x% mat[3:4, 3:4] # クロネッカー積\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   99  144   22   32\n[2,]   90   72   20   16\n[3,]   44   64  154  224\n[4,]   40   32  140  112\n```\n:::\n:::\n\n\n### 行列式・転置・逆行列の演算\n\n行列式は**det関数**，行列の転置は**t関数**，逆行列を求めるときには**solve関数**を用います．t関数は行列だけでなく，データフレームを引数に取ることができますが，**t関数の返り値は必ず行列**になります．データフレームをt関数の引数にする場合にはデータ型が変換されることが多いため，注意が必要です．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndet(mat) # matの行列式\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -712\n```\n:::\n\n```{.r .cell-code}\nt(mat) # matを転置\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    9    4    7    1\n[2,]    2   14   12    3\n[3,]   13    5   11   10\n[4,]    6   15   16    8\n```\n:::\n\n```{.r .cell-code}\nsolve(mat) # matの逆行列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            [,1]       [,2]       [,3]  [,4]\n[1,] -0.08005618 -0.3455056  0.4789326 -0.25\n[2,]  0.55758427  1.1432584 -1.4058989  0.25\n[3,]  0.32724719  0.5702247 -0.7823034  0.25\n[4,] -0.60814607 -1.0983146  1.4452247 -0.25\n```\n:::\n\n```{.r .cell-code}\nmat %*% solve(mat) # 丸め誤差はあるが，単位行列になる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              [,1] [,2]         [,3]         [,4]\n[1,]  1.000000e+00    0 0.000000e+00 4.440892e-16\n[2,]  0.000000e+00    1 3.552714e-15 4.440892e-16\n[3,] -1.776357e-15    0 1.000000e+00 0.000000e+00\n[4,] -8.881784e-16    0 1.776357e-15 1.000000e+00\n```\n:::\n:::\n\n\n### 単位行列・三角行列の作成\n\n**diag関数**は単位行列を作成するための関数です．diag関数は数値を引数に取り，その数値の行数・列数の単位行列を返します．\n\n三角行列の作成には，upper.tri関数とlower.tri関数を用います．この2つの関数は，行列を引数に取り，行列と同じ行数・列数の論理型の上三角行列（上がTRUE，下三角がFALSEの行列），下三角行列（下がTRUE，上三角がFALSEの行列）をそれぞれ返します．いずれも対角成分はFALSEとなります．\n\nただし，upper.tri関数，lower.tri関数の返り値をそのまま行列のインデックスに用いても上三角行列・下三角行列を作ることはできません．上三角行列を作成する場合には，lower.tri関数の返り値をインデックスに取り，このインデックスに0を代入します．\n\n逆に，下三角行列を作成する場合には，upper.tri関数の返り値をインデックスに取り，このインデックスに0を代入します．このように0を下三角・上三角に代入することで，上三角行列・下三角行列を得ることができます．\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiag(3) # 3行3列の単位行列\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n```\n:::\n\n```{.r .cell-code}\nupper.tri(mat) # 上三角行列にTRUEを返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE  TRUE  TRUE  TRUE\n[2,] FALSE FALSE  TRUE  TRUE\n[3,] FALSE FALSE FALSE  TRUE\n[4,] FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nlower.tri(mat) # 下三角行列にTRUEを返す\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]  [,2]  [,3]  [,4]\n[1,] FALSE FALSE FALSE FALSE\n[2,]  TRUE FALSE FALSE FALSE\n[3,]  TRUE  TRUE FALSE FALSE\n[4,]  TRUE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nmat.u <- mat\nmat.l <- mat\n\nmat.u[lower.tri(mat)] <- 0 # 下三角行列のみに0を代入\nmat.l[upper.tri(mat)] <- 0 # 上三角行列のみに0を代入\n\nmat.u # 下三角に0を代入すると上三角行列が得られる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    9    2   13    6\n[2,]    0   14    5   15\n[3,]    0    0   11   16\n[4,]    0    0    0    8\n```\n:::\n\n```{.r .cell-code}\nmat.l # 上三角に0を代入すると下三角行列が得られる\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    9    0    0    0\n[2,]    4   14    0    0\n[3,]    7   12   11    0\n[4,]    1    3   10    8\n```\n:::\n:::\n",
    "supporting": [
      "chapter12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}