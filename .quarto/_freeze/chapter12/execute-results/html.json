{
  "hash": "e6c53ca74faf5d666efac45bec3e05e9",
  "result": {
    "engine": "knitr",
    "markdown": "# リスト・データフレーム・行列\n\n\n\n\n\n## リスト（list）\n\n**リスト（list）**は様々なデータ型・クラスを一つにまとめたものです。リストの要素となるのは、ベクター、リスト、データフレーム、行列などで、どのようなデータ型・クラスであってもリストの要素にすることができます。\n\nリストの作成には、`list`関数を用います。`list`関数の引数がリストの要素となります。\n\nベクターと同様に、リストの要素には**名前（names）**をつけることができ、要素を名前から呼び出すことができます。名前からの呼び出しでは、ベクターと同じように四角カッコ（`[ ]`）内に文字列を記入して呼び出してもよいですし、`$`（ドルマーク）を用いて呼び出すこともできます。ただし、`[ ]`と`$`では、返り値の型が異なります（`[ ]`ではリスト、`$`では要素が返ってくる）。\n\n名前の確認・設定はベクターと同じ方法で行います。リストの名前の確認・変更には、`names`関数を用います。`names`関数の引数にリストを取ると、そのリストの名前が返ってきます。`names`関数の引数にリストを取り、文字列ベクターを代入するとリストの名前を設定できます。\n\n\n::: {.cell filename='リストの作成と名前'}\n\n```{.r .cell-code}\n# リストの作成（=の左がnames、右が要素）\nlst <- list(x = c(1, 2, 3, 4), y = \"dog\", z = c(T, F, T, T, F))\nlst # 名前付きリストを表示する\n## $x\n## [1] 1 2 3 4\n## \n## $y\n## [1] \"dog\"\n## \n## $z\n## [1]  TRUE FALSE  TRUE  TRUE FALSE\n\nnames(lst) # リストの名前を表示する\n## [1] \"x\" \"y\" \"z\"\n\nnames(lst) <- c(\"a\", \"b\", \"c\") # リストの名前を変更する\n\nnames(lst) # 変更後の名前\n## [1] \"a\" \"b\" \"c\"\n\nlst[\"a\"] # 名前での要素の呼び出し（リストが返ってくる）\n## $a\n## [1] 1 2 3 4\n\nlst$a # ドルマーク（$）を用いた呼び出し（要素が返ってくる）\n## [1] 1 2 3 4\n```\n:::\n\n\n### リストのインデックス\n\nリストのインデックスは、基本的には**二重角カッコ（`[[ ]]`）**で指定します。通常の角カッコ（`[ ]`）で指定すると、**リストの要素がリストのまま**返ってきます。角カッコ（`[ ]`）で返ってくるのはリストですので、コロンを用いて複数の要素をリストとして取り出すことができます。\n\nリストの要素（ベクターや行列）のさらに要素を取り出すには、二重角カッコの後に、ベクターや行列に対応したインデックス指定（`[1]`や`[1, 2]`など）をつけることになります。\n\n\n::: {.cell filename='リストのインデックス'}\n\n```{.r .cell-code}\nlst[1] # リストの1番目の要素（リストが返ってくる）\n## $a\n## [1] 1 2 3 4\n\nlst[[1]] # リストの1番目の要素（要素が返ってくる）\n## [1] 1 2 3 4\n\nlst[1:2] # リストの1~2番目の要素（リストが返ってくる）\n## $a\n## [1] 1 2 3 4\n## \n## $b\n## [1] \"dog\"\n\nlst[[1]][2] # リストの1番目の要素（ベクター）の2つ目の要素\n## [1] 2\n```\n:::\n\n\n### リストの長さ（length）\n\nリストは、名前（names）の他に、**長さ（length）**の特性を持ちます。リストのlengthはリストの要素の数です。リストのlengthもベクターと同じく、`length`関数で確認することができます。\n\nリストのアトリビュートは`attributes`関数で確認することができます。アトリビュートを`attr`関数で別途追加しない場合には、アトリビュートとしては`names`だけが表示されます。各要素のデータ型は`str`関数や`summary`関数を用いて確認することができます。\n\n\n::: {.cell filename='リストの長さとデータ型'}\n\n```{.r .cell-code}\nlength(lst)\n## [1] 3\n\nattributes(lst)\n## $names\n## [1] \"a\" \"b\" \"c\"\n\nstr(lst)\n## List of 3\n##  $ a: num [1:4] 1 2 3 4\n##  $ b: chr \"dog\"\n##  $ c: logi [1:5] TRUE FALSE TRUE TRUE FALSE\n\nsummary(lst)\n##   Length Class  Mode     \n## a 4      -none- numeric  \n## b 1      -none- character\n## c 5      -none- logical\n```\n:::\n\n\n### リストへの要素の追加\n\n`c`関数を用いることで、リストに要素を追加することができます。また、リストに要素を追加する場合には、ドルマークを用いて設定されていない名前を指定し、代入を行うこともできます。設定されている名前を用いて代入した場合には、その要素が書き換えられます。\n\n\n::: {.cell filename='リストへの要素の追加'}\n\n```{.r .cell-code}\nlst <- c(lst, d = \"added list\") # リストに名前dの要素を追加\nlst\n## $a\n## [1] 1 2 3 4\n## \n## $b\n## [1] \"dog\"\n## \n## $c\n## [1]  TRUE FALSE  TRUE  TRUE FALSE\n## \n## $d\n## [1] \"added list\"\n\n# リストに名前eの要素を追加（データフレームにも使える）\nlst$e <- \"object can be added with named index\" # 名前eの要素を追加\nlst$d <- \"revised list\" # dの要素を変更\nlst # 追加・変更後のリスト\n## $a\n## [1] 1 2 3 4\n## \n## $b\n## [1] \"dog\"\n## \n## $c\n## [1]  TRUE FALSE  TRUE  TRUE FALSE\n## \n## $d\n## [1] \"revised list\"\n## \n## $e\n## [1] \"object can be added with named index\"\n```\n:::\n\n\n### リストのベクター化\n\nリストを全部まとめて1つのベクターにする場合には、`unlist`関数を用います。`unlist`関数はリストの要素をすべて1次元のベクターに変更します。ベクターに変更すると、ベクターの型が要素の型によって変更されるので、注意が必要です。`unlist`関数はリストだけでなく、データフレームの行のデータをベクターにするのにも用いられます。\n\n\n::: {.cell filename='リストのベクター化'}\n\n```{.r .cell-code}\nunlist(lst[1:3]) # 文字列のベクターに変換される\n##      a1      a2      a3      a4       b      c1      c2      c3      c4      c5 \n##     \"1\"     \"2\"     \"3\"     \"4\"   \"dog\"  \"TRUE\" \"FALSE\"  \"TRUE\"  \"TRUE\" \"FALSE\"\n```\n:::\n\n\n## データフレーム（data.frame）\n\nRで最も使用頻度が高いクラスの一つが**データフレーム（data.frame）**です。データフレームはExcelの表のような構造を持つクラスで、`data.frame`関数を用いて作成することができます。`data.frame`関数の引数は各列のベクターで、各列の名前を引数で設定することができます（リストと同じく、「列名=ベクター」という形で設定）。\n\nデータフレームは、**同じ長さのベクターを列に取ったリスト**です。ですので、`class`関数ではデータフレーム、`mode`関数ではリストが返ってきます。\n\nデータフレームの作成時に、長さの異なるベクターを用いた場合には、**反復（recycling）**のルールに従い、短いベクターが長いベクターの長さに合わせて反復されます。\n\n\n::: {.cell filename='データフレームを作成する'}\n\n```{.r .cell-code}\n# データフレームをdata.frame関数で作成する\nd <- data.frame(x = c(\"dog\", \"cat\", \"pig\", \"horse\"), y = c(1, 2, 3, 4), z = c(T, T, F, T))\nd\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\nclass(d) # classはdata.frame\n## [1] \"data.frame\"\n\nmode(d) # modeはlist\n## [1] \"list\"\n\n# 長さが異なるベクターを用いると、反復が適用される\nd2 <- data.frame(x = c(\"dog\", \"cat\"), y = c(1, 2, 3, 4), z = T)\nd2\n##     x y    z\n## 1 dog 1 TRUE\n## 2 cat 2 TRUE\n## 3 dog 3 TRUE\n## 4 cat 4 TRUE\n```\n:::\n\n\n### リストからデータフレームを作成する\n\nデータフレームはリストと同じですので、長さが同じベクターからなるリストはそのままデータフレームに変換できます。データフレームへの変換には`as.data.frame`関数を用います。この変換は、`data.frame`関数を用いても行うことができます。\n\n長さが異なるベクターや、ベクター以外の要素を含むリストをデータフレームに変換しようとすると、エラーが出ます。反復は行われません。\n\n\n::: {.cell filename='リストをデータフレームに変換'}\n\n```{.r .cell-code}\n# 長さが同じベクターのリストは、そのままデータフレームに変換できる\nlst <- list(x = c(\"dog\", \"cat\", \"pig\", \"horse\"), y = c(1, 2, 3, 4), z = c(T, T, F, T))\nas.data.frame(lst)\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\ndata.frame(lst)\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\n# 長さが異なるベクターのリストは、データフレームに変換できない\nlst2 <- list(x = c(1, 2, 3, 4), y = \"dog\", z = c(T, F, T, T, F))\nas.data.frame(lst2) # エラー\n## Error in (function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE, : arguments imply differing number of rows: 4, 1, 5\n```\n:::\n\n\n### データフレームのインデックス\n\nデータフレームはリストではありますが、行（横方向）と列（縦方向）を持つ、表の形で表されます。データフレームは表型のデータですので、行・列の2つの**次元（dimension）**を持ちます。\n\nデータフレームの要素をインデックスで指定する場合には、**`[行, 列]`**という形を用います。このとき、インデックスの数値は行列共に1行目が1、1列目が1となります。インデックスは数値のベクターで指定することもできます。数値のベクターで指定した場合には、ベクターに記載した順番に行・列を取り出すことになります。\n\nベクターと同様に、データフレームのインデックスは**コロン（`:`）を用いた連続整数**の形でも指定できますし、**論理型（`TRUE`と`FALSE`）のベクター**を用いても指定できます。論理型のベクターの長さが行数・列数に足りない場合には、ベクターが反復されます。**マイナスのインデックスを用いた場合には、指定した行・列が削除**されます。\n\nインデックスでデータフレームの列のみを指定した場合には、返り値としてその列のベクターが返ってきます。一方、**行のみを指定した場合には、ベクターではなく、その行がデータフレーム**として返ってきます。行をベクターに変換するには、`unlist`関数を用います。\n\nデータフレームのインデックスの指定時には、コンマで行列を区切らず、1つのインデックスだけで指定することもできます。インデックスを1つだけ指定した場合には、ベクターではなく、データフレームが返ってきます。\n\n\n::: {.cell filename='データフレームのインデックス'}\n\n```{.r .cell-code}\nd1 <- data.frame(a = 1:6, b = seq(4, 6.5, by = 0.5), c = rep(1, 6))\nd1\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 3 3 5.0 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\nd1[1, 1] # 1行1列目の要素を取り出す\n## [1] 1\n\nd1[1:3, 1] # 1~3行目、1列目の要素を取り出す（ベクター）\n## [1] 1 2 3\n\nd1[c(5, 2, 1), ] # 5行目、2行目、1行目を取り出す\n##   a   b c\n## 5 5 6.0 1\n## 2 2 4.5 1\n## 1 1 4.0 1\n\nd1[1, ] # 1行目の要素を取り出す（データフレーム）\n##   a b c\n## 1 1 4 1\n\nunlist(d1[1, ]) # 1行目の要素を取り出して、ベクターに変換する\n## a b c \n## 1 4 1\n\nd1[2:3, ] # 2~3行目の要素を取り出す（データフレーム）\n##   a   b c\n## 2 2 4.5 1\n## 3 3 5.0 1\n\nd1[, 2:3] # 2~3列目の要素を取り出す（データフレーム）\n##     b c\n## 1 4.0 1\n## 2 4.5 1\n## 3 5.0 1\n## 4 5.5 1\n## 5 6.0 1\n## 6 6.5 1\n\nd1[c(T, T, F, T, F, F), ] # 論理型もインデックスに使用できる\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 4 4 5.5 1\n\nd1[c(T, T, F), ] # 反復\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n\nd1[, c(T, T, F)] # 列のインデックスにも論理型を使用できる\n##   a   b\n## 1 1 4.0\n## 2 2 4.5\n## 3 3 5.0\n## 4 4 5.5\n## 5 5 6.0\n## 6 6 6.5\n\nd1[-1:-2, ] # 1~2行目を削除\n##   a   b c\n## 3 3 5.0 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\nd1[, -1:-2] # 1~2列目を削除\n## [1] 1 1 1 1 1 1\n\nd1[1] # 1列目を取り出す（データフレーム）\n##   a\n## 1 1\n## 2 2\n## 3 3\n## 4 4\n## 5 5\n## 6 6\n\nclass(d1[1]) # 行列で指定（[,1]）しないと、データフレームが返ってくる\n## [1] \"data.frame\"\n```\n:::\n\n\n### データフレームの行数・列数\n\nデータフレームには、行方向と列方向の長さがあります。この行方向と列方向の長さを返すのが、`dim`関数、`nrow`関数、`ncol`関数です。`dim`関数は、データフレームを引数に取り、行数,列数の2つの値のベクターを返します。`nrow`関数はデータフレームの行数を、`ncol`関数はデータフレームの列数を返す関数です。\n\n\n::: {.cell filename='データフレームの行・列数'}\n\n```{.r .cell-code}\nd # dは4行3列のデータフレーム\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\ndim(d) # 4行3列なので、4と3が返ってくる\n## [1] 4 3\n\nnrow(d) # 行数が返ってくる\n## [1] 4\n\nncol(d) # 列数が返ってくる\n## [1] 3\n```\n:::\n\n\n### データフレームの名前\n\nデータフレームの各行・各列には、それぞれ名前をつけることができます。データフレームの**行の名前は`rownames`関数、列の名前は`colnames`関数**で求めることができます。\n\n列名は`data.frame`関数でデータフレームを作成するときにつけることができます。また、ベクターと同様に、**`colnames`関数に列名を代入する**形でも列名をつけることができます。\n\n行名をつける場合には、**`rownames`関数に行名を代入**します。特に行名を指定していない場合には、行の番号が1, 2, 3,...といった形で行名として設定されます。\n\n行名・列名のいずれもインデックスとして利用することができます。特に**列名は、`$`（ドルマーク）を用いた形**で列の取り出しに用いることができます。\n\n\n::: {.cell filename='データフレームの行名・列名'}\n\n```{.r .cell-code}\nd\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\ncolnames(d) # 列名\n## [1] \"x\" \"y\" \"z\"\n\ncolnames(d) <- c(\"a\", \"b\", \"c\") # 列名を変更する\n\nrownames(d) # 行名\n## [1] \"1\" \"2\" \"3\" \"4\"\n\nrownames(d) <- c(\"x\", \"y\", \"z\", \"aa\") # 行名を変更する\n\nd[\"x\", ] # 行名をインデックスに用いることもできる\n##     a b    c\n## x dog 1 TRUE\n\nd[, \"a\"] # 列名もインデックス指定に使うことができる\n## [1] \"dog\"   \"cat\"   \"pig\"   \"horse\"\n\nd$a # ドルマークを使って列を指定することもできる\n## [1] \"dog\"   \"cat\"   \"pig\"   \"horse\"\n```\n:::\n\n\nデータフレームにおいても、インデックスに論理型のベクターを使用することができるため、**列名と比較演算子を利用して、行を選択する**ことができます。\n\nインデックスでの比較演算子の利用と同様に条件によって行を選択する際に用いる関数が`subset`関数です。`subset`関数は第一引数にデータフレーム、第二引数に比較演算子を用いた条件式を記載することで、条件に合った行のみを取り出すことができます。\n\n行のデータを利用して論理型ベクターを作成し、列を選択する事もできます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 3 3 5.0 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\nd1$b > 5 # b列が5以上ならTRUE\n## [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE\n\nd1[d1$b > 5, ] # b列が5以上の行を選択\n##   a   b c\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\nsubset(d1, d1$b > 5) # 上と同じ行の選択をsubset関数で行う\n##   a   b c\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\nd1[1, ] > 3 # 1行目の値が3以上ならTRUE\n##       a    b     c\n## 1 FALSE TRUE FALSE\n\nd1[, d1[1, ] > 3] # 1行目が3以上になる列（2列目）を選択\n## [1] 4.0 4.5 5.0 5.5 6.0 6.5\n```\n:::\n\n\n### データフレームの並べ替え\n\nデータフレームの並べ替えには、`order`関数を用います。`order`関数はベクターの要素の順番に数値を付け、返すだけの関数です。データフレームのインデックスはベクターを取ることができ、ベクターに記載した数値の順番に行を取得します。ですので、`order`関数の返り値を行のインデックスとして用いると、`order`関数の返り値の通りにデータフレームが並べ替えられます。\n\n`order`関数には`decreasing`（降順）という引数を設定できます。`decreasing`のデフォルト値は`FALSE`で、通常は`order`関数を用いた並べかえは昇順（一番小さいものが一番上）になります。`decreasing`を`TRUE`に設定すると、`order`関数の結果が逆順になります。したがって、`decreasing=TRUE`とした場合には、データフレームを降順（一番大きなものが一番上）に並べ替えることができます。\n\n`rev`関数は引数にベクターを取り、ベクターを逆順に変換する関数です。この`rev`関数を用いても、データフレームを降順に並べ替えることができます。\n\n\n::: {.cell filename='データフレームの並べ替え'}\n\n```{.r .cell-code}\nd <- data.frame(x = c(\"dog\", \"cat\", \"pig\", \"horse\"), y = c(1, 2, 3, 4), z = c(T, T, F, T))\norder(d$x) # x列の順序を返す(文字列はアルファベット順)\n## [1] 2 1 4 3\n\nd[order(d$x),] # x列を昇順に並べ替え\n##       x y     z\n## 2   cat 2  TRUE\n## 1   dog 1  TRUE\n## 4 horse 4  TRUE\n## 3   pig 3 FALSE\n\norder(d$x, decreasing=TRUE)\n## [1] 3 4 1 2\n\nd[order(d$x, decreasing=TRUE), ] # x列を降順に並べ替え\n##       x y     z\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n\nd[rev(order(d$x)), ] # rev関数でもベクターを逆順にできる\n##       x y     z\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## rank関数で並べ替え\n\n`order`関数の代わりに`rank`関数を用いることもできます。ただし、`rank`関数はデフォルトではタイデータ（同じ値のデータ）に整数で順位を付けないので（2.5位が2つなど）、`order`関数の方が使い勝手はよいでしょう。\n\n:::\n\n### データフレームに行・列を追加する\n\nデータフレームに列を追加する方法はいくつかあります。\n\n-   `$`（ドルマーク）に列名に使われていない名前を指定し、ベクターを代入する\n-   現在の列数+1のインデックスを指定し、ベクターを代入する\n-   `cbind`関数を用いる\n\n`$`と新しい列名を用いて、ベクターを代入した場合には、最も右側にその列名を持つ列が追加されます。数値のインデックスで指定した場合には、Vにインデックスが付いた列名（V1、V2など）が自動的に設定され、列が追加されます。`cbind`関数を用いた場合には、1つ目の引数（データフレーム）に2つ目の引数（ベクターもしくはデータフレーム）が右側から追加されます。\n\nデータフレームに行を追加する方法もほぼ同じです。行を追加する場合には、`cbind`関数ではなく、`rbind`関数を用います。\n\nただし、データフレームに行をベクターで追加する場合には、**追加した行に従い各列のデータ型が変化**します。データ型の変換を起こさないように行を追加するには、追加する行がデータフレームである必要があります。さらに、追加するデータフレームの列名が元のデータフレームの列名と一致する必要があります。\n\nデータフレームに行を追加すると予期せぬ型変換が起こり、間違いの原因となりますので、行の追加を行うときには型を逐次確認することをおすすめします。\n\n\n::: {.cell filename='列・行の追加'}\n\n```{.r .cell-code}\nd3 <- d\nd3\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\nd3$newCol <- 5:8\nd3[, 5] <- 10:13\nd3[5, ] <- c(\"rat\", 6, T, 9, 14) # 各列の型に沿ったベクターを追加\nsummary(d3) # すべての列が文字列になる\n##       x                  y                  z                newCol         \n##  Length:5           Length:5           Length:5           Length:5          \n##  Class :character   Class :character   Class :character   Class :character  \n##  Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n##       V5           \n##  Length:5          \n##  Class :character  \n##  Mode  :character\n\nd\n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n\ncbind(d, 1:4) # 列を追加\n##       x y     z 1:4\n## 1   dog 1  TRUE   1\n## 2   cat 2  TRUE   2\n## 3   pig 3 FALSE   3\n## 4 horse 4  TRUE   4\n\nrbind(d, 1:3) # 行を追加する（列のデータ型が変化する）\n##       x y z\n## 1   dog 1 1\n## 2   cat 2 1\n## 3   pig 3 0\n## 4 horse 4 1\n## 5     1 2 3\n\n# データフレームを追加する場合は、列名が同じである必要がある\nrbind(d, data.frame(x = \"pig\", y = 1, z = TRUE)) \n##       x y     z\n## 1   dog 1  TRUE\n## 2   cat 2  TRUE\n## 3   pig 3 FALSE\n## 4 horse 4  TRUE\n## 5   pig 1  TRUE\n```\n:::\n\n\n### データフレームの要約\n\nデータフレームの各列の要約を調べる場合には、ベクターなどと同様に、`summary`関数を用います。`summary`関数はデータフレームを引数に取ると、列が文字列の場合にはデータ型と要素の数、論理型や因子の場合はそのレベルごとの要素の数、数値型であれば平均値や中央値、最大値・最小値などを示してくれます。\n\nデータフレームの列方向の合計値を求める場合には`colSums`関数を、行方向の合計値を求める場合には`rowSums`関数を用います。データフレームに文字列の列がある場合には、`colSums`関数・`rowSums`関数はエラーを返します。\n\n同様の関数に、`colMeans`関数、`rowMeans`関数もあります。これらはそれぞれ列方向・行方向の平均値を計算する関数です。\n\nデータフレームの一部を確認したいときには、ベクターと同様に`head`関数と`tail`関数を用いることができます。`head`関数はデータフレームの上から6行を、`tail`関数はデータフレームの下から6行をそれぞれ表示します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(d) # データフレームの要約\n##       x                   y            z          \n##  Length:4           Min.   :1.00   Mode :logical  \n##  Class :character   1st Qu.:1.75   FALSE:1        \n##  Mode  :character   Median :2.50   TRUE :3        \n##                     Mean   :2.50                  \n##                     3rd Qu.:3.25                  \n##                     Max.   :4.00\n\nd1\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 3 3 5.0 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\ncolSums(d1) # 列方向に合計した値\n##    a    b    c \n## 21.0 31.5  6.0\n\ncolSums(d) # 数値以外が含まれているとエラーになる\n## Error in colSums(d): 'x' must be numeric\n\nrowSums(d1) # 行方向に合計した値\n## [1]  6.0  7.5  9.0 10.5 12.0 13.5\n\ncolMeans(d1) # 列方向の平均値\n##    a    b    c \n## 3.50 5.25 1.00\n\nrowMeans(d1) # 行方向の平均値\n## [1] 2.0 2.5 3.0 3.5 4.0 4.5\n\nhead(d1) # データフレームの上から6行を表示\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 3 3 5.0 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n\ntail(d1) # データフレームの下から6行を表示\n##   a   b c\n## 1 1 4.0 1\n## 2 2 4.5 1\n## 3 3 5.0 1\n## 4 4 5.5 1\n## 5 5 6.0 1\n## 6 6 6.5 1\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表1：データフレームに関する関数\n\n|関数名                  |データフレームに適用する演算    |\n|:-----------------------|:-------------------------------|\n|data.frame(x, y)        |データフレームを作成する        |\n|dim(x)                  |次元（dimension）を返す         |\n|ncol(x)                 |列数を返す                      |\n|nrow(x)                 |行数を返す                      |\n|colnames(x)             |列の名前を返す                  |\n|rownames(x)             |行の名前を返す                  |\n|colnames(x) <- y        |yを列の名前に設定する           |\n|rownames(x) <- y        |yを行の名前に設定する           |\n|subset(x, 条件)         |条件に適合した行を抽出する      |\n|x[order(x$name), ]      |name列で昇順に並べ替え          |\n|x[rev(order(x$name)), ] |name列で降順に並べ替え          |\n|cbind(x, y)             |列を追加する                    |\n|rbind(x, y)             |行を追加する                    |\n|summary(x)              |データフレームの要約を表示      |\n|colSums(x)              |列（縦）方向の和を返す          |\n|rowSums(x)              |行（横）方向の和を返す          |\n|colMeans(x)             |列（縦）方向の平均値を返す      |\n|rowMeans(x)             |行（横）方向の平均値を返す      |\n|head(x)                 |データフレームの上から6行を表示 |\n|tail(x)                 |データフレームの下から6行を表示 |\n\n\n:::\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## データフレームの要約\n\nもっと複雑なデータフレームの要約を行う場合には、`apply`関数群や`dplyr`パッケージ [@dplyr_bib]、`tidyr`パッケージ [@tidyr_bib]などを用います。`apply`関数群、`dplyr`、`tidyr`に関しては[15章](./chapter15.html)、[16章](./chapter16.html)でそれぞれ紹介します。\n\n:::\n\n### 組み合わせのデータフレームを作成する\n\n様々な要素について、すべての組み合わせを含むデータを作りたい、という場合が時にあります。このような場合には、`expand.grid`関数を用いると簡単に組み合わせのデータフレームを作成することができます。`expand.grid`関数は`data.frame`関数と同じように引数を設定し、引数に設定したベクターのすべての組み合わせを含むデータフレームを作成してくれます。\n\n\n::: {.cell filename='expand.grid関数'}\n\n```{.r .cell-code}\nexpand.grid(sex=c(\"M\", \"F\"), age=c(20,25), location=c(\"Osaka\", \"Kobe\"))\n##   sex age location\n## 1   M  20    Osaka\n## 2   F  20    Osaka\n## 3   M  25    Osaka\n## 4   F  25    Osaka\n## 5   M  20     Kobe\n## 6   F  20     Kobe\n## 7   M  25     Kobe\n## 8   F  25     Kobe\n```\n:::\n\n\n\n## 行列（matrix）\n\nRは高校数学で学んだ行列、線形代数の行列計算を行うためのクラスである、**行列（matrix）**を持ちます。行列はベクターと同様に同じ型を持つ要素の集合で、行と列の2つの**次元（dimension）**を持ちます。\n\nデータフレームも行列と同様に次元を持ちますが、データフレームが行方向には異なるデータ型を取ることができるのに対して、行列はすべての要素のデータ型が同じです。また、データフレームがリストであるのに対し、行列は縦・横の2つの次元を持つベクターです。\n\n行列の基本的な取り扱い（インデックス、行・列の追加、行名・列名）はデータフレームとほぼ同じです。上に述べたデータフレームの取り扱いに関する方法は、概ね行列にも適用することができます。\n\n行列の作成には、`matrix`関数を用います。`matrix`関数は第一引数にベクター、`nrow`引数に行の数、`ncol`引数に列の数を指定します。`matrix`関数はベクターの数値を縦方向（列方向）に並べて配置します。数値を横（行方向）に並べて配置する場合には、`byrow`引数を`TRUE`に指定します。\n\n\n::: {.cell filename='行列の作成とインデックス'}\n\n```{.r .cell-code}\nmat <- matrix(1:12, nrow = 3, ncol = 4) # 列方向にベクターが配置される\nmat\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    4    7   10\n## [2,]    2    5    8   11\n## [3,]    3    6    9   12\n\nmatrix(1:12, nrow = 3, ncol = 4, byrow = TRUE) # 行方向に配置するとき\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    2    3    4\n## [2,]    5    6    7    8\n## [3,]    9   10   11   12\n\ndim(mat) # 行数・列数を返す\n## [1] 3 4\n\nnrow(mat) # 行数\n## [1] 3\n\nncol(mat) # 列数\n## [1] 4\n\ncolnames(mat) <- c(\"dog\", \"cat\", \"pig\", \"horse\") # 列名の設定\nrownames(mat) <- c(\"first\", \"second\", \"third\") # 行名の設定\nmat\n##        dog cat pig horse\n## first    1   4   7    10\n## second   2   5   8    11\n## third    3   6   9    12\n\ncolnames(mat) # 列名の取得\n## [1] \"dog\"   \"cat\"   \"pig\"   \"horse\"\n\nrownames(mat) # 行名の取得\n## [1] \"first\"  \"second\" \"third\"\n\nmat[1, 1] # 1行1列目の要素\n## [1] 1\n\nmat[1, ] # 1行目の要素\n##   dog   cat   pig horse \n##     1     4     7    10\n\nmat[, 1] # 1列目の要素\n##  first second  third \n##      1      2      3\n\nmat[-1, ] # 1行目を削除\n##        dog cat pig horse\n## second   2   5   8    11\n## third    3   6   9    12\n\nmat[c(T, T, F), ] # 論理型でも指定できる\n##        dog cat pig horse\n## first    1   4   7    10\n## second   2   5   8    11\n\nmat[1:2, ] # 1~2行目の要素\n##        dog cat pig horse\n## first    1   4   7    10\n## second   2   5   8    11\n\nmat[, \"dog\"] # インデックスは列名でも指定できる\n##  first second  third \n##      1      2      3\n\nmat$dog # ドルマークを用いることはできない\n## Error in mat$dog: $ operator is invalid for atomic vectors\n\nmat[\"first\", ] # 行名での指定\n##   dog   cat   pig horse \n##     1     4     7    10\n\ncbind(mat, rat = c(4, 6, 8)) # 列の追加\n##        dog cat pig horse rat\n## first    1   4   7    10   4\n## second   2   5   8    11   6\n## third    3   6   9    12   8\n\nrbind(mat, fourth = c(1, 1, 1, 1)) # 行の追加\n##        dog cat pig horse\n## first    1   4   7    10\n## second   2   5   8    11\n## third    3   6   9    12\n## fourth   1   1   1     1\n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n\n## 3次元以上のクラス：array\n\nRには、次元を3つ以上持つクラスである、arrayも存在しますが、matrixほどには使用頻度は高くありません。\n\n:::\n\n### 行列の演算\n\n統計の計算には、線形代数（行列）が用いられます。Rには行列の演算に関する関数が一通り揃っています。\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 表2：行列に関する関数\n\n|関数名    |行列に適用する演算     |\n|:---------|:----------------------|\n|*         |スカラー積             |\n|%*%       |行列の積               |\n|%o%       |外積                   |\n|%x%       |クロネッカー積         |\n|diag      |単位行列を作成する     |\n|det       |行列式を返す           |\n|t         |転置を返す             |\n|upper.tri |上三角行列にTRUEを返す |\n|lower.tri |下三角行列にTRUEを返す |\n|solve     |逆行列を返す           |\n|qr        |QR分解                 |\n\n\n:::\n:::\n\n\n### 行列の積\n\nRでは、`%*%`を演算子として行列の積の計算を行います。単に「`*`」で計算すると、行列の積ではなく、スカラー積が返ってきます。行列同士を「`*`」で掛け算した場合には、行列の各要素がそれぞれ掛け算されたもの（アダマール積）が返ってきます。行列の演算子として、他に外積（`%o%`）やクロネッカー積（`%x%`）の演算子も設定されています。\n\n\n::: {.cell}\n\n:::\n\n::: {.cell filename='行列の演算子'}\n\n```{.r .cell-code}\n# 要素が1~16のランダムな行列を作成\nmat <- matrix(sample(1:16, 16), nrow=4) \nmat\n##      [,1] [,2] [,3] [,4]\n## [1,]    9    2   13    6\n## [2,]    4   14    5   15\n## [3,]    7   12   11   16\n## [4,]    1    3   10    8\n\nmat * 3 # スカラー積\n##      [,1] [,2] [,3] [,4]\n## [1,]   27    6   39   18\n## [2,]   12   42   15   45\n## [3,]   21   36   33   48\n## [4,]    3    9   30   24\n\nmat * mat # アダマール積\n##      [,1] [,2] [,3] [,4]\n## [1,]   81    4  169   36\n## [2,]   16  196   25  225\n## [3,]   49  144  121  256\n## [4,]    1    9  100   64\n\nmat %*% mat # 行列の積\n##      [,1] [,2] [,3] [,4]\n## [1,]  186  220  330  340\n## [2,]  142  309  327  434\n## [3,]  204  362  432  526\n## [4,]   99  188  218  275\n\nmat[, 1] %o% mat[, 2] # 外積\n##      [,1] [,2] [,3] [,4]\n## [1,]   18  126  108   27\n## [2,]    8   56   48   12\n## [3,]   14   98   84   21\n## [4,]    2   14   12    3\n\nmat[1:2, 1:2] %x% mat[3:4, 3:4] # クロネッカー積\n##      [,1] [,2] [,3] [,4]\n## [1,]   99  144   22   32\n## [2,]   90   72   20   16\n## [3,]   44   64  154  224\n## [4,]   40   32  140  112\n```\n:::\n\n\n### 行列式・転置・逆行列の演算\n\n行列式は`det`関数、行列の転置は`t`関数、逆行列は`solve`関数で求めることができます。`t`関数は行列だけでなく、データフレームを引数に取ることができますが、**`t`関数の返り値は必ず行列**になります。データフレームを`t`関数の引数にして転置する場合にはデータ型が変換されることが多いため、注意が必要です。\n\n\n::: {.cell filename='行列式・転置・逆行列'}\n\n```{.r .cell-code}\ndet(mat) # matの行列式\n## [1] -712\n\nt(mat) # matを転置\n##      [,1] [,2] [,3] [,4]\n## [1,]    9    4    7    1\n## [2,]    2   14   12    3\n## [3,]   13    5   11   10\n## [4,]    6   15   16    8\n\nsolve(mat) # matの逆行列\n##             [,1]       [,2]       [,3]  [,4]\n## [1,] -0.08005618 -0.3455056  0.4789326 -0.25\n## [2,]  0.55758427  1.1432584 -1.4058989  0.25\n## [3,]  0.32724719  0.5702247 -0.7823034  0.25\n## [4,] -0.60814607 -1.0983146  1.4452247 -0.25\n\nmat %*% solve(mat) # 丸め誤差はあるが、単位行列になる\n##               [,1] [,2]         [,3]         [,4]\n## [1,]  1.000000e+00    0 0.000000e+00 4.440892e-16\n## [2,]  0.000000e+00    1 3.552714e-15 4.440892e-16\n## [3,] -1.776357e-15    0 1.000000e+00 0.000000e+00\n## [4,] -8.881784e-16    0 1.776357e-15 1.000000e+00\n```\n:::\n\n\n### 単位行列・三角行列の作成\n\n`diag`関数は単位行列を作成するための関数です。`diag`関数は数値を引数に取り、その数値の行数・列数の単位行列を返します。\n\n三角行列の作成には、`upper.tri`関数と`lower.tri`関数を用います。この2つの関数は、行列を引数に取り、行列と同じ行数・列数の論理型の上三角行列（上が`TRUE`、下三角が`FALSE`の行列）、下三角行列（下が`TRUE`、上三角が`FALSE`の行列）をそれぞれ返します。いずれも対角成分は`FALSE`となります。\n\nただし、`upper.tri`関数、`lower.tri`関数の返り値をそのまま行列のインデックスに用いても上三角行列・下三角行列を作ることはできません。上三角行列を作成する場合には、`lower.tri`関数の返り値をインデックスに取り、このインデックスに0を代入します。\n\n逆に、下三角行列を作成する場合には、`upper.tri`関数の返り値をインデックスに取り、このインデックスに0を代入します。このように0を下三角・上三角に代入することで、上三角行列・下三角行列を得ることができます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiag(3) # 3行3列の単位行列\n##      [,1] [,2] [,3]\n## [1,]    1    0    0\n## [2,]    0    1    0\n## [3,]    0    0    1\n\nupper.tri(mat) # 上三角行列にTRUEを返す\n##       [,1]  [,2]  [,3]  [,4]\n## [1,] FALSE  TRUE  TRUE  TRUE\n## [2,] FALSE FALSE  TRUE  TRUE\n## [3,] FALSE FALSE FALSE  TRUE\n## [4,] FALSE FALSE FALSE FALSE\n\nlower.tri(mat) # 下三角行列にTRUEを返す\n##       [,1]  [,2]  [,3]  [,4]\n## [1,] FALSE FALSE FALSE FALSE\n## [2,]  TRUE FALSE FALSE FALSE\n## [3,]  TRUE  TRUE FALSE FALSE\n## [4,]  TRUE  TRUE  TRUE FALSE\n\nmat.u <- mat\nmat.l <- mat\n\nmat.u[lower.tri(mat)] <- 0 # 下三角行列のみに0を代入\nmat.l[upper.tri(mat)] <- 0 # 上三角行列のみに0を代入\n\nmat.u # 下三角に0を代入すると上三角行列が得られる\n##      [,1] [,2] [,3] [,4]\n## [1,]    9    2   13    6\n## [2,]    0   14    5   15\n## [3,]    0    0   11   16\n## [4,]    0    0    0    8\n\nmat.l # 上三角に0を代入すると下三角行列が得られる\n##      [,1] [,2] [,3] [,4]\n## [1,]    9    0    0    0\n## [2,]    4   14    0    0\n## [3,]    7   12   11    0\n## [4,]    1    3   10    8\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}