# グラフ作成：高レベルグラフィック関数

```{r, setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE
)
```

Rでは、ライブラリを用いることなく、論文に使用できるレベルのグラフを作成することができます。Rでのグラフ作成に用いる関数には、

- 高レベルグラフィック関数（High-level plotting functions）
- 低レベルグラフィック関数（Low-level plotting functions）
- インタラクティブグラフィック関数（Interactive plotting functions）

の3種類があります。

**高レベルグラフィック関数**は、一つの関数でグラフ全体を作成するもの、**低レベルグラフィック関数**はグラフ上に点や線、軸、ラベルなどを置く関数、インタラクティブグラフィック関数はグラフをマウスでクリックすることでその点の値を取得したりするものです。

Rでは通常、高レベルグラフィック関数で作成したグラフを重ねて表現し、低レベルグラフィック関数で修正・追記してグラフを完成させます。また、グラフ上の点を選択して統計モデルを実行するようなプログラムを組む場合には、インタラクティブグラフィック関数を用います。

:::{.callout-tip collapse="true"}

## グラフ作成に関するライブラリ

Rでは、ライブラリを読み込むことなくグラフを作成することができますが、現在では、[`ggplot2`](https://ggplot2.tidyverse.org/index.html)をグラフ作成に用いるのが事実上のデフォルトのようになっています。`ggplot2`については[後の章](./chapter22.html)で詳しく説明します。

`ggplot2`には、`ggplot2`に機能を追加するような[Extensions](https://exts.ggplot2.tidyverse.org/gallery/)もたくさん作成されています。

`ggplot2`の他にも、この章で紹介する3Dグラフ作成ライブラリである[`rgl`パッケージ](https://dmurdoch.github.io/rgl/) [@rgl_bib]、インタラクティブなグラフを作成することができる[`plotly`](https://plotly.com/r/) [@plotly_bib]、`ggplot2`にお株を奪われたような形ではありますが、複数のグラフを簡単に並べて書くことができる[`lattice`](https://lattice.r-forge.r-project.org/) [@lattice_bib]、`plotly`のようにインタラクティブなグラフ作成できる[`dygraphs`](https://rstudio.github.io/dygraphs/) [@dygraphs_bib]などがあります。

:::

## 高レベルグラフィック関数

Rの高レベルグラフィック関数の一覧を以下の表1に示します。

```{r, echo=FALSE}
d <- readxl::read_excel("./data/chapter18_highlevel_function.xlsx", sheet=1)
knitr::kable(d, caption="表1：高レベルグラフィック関数の一覧")
```

## plot関数

`plot`関数は、Rでは最も基本的で、かつ利用範囲の広いグラフ作成関数です。`plot`関数は典型的なジェネリック関数で、グラフを引数に適した形で表示してくれます。ライブラリを呼び出していない場合、`plot`関数で呼び出されている関数は以下の30種類です。

```{r, filename="ジェネリック関数としてのplot関数"}
methods("plot")
```

ライブラリには、そのライブラリで使用するオブジェクトを引数とするのに適した形の`plot`関数が設定されていることも多く、ライブラリを使用した場合にはこの30種類よりも多くのグラフを`plot`関数だけで描画することができます。

### 散布図

`plot`関数の引数に、`x`と`y`の2つの同じ長さのベクターを数値で取った場合、`plot`関数は散布図を描画します。`x`に取った引数が横軸、`y`に取った引数が縦軸となります。

```{r, filename="plot関数：散布図"}
x <- 1:10
y <- 2 * x
plot(x = x, y = y)
```

`x`と`y`の関係は、チルダ（`~`）を用いてformulaの形式で書くこともできます。中学校で習った関数のグラフと同様に、チルダの前が縦軸、チルダの後ろが横軸になります。

```{r, filename="plot関数：formulaで指定"}
plot(y ~ x)
```

`plot`関数は引数が一つだけでも、グラフを作図してくれます。引数が一つだけの場合、`plot`関数は値を縦軸に、インデックスを横軸に取ったグラフを作成します。`stripchart`関数を用いても、同じグラフを作成することができます。

```{r, filename="plot関数：引数が1つの場合"}
z <- sample(1:10, 10) # 1~10をランダムに並べ替える
z

plot(z) # 縦軸に値を取るグラフを表示
```

`plot`関数はデータフレーム（もしくは行列）を引数に取ることもできます。2列のデータフレームを引数に取った場合には、1列目をx軸、2列目をy軸とした散布図を描画します。

```{r, filename="plot関数：データフレームを引数に取る"}
cars |> head() # 車の速度が1列目、停車までの距離が2列目

plot(cars) # x軸に速度、y軸に停車までの距離をプロット
```

### 散布行列図

2列以上のデータフレーム（もしくは行列）を引数に取った場合には、`plot`関数は**散布行列図（matrix of scatterplots）**を表示します。因子は数値に自動的に変換されます。

```{r, filename="plot関数：散布図行列"}
plot(iris)
```

散布行列図には専用の関数である、`pairs`関数もありますが、`plot`関数で記述するものと差はありません。

```{r, filename="pairs関数で散布図行列"}
pairs(iris)
```

### 時系列プロット

時系列（ts）クラスのオブジェクトを引数にした場合、`plot`関数は横軸に時間、縦軸に値を取った線グラフを表示します。

```{r, filename="plot関数：時系列（ts）を引数に取る"}
plot(Nile)
```

`ts`クラスに季節性（四半期や12か月）がある場合、単に`plot`関数の引数に取ると、上記の通り、単に線グラフが返ってきます。

```{r, filename="季節性のあるデータの描画"}
plot(JohnsonJohnson) # JohnsonJohnsonの4半期ごとの株価
```

季節性のある時系列データを`decompose`関数の引数に指定すると、時系列データをトレンド、季節性、ランダムな要素に分離してくれます。この`decompose`関数の返り値を`plot`関数の引数に取ると、観察データ、トレンド、季節性、ランダムな要素をそれぞれ線グラフとして表示してくれます。

```{r, filename="decompose関数と時系列の要素分離"}
JohnsonJohnson |> decompose() |> plot() # decomposeは時系列のトレンド・季節性・ランダム要素を分ける関数
```

### 箱ひげ図

`plot`関数の`x`に因子、`y`に数値を取った場合、`plot`関数は**箱ひげ図**を表示します。

```{r, filename="plot関数：箱ひげ図"}
# x軸が因子、y軸は数値
plot(x = iris$Species, y = iris$Sepal.Length)
```

箱ひげ図の記述する専用の関数として、Rには`boxplot`関数が設定されています。`boxplot`関数を用いた場合、数値ベクターを引数に取り、その数値ベクターに対応した箱ひげ図を記述することができます。`plot`関数と同様に因子で分割した箱ひげ図を記載することもできますが、分割する場合、`boxplot`関数では引数をformulaで設定する必要があります。

```{r, filename="boxplot関数で箱ひげ図を描画"}
boxplot(iris$Sepal.Length) # 数値ベクターを引数に取ることもできる
boxplot(iris$Sepal.Length ~ iris$Species) # plot関数とは異なり、formulaを引数に取る
```

### 因子と棒グラフ

`plot`関数では因子ベクターを一つだけ引数に取ることもできます。因子を引数に取った場合には、各レベルの要素の数（度数）を棒グラフで表示します。

```{r, filename="plot関数：度数を棒グラフで描画"}
fct <- sample(c("dog", "cat", "pig"), 50, replace = T) |> factor()
fct |> summary()

plot(fct)
```

`plot`関数の引数に2つの因子を取ると、**モザイク図（mosaic plot）**が表示されます。棒グラフの横幅、縦軸ともに各レベルの要素の数を反映しています。

```{r, filename="plot関数：モザイク図"}
# シロイヌナズナの場所ごとの集団と発芽の方法の関係
plot(lme4::Arabidopsis$popu, lme4::Arabidopsis$status)
```

### 確率密度

Rでは、データの分布をカーネル密度に変換し、プロットすることもできます。`density`関数は数値データをカーネル密度に変換する関数です。`density`関数の返り値を`plot`関数の引数に取ると、カーネル密度に変換した数値データの分布が線グラフで表示されます。

```{r, filename="density関数と確率密度"}
iris$Sepal.Length |> density() |> plot()
```

### 関数の作図

`plot`関数を用いれば、定義した関数をそのままグラフにすることもできます。`function`で関数を作成し、この関数を`plot`関数の引数に取ると、`plot`関数は作成した関数の引数をx軸に、関数の返り値をy軸に取った線グラフを作成します。

```{r, filename="plot関数：関数の描画"}
fun1 <- function(x){sin(x)}
plot(fun1, xlim = c(-pi, pi)) # xlimはx軸の範囲を指定する引数
plot(\(x){cos(x)}, xlim = c(-pi, pi)) # \で作成した無名関数も使える
```

同様の関数の作図は、`curve`関数を用いても記述することができます。

```{r, filename="curve関数で関数を描画"}
curve(sin, -pi, pi) # sin関数を-piからpiまで記述
```


### ステップ関数（step functions）

`stepfun`関数は2つの数値ベクターからステップ関数という、階段状になった値の列を返す関数です。引数`x`がx軸上の位置、引数`y`はy軸上の値を示します。この`stepfun`関数の返り値を`plot`関数の引数に取ると、ステップ関数が表示されます。

```{r, filename="stepfunでステップ関数を描画する"}
x <- 1:10
y <- sample(c(1:3), 11, replace = T)
stepfun(x, y) # stepfunクラスのオブジェクトを作成

stepfun(x, y) |> plot()
```

### plot関数の引数一覧

`plot`関数では、x軸・y軸を示す引数以外にも、軸ラベルやグラフの主題、散布図の点の形やグラフの表記のタイプなど、様々なグラフの要素を調整するための引数を指定することができます。引数の一覧を以下の表2に示します。

```{r, echo=FALSE}
d <- readxl::read_excel("./data/chapter18_highlevel_function.xlsx", sheet=2)
knitr::kable(d, caption="表2：plot.default関数の引数一覧")
```

`plot`関数の`type`引数には、以下の文字列を設定できます。設定する文字列の一覧を以下の表3に示します。

```{r, echo=FALSE}
d <- readxl::read_excel("./data/chapter18_highlevel_function.xlsx", sheet=3)
knitr::kable(d, caption="表3：type引数の一覧")
```

`plot`関数の`pch`引数には、数値（または文字列）を設定します。数値によって、プロットされる点の形が変化します。指定できる点の形は以下の通りです。

```{r, echo=FALSE}
pchShow <-
  function(extras = c("*",".", "o","O","0","+","-","|","%","#"),
           cex = 3, ## good for both .Device=="postscript" and "x11"
           col = "black", bg = "yellow", coltext = "black", cextext = 1.2,
           main = "")
  {
    nex <- length(extras)
    np  <- 26 + nex
    ipch <- 0:(np-1)
    k <- floor(sqrt(np))
    dd <- c(-1,1)/2
    rx <- dd + range(ix <- ipch %/% k)
    ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)
    pch <- as.list(ipch) # list with integers & strings
    if(nex > 0) pch[26+ 1:nex] <- as.list(extras)
    par(mar=c(0.5, 0.5, 0.5, 0.5))
    plot(rx, ry, type = "n", axes  =  FALSE, xlab = "", ylab = "", main = main)
    abline(v = ix, h = iy, col = "lightgray", lty = "dotted")
    for(i in 1:np) {
      pc <- pch[[i]]
      ## 'col' symbols with a 'bg'-colored interior (where available) :
      points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)
      if(cextext > 0)
          text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)
    }
  }

pchShow()
```

## hist関数：ヒストグラム

データの分布を棒グラフで示す**ヒストグラム**を表示する場合には、`hist`関数を用います。`hist`関数は数値のベクターを引数に取り、数値ごとの度数を棒グラフにした形で表示します。このとき、度数は数値の等間隔の範囲ごとに数えます。この等間隔の範囲（棒）の数のことを、binsやbreaksと呼びます。`hist`関数では、`breaks`引数でこのbreaks、棒グラフの棒の数を指定します。また、`freq`引数を`FALSE`に指定すると、縦軸を確率密度で表示することができます。

```{r, filename="hist関数でヒストグラムを描画"}
hist(iris$Sepal.Length) # デフォルトではちょうどよい感じで分割してくれる
hist(iris$Sepal.Length, freq = FALSE, breaks = 15) # 縦軸は確率密度、15分割したヒストグラム
```

`breaks`は数値ベクターで指定することもできます。数値で指定した場合には、数値の間隔が棒グラフの幅となり、数値ベクターの長さ-1が棒の数となります。

```{r, filename="breaks関数でヒストグラムの幅指定"}
hist(iris$Sepal.Length, breaks = c(4, 5, 6, 8))
```

## coplot関数

`coplot`関数は、2数の関係を示すグラフを、因子で分割して表示するための関数です。`coplot`関数ではformulaでx軸、y軸の数値を指定します（「`y軸の値 ~ x軸の値`」の形で指定）。グラフを分割するための因子は、formulaの後に、`|`を挟んで指定します。

```{r, filename="coplot関数で因子ごとに分けたグラフを作成"}
coplot(iris$Sepal.Length ~ iris$Sepal.Width | iris$Species)
```

## qqプロット

数値が正規分布しているのか確認するために、正規分布に従った分位点とデータの分位点の関係をプロットするグラフを、**qqプロット**と呼びます。qqプロットでは、データが正規分布する場合、点が概ね直線上に乗ります。

Rでqqプロットを表示するための関数が、`qqnorm`関数です。`qqnorm`関数は数値ベクターを引数に取り、縦軸にデータの分位点、横軸に正規分布を仮定したときの分位点を示します。

```{r, filename="qqnorm関数でqqプロットを作成"}
qqnorm(iris$Sepal.Length) # 概ね正規分布するときは、直線に乗る
qqnorm(runif(1000, 0, 1)) # 一様分布すると、直線に乗らない
```

正規分布ではなく、自分で指定した分布との比較を行いたい場合や、2つの数値の間での分布が一致するかどうか確かめるために用いるのが、`qqplot`関数です。`qqplot`関数は引数として数値ベクターを2つ取ります。`qqplot`関数では、2つの数値ベクターの長さが同じである必要はありません。

```{r, filename="qqplot関数でデータの分布を評価する"}
qqplot(iris$Sepal.Length, iris$Sepal.Width) # どちらも同じ分布に近いため、直線上に乗る
qqplot(iris$Sepal.Length, rchisq(1000, 5)) # Sepal.Lengthはカイ二乗分布とは分布が異なるため、直線に乗らない
```

## dotchart関数：ドットプロット

`dotchart`関数は、クリーブランドドットプロットと呼ばれるグラフを作成するための関数です。このグラフは、カテゴリごとの値を点で示したもので、カテゴリや因子間で値を比較するときに用いられるものです。

```{r, fig.height=7, filename="dotchart関数でクリーブランドドットプロットを作成"}
dotchart(WorldPhones[, 1:4])
```

## barplot関数：棒グラフ

`barplot`関数は棒グラフを表示するための関数です。`barplot`関数は数値ベクターを引数に取り、ベクターのそれぞれの値を棒グラフで表示します。引数を行列で与えると、積み上げ式棒グラフを作図することもできます。

```{r, filename="barplot関数で棒グラフを描画"}
v <- c(first = 1, second = 2, third = 3)
barplot(v)
v2 <- c(first = 2, second = 4, third = 6)
cbind(v, v2) # 行列

barplot(cbind(v, v2)) # 積み上げ式棒グラフ
```

## pie関数：円グラフ

`pie`関数は円グラフを表示するための関数です。`pie`関数も`barplot`関数と同じく、数値のベクターを引数に取り、数値を反映した円グラフを表示します。ただし、この[`pie`関数のヘルプ](https://search.r-project.org/R/refmans/graphics/html/pie.html)にも記載されている通り（「*Pie charts are a very bad way of displaying information.*」）、円グラフは理解しにくく、良いグラフであるとは考えられていません。円グラフで表示せずにドットプロット、棒グラフを用いて示した方がよいでしょう。

```{r, filename="pie関数で円グラフを描画"}
(v <- sample(1:10, 5))
par(mar = c(0.5, 0.5, 0.5, 0.5))
pie(v)
```

## image関数：ヒートマップ

`image`関数は行列を引数に取り、行列の位置（行・列）とその値の関係を色で示したグラフを表示する関数です。このようなグラフは**ヒートマップ**と呼ばれます。

```{r, filename="image関数でヒートマップ作成"}
image(volcano) # 火山の緯度・軽度と標高の関係
iris[,1:4] |> as.matrix() |> image() # 行列であればヒートマップにできる
```

## persp関数：3次元グラフ

`persp`関数は3次元グラフを作成するための関数です。`x`軸、`y`軸、`z`軸の値をそれぞれ数値ベクターとして引数に指定し、`theta`と`phi`の2つの引数で、3次元グラフを観察する視点を指定します。ただし、この`persp`関数では3次元グラフの視点を動かすのが難しいため、Rではかなり前から**[`rgl`パッケージ](https://dmurdoch.github.io/rgl/)** [@rgl_bib]を用いて3次元グラフを描画するのが一般的です。

```{r, filename="persp関数で3次元グラフ"}
par(mar = c(0.5, 0.5, 0.5, 0.5))
persp(x = 1:nrow(volcano), y = 1:ncol(volcano), z = volcano, theta = 45, phi = 30, expand = 0.5)
```

## rglパッケージ：3次元グラフ

`rgl`パッケージは、[OpenGL](https://www.opengl.org/) [@woo1999opengl]という、C言語の3Dグラフィックスライブラリを使用したRのグラフ作成ライブラリです。`rgl`パッケージの関数群を用いることで、R上でマウスを使って視点をグリグリ動かすことができる3次元グラフを作成することができます。

```{r, collapse=TRUE, error=TRUE, filename="rglパッケージで3次元グラフ"}
pacman::p_load(rgl)
p_iris3d <- plot3d(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, col = as.numeric(iris$Species))

rglwidget(elementId = "plot3drgl")
```

:::{.callout-tip collapse="true"}

## 3次元グラフについて

Rに限らず、3次元グラフを作成できると何か楽しいような気がします。しかし、データ解析においては3次元グラフではデータを理解しにくく、数値を直感的に比較することが困難です。「3次元グラフでなければ表現できない」などの非常に特別な場合を除けば、3次元グラフの利用は避けた方が良いでしょう。

:::

## contour関数：等高線グラフ

`contour`関数は`image`関数と同様に行列を引数に取り、x軸に列、y軸に行、高さとして行列の値を用いた等高線グラフを作成するための関数です。

```{r, filename="contour関数で等高線グラフを描画"}
contour(volcano)
```

`filled.contour`関数を用いると、等高線に加えて、`image`関数と同様の色での表現を加えることができます。

```{r, filename="filled.contour関数で色付き等高線グラフを描画"}
filled.contour(volcano)
```

## デバイス

RStudioを用いるときにはあまり意識する必要がない概念ですが、R GUIを用いてグラフを作成するときには、**デバイス**というものを理解することが重要となります。デバイスとは、グラフを描画するときの「キャンパス」に当たるもので、この「キャンパス」にグラフを描画して、「キャンパス」を表示したり、PDFやJEPGのようなファイル形式として出力したりすることができます。デバイスは、絵を描く時に「キャンパス」を複数準備することができるのと同じように、複数準備することができます。また、グラフを描画したデバイス上に、もう一枚グラフを重ね書きすることもできます。

上記の高レベルグラフィック関数は、呼び出した際に自動的にデバイスを作成し、そのデバイス上にグラフを描画、表示しています。

デバイスを作成する関数が、`dev.new`関数です。`dev.new`関数を引数なしで指定することで、新しいデバイスを作成することができます。この新しく作成したデバイスには何も描画されていません。`dev.new`関数を呼び出すたびに、新しいデバイスが作成されます。

```{r, eval=FALSE, filename="デバイスの作成"}
dev.new() # device 2を作成
dev.new() # device 3を作成
dev.cur() # 現在のデバイス（3が返ってくる）
dev.list() # デバイスのリスト（2と3が返ってくる）
plot(1:10) # device 3にプロットを描画
```

作成したデバイスを閉じるための関数が、`dev.off`関数です。`dev.off`関数では、後に作成したデバイスから閉じていきます。ですので、上の例のように、2枚のデバイス（device 2 とdevice 3）を作成していた場合には、`dev.off`関数によりまずdevice 3 が閉じられて、次に`dev.off`関数を呼ぶとdevice 2 が閉じ、すべてのデバイスが閉じられることになります。

複数のデバイスが存在している時に、すべてのデバイスを閉じる関数が、`graphics.off`関数です。`dev.new`関数で複数のデバイスを開いていても、`graphics.off`関数を呼び出せばすべてのデバイスを一度に閉じることができます。

```{r, eval=FALSE, filename="dev.off関数とgraphics.off関数"}
dev.off() # device 3を閉じる
dev.off() # device 2を閉じる
graphics.off() # デバイスをすべて閉じる
```

### OSごとのデバイス

Rでは、OS（Windows、UNIX、MacOX）ごとのデバイス呼び出し関数が設定されています。Windowsでは`windows`関数、UNIXでは`X11`関数、MacOXでは`quartz`関数が新しいデバイスを作成する際に用いられます。

```{r, eval=FALSE, filename="各OSでのデバイス操作"}
windows() # windowsでのデバイス作成
dev.off()

X11() # UNIXでのデバイス作成
dev.off()

quartz() # Macでのデバイス作成
dev.off()
```

## グラフをファイルに保存する

デバイスには、pdfやtiffのような、画像に関するファイルを作成する機能を持つものもあります。例えば`pdf`関数は引数にファイル名を取るデバイス作成関数で、そのデバイスを引数で指定したファイル名で保存する関数です。デバイスが開いている間は、そのPDFファイルを開いている状態になっており、Windowsなどからアクセスすることはできません。したがって、PDFファイルが完成するのは、**そのデバイスを閉じた時**になります。

```{r, eval=FALSE, filename="pdf関数でPDFにグラフを出力する"}
pdf(file = "filename.pdf") # PDFファイルをデバイスに設定
plot(1:10)
dev.off() # plotが保存されたpdfが作成される
```

Rには、`pdf`関数の他に、[postscriptファイル](https://www.adobe.com/jp/products/postscript.html)として保存するための`postscript`関数やtiffファイルとして保存するための`tiff`関数など、グラフをファイルとして保存するための複数の関数が設定されています。

以下の表4に、Rでのデバイス操作に関する関数の一覧を示します。

```{r, echo=FALSE}
d <- readxl::read_excel("./data/chapter18_highlevel_function.xlsx", sheet=4)
knitr::kable(d, caption="表4：デバイス操作に関する関数の一覧")
```

## グラフの重ね書き

同じデバイス上に2つのグラフを重ね書きする場合には、「`par(new = T)`」を2つの高レベルグラフィック関数の間に置きます。この「`par(new = T)`」は、デバイスは以前にグラフを描画したものと同じものを利用して、グラフを重ね書きすることを指示するための関数です。ただし、この重ね書きでは、プロットの**横軸と縦軸のレンジが同じになるよう調整はしてくれない**ので、高レベルグラフィック関数内で軸のレンジ等をあらかじめ設定する必要があります。

```{r, filename="par(new=T)でグラフを重ね書きする"}
plot(1:10)
par(new = T)
plot(1:10, c(1:5, 1:5), col = "red") # 軸がずれたグラフが重ね書きされる
```
