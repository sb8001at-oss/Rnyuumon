# 数値

```{r, setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE
)
```

Rの型で最もよく利用するものが**数値（numeric）**です。以下では、数値を取り扱う際に用いる関数や手法を紹介します。

## 数値を引数とする関数

まずは、数値を演算するときに用いる関数を紹介します。よく用いられる関数は以下の表1の通りです（`x`、`y`は引数）。関数は演算子より優先的に計算されます。引数である数値はベクターで与えることもできます。

```{r, echo=FALSE}
d <- data.frame(
  func = c("sqrt(x)" ,"exp(x)", "log(x, base=y)", "log(x)","log10(x)", "log2(x)", 
            "sin(x)", "cos(x)", "tan(x)", "acos(x)", "asin(x)", "atan(x)", 
            "round(x, digits=y)", "ceiling(x)", "floor(x)", "trunc(x)", 
            "signif(x, digits=y)", "abs(x)"),
  meaning = c("平方根", "e（ネイピア数、自然対数の底）のx乗", "yを底にした対数", "自然対数", "常用対数", "底が2の対数", "サイン（xはラジアン）", "コサイン", "タンジェント", "アークサイン（サインの逆関数）", "アークコサイン", "アークタンジェント", "小数点以下y桁で四捨五入", "切り上げ", "切り下げ", "切り捨て", "y桁を残して四捨五入", "xの絶対値")
)

colnames(d) <- c("関数名", "xに適用される計算手法")
knitr::kable(d, caption="表1：数値の演算に用いる関数")
```

```{r, filename="数値演算の関数"}
sqrt(9) # 平方根

exp(1) # 指数変換

log(8, base = 2) # 底が2の対数

log(10) # 底がeの対数

log10(10) # 底が10の対数

log2(10) # 底が2の対数

sin(0.5*pi) # サイン

cos(pi) # コサイン

tan(0.25*pi) # タンジェント

asin(0.5) # アークサイン（サインの逆関数）

acos(0.5) # アークコサイン

atan(0.5) # アークタンジェント

round(pi, digits=2) # 四捨五入

ceiling(pi) # 切り上げ

floor(pi) # 切り下げ

trunc(pi) # 切り捨て

signif(pi*100, digits=2) # 2桁以下を四捨五入

abs(-5) # 絶対値

log2(c(2, 4, 8, 16, 32, 64)) # ベクターを引数にする時
```

:::{.callout-tip collapse="true"}

## Rのroundの仕様

Rの`round`関数は概ね四捨五入の結果を返しますが、正確には[四捨五入にはなっていない場合](https://www.atleaf.co.jp/column.html?pageId=45)があるので、注意が必要です。

:::

## 組み合わせ・階乗・順列

統計と確率には密接な関係があります。高校数学の確率で習ったように、確率の計算では順列・組合せの数が重要となります。Rには組み合わせを計算する関数として、`choose`関数があります。また、階乗を計算する関数は`factorial`関数です。順列を計算する関数はないため、階乗を用いて順列を計算する必要があります。

```{r, filename="組み合わせと階乗"}
choose(5, 2) # 5個から2個を選ぶ組み合わせ（5C2）

factorial(3) # 3の階乗（1 * 2 * 3）

factorial(5)/factorial(2) # 5個の要素から3つを並べる順列(5P3)
```

## 数列の作成

Rでは、ベクターは`c`関数を用いて作成します。しかし、長いベクターを`c`関数で自作するのは大変ですし、等差数列や等比数列を作るのに`for`文を用いるのも面倒です。Rでは、数列を作る関数を用いて、等差数列などを作成することができます。また、繰り返しのあるベクターも、関数により作成することができます。

等差数列の作成には、`for`文の説明時に用いた `:`（コロン）や`seq`関数を用います。等比数列は、簡単なものであれば`seq`関数と累乗を用いて作成できます。繰り返しのあるベクターは`rep`関数を用いて作成できます。

```{r, echo=FALSE}
d <- data.frame(
  func = c("x:y" ,"seq(x, y, by = z)", "rep(x, y)", "cumsum(x)","cumprod(x)", "choose(x, y)", "factorial(x)", "prod(x)"),
  meaning = c("xからyまで連続する整数", "xからyまでz間隔での数列", "xをy回繰り返す", "xの累積和", "xの累積積", "x個からy個を選ぶ組み合わせ", "xの階乗", "xの総乗")
)

colnames(d) <- c("関数名", "xに適用される計算手法")
knitr::kable(d, caption="表2：数値のベクター作成・組み合わせなどの関数")
```

```{r, filename="seq関数とrep関数"}
1:10 # 1から10まで公差1の数列

seq(from = 1, to = 10, by=3) # 1から10まで公差3の等差数列

seq(1, 10, length.out=3) # 1から10まで等間隔で、3つの長さの数列

3 ^ (0:10) # 公比3の等比数列

3 ^ seq(0, 10, by=2) # 公比9の等比数列

rep(1:3, 5) # 1, 2, 3を5回繰り返す

rep(1:3, c(3, 3, 3)) # 1, 2, 3をそれぞれ3回繰り返す

rep(1:3, c(3, 2, 1)) # 1を3回、2を2回、3を1回繰り返す

rep(1:3, length.out=10) # 1, 2, 3を長さ10まで繰り返す

rep(c("apple", "orange", "banana"), 2) # どの型でも繰り返しができる
```

## 総乗・累積和・累積積

Rで総乗（数列をすべて掛け算したもの）を計算する場合には、`prod`関数を用います。また、累積和（ベクターの前から順番に足し算したもの）と累積積（前から順番に掛け算したもの）の数列を作る時には、`cumsum`関数と`cumprod`関数を用います。等比数列は`cumprod`関数を利用すれば作成することができます。

```{r, filename="総乗・累積和・累積積・等比数列"}
prod(1:4) # 総乗

cumsum(1:5) # 累積和

cumprod(1:5) # 累積積

cumprod(rep(2, 10)) # 初項2、公比2の等比数列
```

## ベクターの基礎演算と基礎統計量

数値のベクターに対して、平均値や標準偏差などを計算する関数も、Rは備えています。代表的な関数を以下に示します。

```{r, echo=FALSE}
d <- data.frame(
  func = c("sum(x)", "length(x)","mean(x)", "var(x)", "sd(x)", "median(x)", "max(x)",
           "min(x)","quantile(x, probs)", 
           "cov(x, y)", "cov(data.frame)",  "cor(x, y)", "cor(data.frame)"),
  meaning = c("合計値", "ベクターの長さ", "平均値", "（不偏）分散", "（不偏）標準偏差", "中央値", "最大値", "最小値", "分位値（probsは分位の位値）", "共分散", "分散・共分散行列", "相関係数", "相関行列")
)

colnames(d) <- c("関数名", "x、yに適用される計算手法")
knitr::kable(d, caption="表3：数値ベクターの演算に用いる関数")
```

```{r, echo=FALSE}
set.seed(0)
```

```{r, filename="ベクターの基礎演算と基礎統計量"}
x <- seq(0, 10, by=0.5); x # 0から10まで公差0.5の数列
y <- rnorm(21, 5, 3); y # 長さ21の正規乱数

sum(x) # xの合計

length(x) # xの長さ

mean(x) # xの平均値

var(x) # xの分散

sd(x) # xの標準偏差

sd(x)/length(x)^0.5 # xの標準誤差

median(x) # xの中央値

max(x) # xの最大値

min(x) # xの最小値

quantile(x, probs=c(0.25, 0.75)) # xの25%、75%分位値

cov(x, y) # xとyの共分散

cov(data.frame(x, y)) # xとyの分散・共分散行列

cor(x, y) # xとyの相関係数

cor(data.frame(x, y)) # xとyの相関行列
```

:::{.callout-tip collapse="true"}

## 基礎統計量の計算

以下に、上記の基礎統計量の計算式を示します。

`sum(x)`：合計値、x~1~～x~n~の和は以下の式で表されます。

$$sum(x)=\sum_{i=1}^{n}x_{i}$$

`mean(x)`：平均値（$\bar{x}$）、x~1~～x~n~の平均値は以下の式で表されます。

$$mean(x)=\frac{\sum_{i=1}^{n}x_{i}}{n}$$

`var(x)`：不偏分散、x~1~～x~n~の分散は以下の式で表されます。

$$var(x)=\frac{\sum_{i=1}^{n}(x_{i}-\bar{x})^2}{n-1}$$

`sd(x)`：不偏標準偏差、x~1~～x~n~の不偏標準偏差は以下の式で表されます。

$$sd(x)=\sqrt{\frac{\sum_{i=1}^{n}(x_{i}-\bar{x})^2}{n-1}}$$

標準誤差（standard error）、x~1~～x~n~の標準誤差は以下の式で表されます。

$$se(x)=\frac{1}{\sqrt{n}} \cdot sd(x)=\frac{1}{\sqrt{n}}\sqrt{\frac{\sum_{i=1}^{n}(x_{i}-\bar{x})^2}{n-1}}$$

`cov(x, y)`：共分散、x~1~～x~n~とy~1~～y~n~の共分散は平均値（$\bar{x}$、$\bar{y}$）を用いて以下の式で表されます。

$$cov(x, y)=\frac{1}{n}\sum_{i=1}^{n}(x_{i}-\bar{x})(y_{i}-\bar{y})$$

`cor(x, y)`：相関係数、x~1~～x~n~とy~1~～y~n~の相関係数は平均値（$\bar{x}$、$\bar{y}$）を用いて以下の式で表されます。

$$cor(x,y)=\frac{cov(x,y)}{var(x) \cdot var(y)}=\frac{\sum_{i=1}^{n}(x_{i}-\bar{x})(y_{i}-\bar{y})}{\sqrt{\sum_{i=1}^{n}(x_{i}-\bar{x})^2 \cdot \sum_{i=1}^{n}(y_{i}-\bar{y})^2}}$$

:::


### 度数分布の計算

Rでは数値のベクターからヒストグラムを書くことが多いのですが、別途**度数分布表**を描きたいという場合もあります。度数分布を調べる時には、`cut`関数を用います。

`cut`関数は第一引数に数値のベクター、第二引数に度数分布の切断点（1\~10、11\~20などの10と11の境目のこと）を取ります。結果として、数値を「(数値, 数値\]」という形の因子（factor）に変換したものが返ってきます。この時、カッコ（"("）は大なり、四角カッコ（"\]"）は小なりイコールを表しています。ですので、例えば「(40,60\]」と示されている場合には、その値が40より大きく（$x>40$）、60以下($x \leq 60$)であることを表しています。

因子型を引数とする関数には`table`関数というものがあります。この`cut`関数と`table`関数を組み合わせることで、度数分布表を簡単に作成することができます。

```{r, filename="度数分布の計算"}
z <- runif(150, min = 0, max = 100)
# データの存在する範囲を返す関数（因子が返ってくる）
cut(z, breaks=c(-1, 20, 40, 60, 80, 101)) 

z_cut <- cut(z, breaks=c(-1, 20, 40, 60, 80, 101)) 
table(z_cut) # 度数分布表を返すtable関数
```

## summary関数

Rでは、基礎統計量を計算するときには`summary`関数を用いることができます。`summary`関数はベクターを引数に取り、ベクターの最小値、25%四分位、中央値、平均値、75%四分位値、最大値を一度に計算してくれる関数です。`summary`関数の引数にはベクターだけでなく、リストやデータフレームを用いることもできます。`summary`関数は引数の型・クラスによって演算を変え、データの要約を示してくれます。

```{r, filename="summary関数"}
summary(x) # ベクターを引数にするとき

summary(list(x, y)) # リストを引数にするとき

summary(data.frame(x, y)) # データフレームを引数にするとき
```

:::{.callout-tip collapse="true"}

## ジェネリックな関数（generic function）

`summary`関数のように、色々な型・クラスを引数にとり、その型・クラスに応じて出力を変える関数のことを、**ジェネリック関数（generic function）**と呼びます。ジェネリック関数は引数によって呼び出す関数（`summary.data.frame`や`summary.matrix`など）を変えることで、違う型・クラスの引数に対応しています。ジェネリック関数の詳細を調べる場合には、`methods`関数を用います。例えば、`methods(summary)`を実行すると、`summary`関数に属しているジェネリック関数の一覧を確認することができます。

:::

## 微分と積分

### 微分：deriv関数

Rで微分を計算する関数が`deriv`関数です。`deriv`関数は`~`の後の引数に変数を用いた計算式、第二引数に微分する変数を文字列で指定する関数です。

`deriv`関数の返り値はexpressionという型のオブジェクトです。このオブジェクトには、`.value`と`.grad`という2つの値が含まれており、`.value`は関数、`.grad`は関数を微分したものを示します。

ある値における微分値を計算する場合には、`deriv`関数で文字列で指定した変数名に数値を代入し、`eval`関数の引数に`deriv`関数の返り値を取ります。

また、`function.arg=TRUE`を引数に取ると、`deriv`関数の返り値が関数型になります。この場合には、第二引数で指定した文字列がそのまま引数のリストとなります。

もう少し単純に微分の式を求める関数が`D`関数です。`D`関数では第一引数にexpressionを取り、第二引数に微分する変数を文字列で指定します。

```{r, filename="微分"}
dx2x <- deriv(~ x^2, "x") # 微分はf'(x) ~ 2xになる
dx2x # .grad[, "x"]が微分の式

class(dx2x) # 型・クラスはexpression

x <- 5 # xは変数で後から指定できる
eval(dx2x) # evalで微分値の計算(gradientに表示)

x <- 1:10
eval(dx2x) # 数列でも計算できる

# 関数として微分を設定する
dx2x_f <- deriv(y~x^2, c("x", "y"), function.arg=TRUE)
class(dx2x_f) # 関数になっている

# xとyを与えると微分値を計算する
dx2x_f(10, 10^2)

# D関数：関数を与えると微分の式を表示する
D(expression(x^2), "x")
```

### 関数の最小値を求める：optim関数

関数の最小値（微分が0となる値）を求めるための関数が`optim`関数です。`optim`関数は変数の初期値と関数を引数に取り、その関数が最小となる変数の組（[最適化問題](https://ja.wikipedia.org/wiki/%E6%9C%80%E9%81%A9%E5%8C%96%E5%95%8F%E9%A1%8C)の解）を返します。

:::{.callout-tip collapse="true"}

## 最小値を求めるRosenbrock関数

以下は、`optim`のヘルプ（`?optim`）で表示される`optim`の使用例に示されている、Rosenbrock関数（$y=a*(x_{2}-x_{1}^2)^2+(1-x_{1})^2$）の定義とその関数の形をグラフで示したものです。

```{r, filename="Rosenbrock関数"}
# 関数の式
fr <- function(x) { 
  x1 <- x[1]
  x2 <- x[2]
  100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}

fr2 <- function(x, y){100 * (y - x * x)^2 + (1 - x)^2}

pacman::p_load(plotly, tidyverse)
d <- expand.grid(
  x1 = seq(-2, 2, by = 0.05),
  x2 = seq(-2, 2, by = 0.05)
  )

d$rb <- mapply(fr2, d$x1, d$x2)

mrb <- matrix(d$rb, nrow=81, ncol=81)

d |> 
  ggplot(aes(x=x1, y=x2, color=log(rb), fill=log(rb)))+
  geom_bin2d(stat="identity")+
  labs(x="x1", y="y1", color="Rosenbrock関数の値")

fr(c(1, 1)) # 0になる

plot_ly(z=~mrb) |> add_surface()
```

:::

```{r, filename="optim関数"}
fr <- function(x) { ## Rosenbrock関数
  x1 <- x[1]
  x2 <- x[2]
  100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}

# x1の初期値は-1.2、x2の初期値は1で最小値を求める
optim(c(-1.2,1), fr) # 最小となるのはc(1,1)のとき
```

### 積分：integrate関数

Rでは、`integrate`関数を用いて積分値を計算することができます。`integrate`関数は第一引数に関数を取り、その後に積分する範囲を指定する関数です。`Inf`を用いることで無限大までの範囲の積分を計算することもできます。

```{r, filename="積分"}
f <- \(x){x^2}
integrate(f, 0, 2) # fを0から2まで積分する

integrate(dnorm, 0, Inf) # 正規分布を0から+無限大まで積分する
```

## 多項の方程式の解を求める

多項の方程式（$ax^3+bx^2+cx+d=0$のような方程式）を解くための関数が`polyroot`関数です。`polyroot`関数は上記のa、b、c、dをベクターで引数に指定し、方程式の解を返します。また、`polyroot`関数の返り値を`Mod`関数に渡すことで、解に虚数が含まれている場合の解の原点からの距離に変換することができます。

```{r, filename="polyroot関数"}
polyroot(c(1,1)) # x + 1 = 0の解

polyroot(c(1, 2, 1)) # x^2 + 2x + 1 = 0の解

polyroot(c(1, 3, 3, 1)) # x^3 + 3x^2 + 3x + 1 = 0の解

polyroot(c(1, -3, -3, -1)) # 虚数解があるとき

Mod(polyroot(c(1, -3, -3, -1)) ) # 原点からの距離に変換
```

